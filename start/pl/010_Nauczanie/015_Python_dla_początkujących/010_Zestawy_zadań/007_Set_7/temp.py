 1/1: a = "0123456789"
 1/2: a[0]
 1/3: a[0:1]
 1/4: a[0:4]
 1/5: type(a[0:4])
 2/1: TASK_NUMBER = 1000
 2/2:
from math import log as ln
from random import random
def task_journal_generator(number):
    def task_occurence_time_generator(number):
        sum = 0
        for _ in range(number):
            sum += -ln(random()) / (1 / 20)
            yield sum
    task_occurence_times = task_occurence_time_generator(number)
    
    def task_execution_time_generator(number):
        for _ in range(number):
            yield -ln(random()) / (1 / 15)
    task_execution_times = task_execution_time_generator(number)
    
    prev_really_started = 0
    prev_execution_time = 0
    for _ in range(number):
        should_started = next(task_occurence_times)
        execution_time = next(task_execution_times)
        
        really_started = max(should_started, prev_really_started + prev_execution_time)
        prev_really_started = really_started
        prev_execution_time = execution_time
        yield {
            'should_started': should_started,
            'really_started': really_started,
            'execution_time': execution_time,
            'ended': really_started + execution_time,
            'wait': really_started - should_started
        }
 2/3: task_journal = list(task_journal_generator(TASK_NUMBER))
 2/4:
import plotly.graph_objects as go

fig = go.Figure(data=[go.Table(header=dict(values=['should_started', 'really_started', 'execution_time', 'ended']),
                 cells=dict(values=[[task['should_started'] for task in task_journal], 
                                    [task['really_started'] for task in task_journal],
                                    [task['execution_time'] for task in task_journal],
                                    [task['ended'] for task in task_journal]])
                     )])
fig.show()
 3/1:
def queue_size(moment, tasks):
    result = 0
    for task in tasks:
        if task[0] <= moment <= task[1]:
            result += 1
    result -= 1
    return max(result, 0)
 4/1: TASK_NUMBER = 1000
 4/2: TASK_NUMBER = 1000
 4/3:
from math import log as ln
from random import random
def task_journal_generator(number):
    def task_occurence_time_generator(number):
        sum = 0
        for _ in range(number):
            sum += -ln(random()) / (1 / 20)
            yield sum
    task_occurence_times = task_occurence_time_generator(number)
    
    def task_execution_time_generator(number):
        for _ in range(number):
            yield -ln(random()) / (1 / 15)
    task_execution_times = task_execution_time_generator(number)
    
    prev_really_started = 0
    prev_execution_time = 0
    for _ in range(number):
        should_started = next(task_occurence_times)
        execution_time = next(task_execution_times)
        
        really_started = max(should_started, prev_really_started + prev_execution_time)
        prev_really_started = really_started
        prev_execution_time = execution_time
        yield {
            'should_started': should_started,
            'really_started': really_started,
            'execution_time': execution_time,
            'ended': really_started + execution_time,
            'wait': really_started - should_started
        }
 4/4: task_journal = list(task_journal_generator(TASK_NUMBER))
 4/5:
import plotly.graph_objects as go

fig = go.Figure(data=[go.Table(header=dict(values=['should_started', 'really_started', 'execution_time', 'ended']),
                 cells=dict(values=[[task['should_started'] for task in task_journal], 
                                    [task['really_started'] for task in task_journal],
                                    [task['execution_time'] for task in task_journal],
                                    [task['ended'] for task in task_journal]])
                     )])
fig.show()
 4/6:
def queue_size(moment, tasks):
    result = 0
    for task in tasks:
        if task[0] <= moment <= task[1]:
            result += 1
    result -= 1
    return max(result, 0)
 4/7:
import numpy as np
queue_size_through_time = [
    queue_size(t, [(task['should_started'], task['ended']) for task in task_journal])
    for t in np.arange(task_journal[0]['should_started'], task_journal[-1]['ended'], 0.1)
]
 4/8:
import matplotlib.pyplot as plt
plt.plot(np.arange(task_journal[0]['should_started'], task_journal[-1]['ended'], 0.1), queue_size_through_time)
plt.show()
 5/1: TASK_NUMBER = 1000
 5/2:
from math import log as ln
from random import random
def task_journal_generator(number):
    def task_occurence_time_generator(number):
        sum = 0
        for _ in range(number):
            sum += -ln(random()) / (1 / 20)
            yield sum
    task_occurence_times = task_occurence_time_generator(number)
    
    def task_execution_time_generator(number):
        for _ in range(number):
            yield -ln(random()) / (1 / 15)
    task_execution_times = task_execution_time_generator(number)
    
    prev_really_started = 0
    prev_execution_time = 0
    for _ in range(number):
        should_started = next(task_occurence_times)
        execution_time = next(task_execution_times)
        
        really_started = max(should_started, prev_really_started + prev_execution_time)
        prev_really_started = really_started
        prev_execution_time = execution_time
        yield {
            'should_started': should_started,
            'really_started': really_started,
            'execution_time': execution_time,
            'ended': really_started + execution_time,
            'wait': really_started - should_started
        }
 5/3: task_journal = list(task_journal_generator(TASK_NUMBER))
 5/4:
import plotly.graph_objects as go

fig = go.Figure(data=[go.Table(header=dict(values=['should_started', 'really_started', 'execution_time', 'ended']),
                 cells=dict(values=[[task['should_started'] for task in task_journal], 
                                    [task['really_started'] for task in task_journal],
                                    [task['execution_time'] for task in task_journal],
                                    [task['ended'] for task in task_journal]])
                     )])
fig.show()
 5/5:
def queue_size(moment, tasks):
    result = 0
    for task in tasks:
        if task[0] <= moment <= task[1]:
            result += 1
    result -= 1
    return max(result, 0)
 5/6:
import numpy as np
queue_size_through_time = [
    queue_size(t, [(task['should_started'], task['ended']) for task in task_journal])
    for t in np.arange(task_journal[0]['should_started'], task_journal[-1]['ended'], 0.1)
]
 5/7:
import matplotlib.pyplot as plt
plt.plot(np.arange(task_journal[0]['should_started'], task_journal[-1]['ended'], 0.1), queue_size_through_time)
plt.show()
 6/1: TASK_NUMBER = 1000
 6/2:
from math import log as ln
from random import random
def task_journal_generator(number):
    def task_occurence_time_generator(number):
        sum = 0
        for _ in range(number):
            sum += -ln(random()) / (1 / 20)
            yield sum
    task_occurence_times = task_occurence_time_generator(number)
    
    def task_execution_time_generator(number):
        for _ in range(number):
            yield -ln(random()) / (1 / 15)
    task_execution_times = task_execution_time_generator(number)
    
    prev_really_started = 0
    prev_execution_time = 0
    for _ in range(number):
        should_started = next(task_occurence_times)
        execution_time = next(task_execution_times)
        
        really_started = max(should_started, prev_really_started + prev_execution_time)
        prev_really_started = really_started
        prev_execution_time = execution_time
        yield {
            'should_started': should_started,
            'really_started': really_started,
            'execution_time': execution_time,
            'ended': really_started + execution_time,
            'wait': really_started - should_started
        }
 6/3: task_journal = list(task_journal_generator(TASK_NUMBER))
 6/4:
import plotly.graph_objects as go

fig = go.Figure(data=[go.Table(header=dict(values=['should_started', 'really_started', 'execution_time', 'ended']),
                 cells=dict(values=[[task['should_started'] for task in task_journal], 
                                    [task['really_started'] for task in task_journal],
                                    [task['execution_time'] for task in task_journal],
                                    [task['ended'] for task in task_journal]])
                     )])
fig.show()
 6/5:
def queue_size(moment, tasks):
    result = 0
    for task in tasks:
        if task[0] <= moment <= task[1]:
            result += 1
    result -= 1
    return max(result, 0)
 6/6:
import numpy as np
queue_size_through_time = [
    queue_size(t, [(task['should_started'], task['ended']) for task in task_journal])
    for t in np.arange(task_journal[0]['should_started'], task_journal[-1]['ended'], 0.1)
]
 6/7:
import matplotlib.pyplot as plt
plt.plot(np.arange(task_journal[0]['should_started'], task_journal[-1]['ended'], 0.1), queue_size_through_time)
plt.show()
 6/8:
plt.hist([task['wait'] for task in task_journal], bins=30)
plt.show()
 6/9:
Er = sum([task['ended'] - task['should_started'] for task in task_journal]) / len(task_journal)
Er
6/10: len(task_journal)
6/11: Er * (1 / 20)
6/12: TASK_NUMBER = 1000
6/13:
from math import log as ln
from random import random
def task_journal_generator(number):
    def task_occurence_time_generator(number):
        sum = 0
        for _ in range(number):
            sum += -ln(random()) / (1 / 20)
            yield sum
    task_occurence_times = task_occurence_time_generator(number)
    
    def task_execution_time_generator(number):
        for _ in range(number):
            yield -ln(random()) / (1 / 15)
    task_execution_times = task_execution_time_generator(number)
    
    prev_really_started = 0
    prev_execution_time = 0
    for _ in range(number):
        should_started = next(task_occurence_times)
        execution_time = next(task_execution_times)
        
        really_started = max(should_started, prev_really_started + prev_execution_time)
        prev_really_started = really_started
        prev_execution_time = execution_time
        yield {
            'should_started': should_started,
            'really_started': really_started,
            'execution_time': execution_time,
            'ended': really_started + execution_time,
            'wait': really_started - should_started
        }
6/14: task_journal = list(task_journal_generator(TASK_NUMBER))
6/15:
import plotly.graph_objects as go

fig = go.Figure(data=[go.Table(header=dict(values=['should_started', 'really_started', 'execution_time', 'ended']),
                 cells=dict(values=[[task['should_started'] for task in task_journal], 
                                    [task['really_started'] for task in task_journal],
                                    [task['execution_time'] for task in task_journal],
                                    [task['ended'] for task in task_journal]])
                     )])
fig.show()
6/16:
def queue_size(moment, tasks):
    result = 0
    for task in tasks:
        if task[0] <= moment <= task[1]:
            result += 1
    result -= 1
    return max(result, 0)
6/17:
import numpy as np
queue_size_through_time = [
    queue_size(t, [(task['should_started'], task['ended']) for task in task_journal])
    for t in np.arange(task_journal[0]['should_started'], task_journal[-1]['ended'], 0.1)
]
6/18:
import matplotlib.pyplot as plt
plt.plot(np.arange(task_journal[0]['should_started'], task_journal[-1]['ended'], 0.1), queue_size_through_time)
plt.show()
6/19:
plt.hist([task['wait'] for task in task_journal], bins=30)
plt.show()
6/20:
Er = sum([task['ended'] - task['should_started'] for task in task_journal]) / len(task_journal)
Er
6/21: len(task_journal)
6/22: Er * (1 / 20)
 7/1: TASK_NUMBER = 1000
 7/2:
from math import log as ln
from random import random
def task_journal_generator(number):
    def task_occurence_time_generator(number):
        sum = 0
        for _ in range(number):
            sum += -ln(random()) / (1 / 20)
            yield sum
    task_occurence_times = task_occurence_time_generator(number)
    
    def task_execution_time_generator(number):
        for _ in range(number):
            yield -ln(random()) / (1 / 15)
    task_execution_times = task_execution_time_generator(number)
    
    prev_really_started = 0
    prev_execution_time = 0
    for _ in range(number):
        should_started = next(task_occurence_times)
        execution_time = next(task_execution_times)
        
        really_started = max(should_started, prev_really_started + prev_execution_time)
        prev_really_started = really_started
        prev_execution_time = execution_time
        yield {
            'should_started': should_started,
            'really_started': really_started,
            'execution_time': execution_time,
            'ended': really_started + execution_time,
            'wait': really_started - should_started
        }
 7/3: task_journal = list(task_journal_generator(TASK_NUMBER))
 7/4:
import plotly.graph_objects as go

fig = go.Figure(data=[go.Table(header=dict(values=['should_started', 'really_started', 'execution_time', 'ended']),
                 cells=dict(values=[[task['should_started'] for task in task_journal], 
                                    [task['really_started'] for task in task_journal],
                                    [task['execution_time'] for task in task_journal],
                                    [task['ended'] for task in task_journal]])
                     )])
fig.show()
 7/5:
def queue_size(moment, tasks):
    result = 0
    for task in tasks:
        if task[0] <= moment <= task[1]:
            result += 1
    result -= 1
    return max(result, 0)
 7/6:
import numpy as np
queue_size_through_time = [
    queue_size(t, [(task['should_started'], task['ended']) for task in task_journal])
    for t in np.arange(task_journal[0]['should_started'], task_journal[-1]['ended'], 0.1)
]
 7/7:
import matplotlib.pyplot as plt
plt.plot(np.arange(task_journal[0]['should_started'], task_journal[-1]['ended'], 0.1), queue_size_through_time)
plt.show()
 7/8:
plt.hist([task['wait'] for task in task_journal], bins=30)
plt.show()
 7/9:
Er = sum([task['ended'] - task['should_started'] for task in task_journal]) / len(task_journal)
Er
7/10: len(task_journal)
7/11: Er * (1 / 20)
 8/1: import subptocess
 8/2: import subprocess
 9/1: import subprocess
 9/2: options = subprocess.Popen(["echo" , "111\n222\n333"] , stdout=subprocess.PIPE)
 9/3: dialog = subprocess.check_output(["fzf" , "--height" , "2"] , stdin = options.stdout)
 9/4: dialog
 9/5: type(dialog)
 9/6: str(dialog)
10/1: print("\\n")
10/2: print("\n")
11/1: set([1 , 1 , 2 , 3 , 4 , 4 ,5])
11/2: list(set([1 , 1 , 2 , 3 , 4 , 4 ,5]))
12/1: [0 , 1 , 2 , 3](0:2)
12/2: [0 , 1 , 2 , 3][0:2]
12/3: [0 , 1 , 2 , 3][0:0]
12/4: [0 , 1 , 2 , 3][0:1]
12/5: [0 , 1 , 2 , 3][0:3]
13/1: "123\n456\n"
13/2: "123\\n456\\n"
13/3: "123\n456\n"
13/4: print("123\n456\n")
13/5: print("123\n456\n"[0:-1])
13/6: print("123\n456\n"[0:-2])
13/7: print("123\n456\n"[0:-1])
14/1: import simpleparse
14/2: import re
14/3: re.compile(r'^mon$')
14/4: re.compile(r'^mon$').math("mon")
14/5: m = re.compile(r'^mon$')
14/6: m.match("mon")
15/1: import simpleparse
15/2:
def orOper(d , functions):
    result = 0
    for fun in functions:
        result = result + fun(d)
    return result
15/3:
def andOper(d , functions):
    result = 0
    for fun in functions:
        result = result * fun(d)
    return result
15/4: import re
15/5: hasKeyRe = re.compile(r'^[^\s]+$')
15/6: hasKeyRe.match("#various")
15/7: hasKeyRe.match("#vari ous")
15/8: hasKeyRe.match("#vari-ous")
15/9: keys = ["various" , "passwords"]
15/10:
def hasKeyFun(d , data):
    if(data[1:] in d):
        return 1
    else:
        return 0
15/11: functions = [[hasKeyRe , hasKeyFun]]
15/12: simpleparse(fun , "#passwords #various |" , orOper = orOper , andOper = andOper)
15/13: simpleparse(keys , "#passwords #various |" , orOper = orOper , andOper = andOper)
15/14:
def MYorOper(d , functions):
    result = 0
    for fun in functions:
        result = result + fun(d)
    return result
15/15:
def MYandOper(d , functions):
    result = 0
    for fun in functions:
        result = result * fun(d)
    return result
15/16: simpleparse(keys , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
15/17: simpleparse(keys , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
15/18: simpleparse.simpleparse(keys , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
16/1: import simpleparse
16/2: import re
16/3:
def MYorOper(d , functions):
    result = 0
    for fun in functions:
        result = result + fun(d)
    return result
16/4:
def MYandOper(d , functions):
    result = 0
    for fun in functions:
        result = result * fun(d)
    return result
16/5:
def hasKeyFun(d , data):
    if(data[1:] in d):
        return 1
    else:
        return 0
16/6: hasKeyRe = re.compile(r'^[^\s]+$')
16/7: note = [[hasKeyRe , hasKeyFun]]
16/8: simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
16/9: fun = simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
16/10: fun("#various #passwords")
16/11: fun("#various #passwords |")
16/12: fun
16/13: fun(["various" , "passwords"])
16/14: fun = simpleparse.simpleparse(note , "#passwords #various &" , orOper = MYorOper , andOper = MYandOper)
16/15: fun(["various" , "passwords"])
16/16: fun(["varsadaious" , "passwordasdas"])
16/17: fun = simpleparse.simpleparse(note , "#passwords #various !" , orOper = MYorOper , andOper = MYandOper)
16/18: fun = simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
16/19: fun(["varsadaious" , "passwordasdas"])
16/20: fun(["varsadaious" , "passwords"])
16/21: note
16/22: note[0].match(!)
16/23: note[0].match("!")
16/24: note[0]
16/25: note[0][0]
16/26: note[0][0].match("!")
16/27:
def MYorOper(d , functions):
    result = 0
    for fun in functions:
        print(result)
        result = result + fun(d)
        print(result)
        print("---")
    return result
16/28: fun = simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
16/29: fun(["varsadaious" , "passwords"])
16/30: import simpleparse
16/31: import re
16/32: fun = simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
16/33: fun(["varsadaious" , "passwords"])
17/1: import simpleparse
17/2: import re
17/3:
def MYorOper(d , functions):
    result = 0
    for fun in functions:
        print(result)
        result = result + fun(d)
        print(result)
        print("---")
    return result
17/4:
def MYandOper(d , functions):
    result = 0
    for fun in functions:
        result = result * fun(d)
    return result
17/5: hasKeyRe = re.compile(r'^[^\s]+$')
17/6:
def hasKeyFun(d , data):
    if(data[1:] in d):
        return 1
    else:
        return 0
17/7: note = [[hasKeyRe , hasKeyFun]]
17/8: fun = simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
17/9: %load_ext autoreload
18/1: %load_ext autoreload
18/2: %autoreload 2
18/3: import simpleparse
18/4: import re
18/5:
def MYorOper(d , functions):
    result = 0
    for fun in functions:
        print(result)
        result = result + fun(d)
        print(result)
        print("---")
    return result
18/6:
def MYandOper(d , functions):
    result = 0
    for fun in functions:
        result = result * fun(d)
    return result
18/7: hasKeyRe = re.compile(r'^[^\s]+$')
18/8:
def hasKeyFun(d , data):
    if(data[1:] in d):
        return 1
    else:
        return 0
18/9: note = [[hasKeyRe , hasKeyFun]]
18/10: fun = simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
18/11: fun = simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
18/12: fun = simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
18/13: fun = simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
18/14: fun = simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
18/15: fun = simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
18/16: fun = simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
18/17: hasKeyRe = re.compile(r'^#[^\s]+$')
18/18: hasKeyRe.match("|")
18/19: hasKeyRe.match("#|")
18/20: note = [[hasKeyRe , hasKeyFun]]
18/21: fun = simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
18/22: fun(["various" , "passwords"])
18/23: fun = simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
18/24: fun(["various" , "passwords"])
18/25:
def MYorOper(d , functions):
    result = 0
    for fun in functions:
        result = result + fun(d)
    return result
18/26: fun = simpleparse.simpleparse(note , "#passwords #various |" , orOper = MYorOper , andOper = MYandOper)
18/27: fun(["various" , "passwords"])
18/28: fun = simpleparse.simpleparse(note , "#passwords #various &" , orOper = MYorOper , andOper = MYandOper)
18/29: fun(["various" , "passwords"])
18/30: fun = simpleparse.simpleparse(note , "#various" , orOper = MYorOper , andOper = MYandOper)
18/31: fun(["various"])
18/32: fun = simpleparse.simpleparse(note , "#various &" , orOper = MYorOper , andOper = MYandOper)
18/33: fun(["various"])
18/34:
def MYandOper(d , functions):
    result = 1
    for fun in functions:
        result = result * fun(d)
    return result
18/35: note = [[hasKeyRe , hasKeyFun]]
18/36: fun = simpleparse.simpleparse(note , "#various &" , orOper = MYorOper , andOper = MYandOper)
18/37: fun(["various"])
18/38: fun("#various #passwords |")
18/39: fun("#various #passwords &")
18/40: fun("#various #passwodfs &")
18/41:
def MYorOper(d , functions):
    result = 0
    for fun in functions:
        print(fun)
        print(fun(d))
        result = result + fun(d)
    return result
18/42: note = [[hasKeyRe , hasKeyFun]]
18/43: fun = simpleparse.simpleparse(note , "#various &" , orOper = MYorOper , andOper = MYandOper)
18/44: fun("#various #passwords |")
18/45: fun = simpleparse.simpleparse(note , "#various &" , orOper = MYorOper , andOper = MYandOper)
18/46: fun("#various #passwords |")
19/1: %load_ext autoreload
19/2: %autoreload 2
19/3: import simpleparse
19/4: import re
19/5:
def MYorOper(d , functions):
    result = 0
    for fun in functions:
        result = result + fun(d)
    return result
19/6:
def MYorOper(d , functions):
    result = 0
    for fun in functions:
        print(fun)
        print(fun(d))
        result = result + fun(d)
    return result
19/7: hasKeyRe = re.compile(r'^#[^\s]+$')
19/8:
def hasKeyFun(d , data):
    if(data[1:] in d):
        return 1
    else:
        return 0
19/9: note = [[hasKeyRe , hasKeyFun]]
19/10: fun = simpleparse.simpleparse(note , "#various &" , orOper = MYorOper , andOper = MYandOper)
19/11:
def MYorOper(d , functions):
    result = 0
    for fun in functions:
        result = result + fun(d)
    return result
19/12:
def MYandOper(d , functions):
    result = 1
    for fun in functions:
        result = result * fun(d)
    return result
19/13: fun = simpleparse.simpleparse(note , "#various &" , orOper = MYorOper , andOper = MYandOper)
19/14: fun(["various" , "passwords"])
19/15: fun = simpleparse.simpleparse(note , "#various #passwords |" , orOper = MYorOper , andOper = MYandOper)
19/16: fun(["various" , "passwords"])
19/17: fun = simpleparse.simpleparse(note , "#various #passwords &" , orOper = MYorOper , andOper = MYandOper)
19/18: fun(["various" , "passwords"])
19/19: fun(["various" , "passwordsdf"])
20/1: import plotly.graph_objects as go
20/2: import networkx as nx
21/1: import plotly.graph_objects as go
21/2: import networkx as nx
21/3: G = nx.random_geometric_graph(200, 0.125)
21/4: G
21/5:
edge_x = []
edge_y = []
for edge in G.edges():
    x0, y0 = G.nodes[edge[0]]['pos']
    x1, y1 = G.nodes[edge[1]]['pos']
    edge_x.append(x0)
    edge_x.append(x1)
    edge_x.append(None)
    edge_y.append(y0)
    edge_y.append(y1)
    edge_y.append(None)

edge_trace = go.Scatter(
    x=edge_x, y=edge_y,
    line=dict(width=0.5, color='#888'),
    hoverinfo='none',
    mode='lines')

node_x = []
node_y = []
for node in G.nodes():
    x, y = G.nodes[node]['pos']
    node_x.append(x)
    node_y.append(y)

node_trace = go.Scatter(
    x=node_x, y=node_y,
    mode='markers',
    hoverinfo='text',
    marker=dict(
        showscale=True,
        # colorscale options
        #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |
        #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |
        #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |
        colorscale='YlGnBu',
        reversescale=True,
        color=[],
        size=10,
        colorbar=dict(
            thickness=15,
            title='Node Connections',
            xanchor='left',
            titleside='right'
        ),
        line_width=2))
21/6:


node_adjacencies = []
node_text = []
for node, adjacencies in enumerate(G.adjacency()):
    node_adjacencies.append(len(adjacencies[1]))
    node_text.append('# of connections: '+str(len(adjacencies[1])))

node_trace.marker.color = node_adjacencies
node_trace.text = node_text
21/7:


fig = go.Figure(data=[edge_trace, node_trace],
             layout=go.Layout(
                title='<br>Network graph made with Python',
                titlefont_size=16,
                showlegend=False,
                hovermode='closest',
                margin=dict(b=20,l=5,r=5,t=40),
                annotations=[ dict(
                    text="Python code: <a href='https://plot.ly/ipython-notebooks/network-graphs/'> https://plot.ly/ipython-notebooks/network-graphs/</a>",
                    showarrow=False,
                    xref="paper", yref="paper",
                    x=0.005, y=-0.002 ) ],
                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False))
                )
fig.show()
21/8: gif
21/9: fig
21/10: fig.show()
21/11:
import networkx as nx
import matplotlib.pyplot as plt
G = nx.Graph()
G.add_edge(1,2)
G.add_edge(1,3)
nx.draw(G, with_labels=True)
plt.show()
22/1:
import dash
import dash_core_components as dcc
import dash_html_components as html
import networkx as nx
import plotly.graph_objs as go
import pandas as pd
from colour import Color
from datetime import datetime
from textwrap import dedent as d
import json

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']
app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
app.title = "Transaction Network"

if __name__ == '__main__':
    app.run_server(debug=True)
24/1: import pygame
25/1: import pygame
26/1: import re
26/2: datefromRE = re.compile(r'^\d\d/\d\d/\d\d\d\d-$')
26/3: datefromRE.match("02/02/2020-")
27/1:
# A
import matplotlib.pyplot as plt
import numpy as np
import math
import matplotlib.pyplot as plt


def simulation(lambda_a, lambda_s, tasks_num):
    t = np.zeros(tasks_num)  
    ts = np.zeros(tasks_num)  
    arrival_time = np.zeros(tasks_num)  
    execution_time = np.zeros(tasks_num) 
    q_zero = np.zeros(tasks_num, dtype=int)  
    q_fin = np.zeros(tasks_num, dtype=int)  
    for i in range(tasks_num):
        u = np.random.uniform(0, 1)
        us = np.random.uniform(0, 1)
        ts[i] = (-math.log(us) / lambda_s)
        if i == 0:
            t[i] = execution_time[i] = 0
        else:
            t[i] = (-math.log(u) / lambda_a)
            execution_time[i] = execution_time[i - 1] + ts[i - 1]
        arrival_time[i] = np.sum(t)
        if execution_time[i] < arrival_time[i]:
            execution_time[i] = arrival_time[i]

    for i in range(tasks_num):
        for j in range(tasks_num):
            if j < i and arrival_time[i] < execution_time[j] + ts[j]:
                q_zero[i] += 1
            if j > i and execution_time[i] + ts[i] > arrival_time[j]:
                q_fin[i] += 1

    return arrival_time, (execution_time + ts), q_zero, q_fin


def plot_simulation(arrival_time, executed, q_zero, q_fin, analytical_first=False):
    up = 0.1
    plt.figure(figsize=(8, 6))
    for index, val in enumerate(arrival_time):
        plt.scatter(arrival_time[index], q_zero[index], color='blue', s=50)
        plt.scatter(executed, q_fin, color="red", s=50)

    plt.xlabel("Czas")
    plt.ylabel("Kolejka")
    if analytical_first:
        plt.scatter(arrival_time, arrival_time * (lambda_a - lambda_s), color='magenta', s=50)
    plt.show()
27/2:
#B
lambda_a = 1/20
lambda_s = 1/15
tasks_num = 1000

arrival_time,executed,q_zero,q_fin=simulation(lambda_a,lambda_s,tasks_num)

def get_start_time(arrival_time,time):
  for start_index in range(tasks_num):
    if arrival_time[start_index] < time and arrival_time[start_index+1] > time:
      return start_index
  return 0



print("Prawo Little dla liczby zadan ",tasks_num)
start_time = get_start_time(arrival_time,10000)
print("srednia liczba zadan w systemie:", np.mean((q_zero[start_time]+1)))
print("sredni czas spedzony przez zadanie w systemie * liczba zadan w systemie")
time_in_the_system = (executed-arrival_time)
print(np.mean(time_in_the_system), "*", lambda_a, "=", np.mean(time_in_the_system) * lambda_a)
27/3:
#B
lambda_a = 1/20
lambda_s = 1/15
tasks_num = 1000

arrival_time,executed,q_zero,q_fin=simulation(lambda_a,lambda_s,tasks_num)

def get_start_time(arrival_time,time):
  for start_index in range(tasks_num):
    if arrival_time[start_index] < time and arrival_time[start_index+1] > time:
      return start_index
  return 0



print("Prawo Little dla liczby zadan ",tasks_num)
start_time = get_start_time(arrival_time,10000)
print("srednia liczba zadan w systemie:", np.mean((q_zero[start_time]+1)))
print("sredni czas spedzony przez zadanie w systemie * liczba zadan w systemie")
time_in_the_system = (executed-arrival_time)
print(np.mean(time_in_the_system), "*", lambda_a, "=", np.mean(time_in_the_system) * lambda_a)
27/4:
#B
lambda_a = 1/20
lambda_s = 1/15
tasks_num = 1000

arrival_time,executed,q_zero,q_fin=simulation(lambda_a,lambda_s,tasks_num)

def get_start_time(arrival_time,time):
  for start_index in range(tasks_num):
    if arrival_time[start_index] < time and arrival_time[start_index+1] > time:
      return start_index
  return 0



print("Prawo Little dla liczby zadan ",tasks_num)
start_time = get_start_time(arrival_time,10000)
print("srednia liczba zadan w systemie:", np.mean((q_zero[start_time]+1)))
print("sredni czas spedzony przez zadanie w systemie * liczba zadan w systemie")
time_in_the_system = (executed-arrival_time)
print(np.mean(time_in_the_system), "*", lambda_a, "=", np.mean(time_in_the_system) * lambda_a)
30/1:
!pip install plotly==4.5.0
!pip install numpy
!pip install matplotlib
30/2: TASK_NUMBER = 30
30/3:
from math import log as ln
from random import random
def task_journal_generator(number):
    def task_occurence_time_generator(number):
        sum = 0
        for _ in range(number):
            sum += -ln(random()) / (1 / 20)
            yield sum
    task_occurence_times = task_occurence_time_generator(number)
    
    def task_execution_time_generator(number):
        for _ in range(number):
            yield -ln(random()) / (1 / 15)
    task_execution_times = task_execution_time_generator(number)
    
    prev_really_started = 0
    prev_execution_time = 0
    for _ in range(number):
        should_started = next(task_occurence_times)
        execution_time = next(task_execution_times)
        
        really_started = max(should_started, prev_really_started + prev_execution_time)
        prev_really_started = really_started
        prev_execution_time = execution_time
        yield {
            'should_started': should_started,
            'really_started': really_started,
            'execution_time': execution_time,
            'ended': really_started + execution_time
        }
30/4: task_journal = list(task_journal_generator(TASK_NUMBER))
30/5:
import plotly.graph_objects as go

fig = go.Figure(data=[go.Table(header=dict(values=['should_started', 'really_started', 'execution_time', 'ended']),
                 cells=dict(values=[[task['should_started'] for task in task_journal], 
                                    [task['really_started'] for task in task_journal],
                                    [task['execution_time'] for task in task_journal],
                                    [task['ended'] for task in task_journal]])
                     )])
fig.show()
30/6:
def queue_size(moment, tasks):
    result = 0
    for task in tasks:
        if task[0] <= moment <= task[1]:
            result += 1
    result -= 1
    return max(result, 0)
30/7:
import numpy as np
queue_size_through_time = [
    queue_size(t, [(task['should_started'], task['ended']) for task in task_journal])
    for t in np.arange(task_journal[0]['should_started'], task_journal[-1]['ended'], 0.01)
]
30/8:
import matplotlib.pyplot as plt
plt.plot(np.arange(task_journal[0]['should_started'], task_journal[-1]['ended'], 0.01), queue_size_through_time)
plt.show()
30/9: avg_time_in_system = sum(task['ended'] - task['should_started'] for task in task_journal) / len(task_journal)
30/10: avg_time_in_system
30/11: number_of_task_in_systems = len(task_journal)
30/12: number_of_task_in_systems
31/1: import numpy.linalg
32/1: int("001")
33/1: "001_aaa"[0:4]
33/2: "001_aaa"[0:3]
33/3: "001_aaa"[4:]
34/1: print("\t123")
34/2: print("\t\t123")
35/1: a = "123"
35/2: a = a + "456"
35/3: a
35/4: exot
35/5: exi
35/6: eit
36/1: "*" * 1
36/2: "*" * 0
37/1: a = "123"
37/2:
def add_str(s):
    s = s + "*"
37/3: add_str(a)
37/4: a
37/5: ?list.sort
37/6: ["123_123" , "002_123"].sort(key = lambda s : int(s[0:4]))
37/7: ["123_123" , "002_123"].sort(key = lambda s : int(s[0:3]))
37/8: ["123_123" , "002_123"].sort(key = lambda s : int(s[0:3]))
37/9: l = ["123_123" , "002_123"]
37/10: l.sort(key = lambda s : int(s[0:3]))
37/11: l
38/1: "ASDADDSD".lower()
39/1: import os
39/2: ?os.isfile
39/3: ?os.path.isfile
40/1: import os
40/2: ?os.chdir
41/1:
!pip install plotly==4.5.0
!pip install numpy
!pip install matplotlib
41/2: TASK_NUMBER = 1000
41/3: TASK_NUMBER = 1000
41/4:
from math import log as ln
from random import random
def task_journal_generator(number):
    def task_occurence_time_generator(number):
        sum = 0
        for _ in range(number):
            sum += -ln(random()) / (1 / 20)
            yield sum
    task_occurence_times = task_occurence_time_generator(number)
    
    def task_execution_time_generator(number):
        for _ in range(number):
            yield -ln(random()) / (1 / 15)
    task_execution_times = task_execution_time_generator(number)
    
    prev_really_started = 0
    prev_execution_time = 0
    for _ in range(number):
        should_started = next(task_occurence_times)
        execution_time = next(task_execution_times)
        
        really_started = max(should_started, prev_really_started + prev_execution_time)
        prev_really_started = really_started
        prev_execution_time = execution_time
        yield {
            'should_started': should_started,
            'really_started': really_started,
            'execution_time': execution_time,
            'ended': really_started + execution_time
        }
41/5:
!pip install plotly==4.5.0
!pip install numpy
!pip install matplotlib
41/6: TASK_NUMBER = 1000
41/7:
from math import log as ln
from random import random
def task_journal_generator(number):
    def task_occurence_time_generator(number):
        sum = 0
        for _ in range(number):
            sum += -ln(random()) / (1 / 20)
            yield sum
    task_occurence_times = task_occurence_time_generator(number)
    
    def task_execution_time_generator(number):
        for _ in range(number):
            yield -ln(random()) / (1 / 15)
    task_execution_times = task_execution_time_generator(number)
    
    prev_really_started = 0
    prev_execution_time = 0
    for _ in range(number):
        should_started = next(task_occurence_times)
        execution_time = next(task_execution_times)
        
        really_started = max(should_started, prev_really_started + prev_execution_time)
        prev_really_started = really_started
        prev_execution_time = execution_time
        yield {
            'should_started': should_started,
            'really_started': really_started,
            'execution_time': execution_time,
            'ended': really_started + execution_time
        }
41/8: task_journal = list(task_journal_generator(TASK_NUMBER))
41/9:
import plotly.graph_objects as go

fig = go.Figure(data=[go.Table(header=dict(values=['should_started', 'really_started', 'execution_time', 'ended']),
                 cells=dict(values=[[task['should_started'] for task in task_journal], 
                                    [task['really_started'] for task in task_journal],
                                    [task['execution_time'] for task in task_journal],
                                    [task['ended'] for task in task_journal]])
                     )])
fig.show()
41/10:
def queue_size(moment, tasks):
    result = 0
    for task in tasks:
        if task[0] <= moment <= task[1]:
            result += 1
    result -= 1
    return max(result, 0)
41/11:
import numpy as np
queue_size_through_time = [
    queue_size(t, [(task['should_started'], task['ended']) for task in task_journal])
    for t in np.arange(task_journal[0]['should_started'], task_journal[-1]['ended'], 0.01)
]
42/1:
!pip install plotly==4.5.0
!pip install numpy
!pip install matplotlib
42/2: TASK_NUMBER = 1000
42/3:
from math import log as ln
from random import random
def task_journal_generator(number):
    def task_occurence_time_generator(number):
        sum = 0
        for _ in range(number):
            sum += -ln(random()) / (1 / 20)
            yield sum
    task_occurence_times = task_occurence_time_generator(number)
    
    def task_execution_time_generator(number):
        for _ in range(number):
            yield -ln(random()) / (1 / 15)
    task_execution_times = task_execution_time_generator(number)
    
    prev_really_started = 0
    prev_execution_time = 0
    for _ in range(number):
        should_started = next(task_occurence_times)
        execution_time = next(task_execution_times)
        
        really_started = max(should_started, prev_really_started + prev_execution_time)
        prev_really_started = really_started
        prev_execution_time = execution_time
        yield {
            'should_started': should_started,
            'really_started': really_started,
            'execution_time': execution_time,
            'ended': really_started + execution_time
        }
42/4: task_journal = list(task_journal_generator(TASK_NUMBER))
42/5:
import plotly.graph_objects as go

fig = go.Figure(data=[go.Table(header=dict(values=['should_started', 'really_started', 'execution_time', 'ended']),
                 cells=dict(values=[[task['should_started'] for task in task_journal], 
                                    [task['really_started'] for task in task_journal],
                                    [task['execution_time'] for task in task_journal],
                                    [task['ended'] for task in task_journal]])
                     )])
fig.show()
42/6:
def queue_size(moment, tasks):
    result = 0
    for task in tasks:
        if task[0] <= moment <= task[1]:
            result += 1
    result -= 1
    return max(result, 0)
42/7:
import numpy as np
queue_size_through_time = [
    queue_size(t, [(task['should_started'], task['ended']) for task in task_journal])
    for t in np.arange(task_journal[0]['should_started'], task_journal[-1]['ended'], 0.01)
]
42/8:
import matplotlib.pyplot as plt
plt.plot(np.arange(task_journal[0]['should_started'], task_journal[-1]['ended'], 0.01), queue_size_through_time)
plt.show()
42/9: avg_time_in_system = sum(task['ended'] - task['should_started'] for task in task_journal) / len(task_journal)
42/10: avg_time_in_system
42/11: number_of_task_in_systems = len(task_journal)
42/12: number_of_task_in_systems
42/13:
_lambda = 1 / 15
number_of_task_in_systems * _lambda
42/14: avg_time_in_system
42/15: number_of_task_in_systems = len(task_journal)
42/16: number_of_task_in_systems
42/17:
_lambda = 1 / 15
number_of_task_in_systems * _lambda
42/18: print(number_of_task_in_systems * _lambda)
42/19: number_of_task_in_systems
42/20:
_lambda = 1 / 15
number_of_task_in_systems * _lambda
42/21: print(number_of_task_in_systems * _lambda)
42/22: print(number_of_task_in_systems * _lambda)
45/1: import re
45/2: re.compile(r'#[01234567890abcdef]+}')
45/3: re.compile(r'#[01234567890abcdef]+[;|]')
45/4: recom = re.compile(r'#[01234567890abcdef]+[;|]')
45/5: file = "";
45/6: file = ""
45/7:
with open("GitHub.html5" , "r") as f:
    file = f.read()
45/8: file
45/9: recom.match(file)
45/10: recom = re.compile(r'#[01234567890abcdef]+')
45/11: recom.match(file)
45/12: print(recom.match(file))
45/13: recom = re.compile(r'[01234567890abcdef]+')
45/14: print(recom.match(file))
45/15: recom = re.compile(r'f')
45/16: print(recom.match(file))
46/1: import re
46/2: import os
46/3: os.path.isfile("/home/kacper/asdasdasd")
46/4: os.path.join("/home/kacper" , "asdasda")
47/1: ?os.run
47/2: ?os.
48/1: "cp andaaa asdads".split()
49/1: import datetime
49/2: datetime.datetime.today()
49/3: datetime.datetime.today().day
49/4: datetime.datetime.today().year
49/5: datetime.datetime.today().month
49/6: import os
49/7: ?os.mkdir
49/8: os.path.isdir:q
49/9: exiut
50/1: import od
50/2: import os
50/3: os.listdir()
50/4: ?os.listdir
50/5: import datetime
50/6: ?datetime.datetime
50/7: datetime.datetime(2020 , 1 , 12)
50/8: datetime.date(2020 , 1 , 12)
50/9: {}
50/10: "asdadsa = asdad".split("=")
50/11: "asd adsa".strip()
50/12: import uuid
50/13: uuid.uuid5()
50/14: uuid.uuid4()
50/15: str(uuid.uuid4())
50/16: os.listdir()
50/17: datetime.date.today()
52/1: import notedata
52/2: ?map
53/1: "_".isdigit()
53/2: "_1"[0].isdigit()
55/1:
#zestaw 3 - zadanie E
# obliczenia
# x=0
# 0-0 0.8 x 0.8 x 0.8 = 0.512
# 0-1 0.2 x 0.8 x 0.8 x 3 = 0.384
# 0-2 0.2 x 0.2 x 0.8 x 3 = 0.096
# 0-3 0.2 x 0.2 x 0.2 = 0.008
# 0.512 + 0.384 + 0.096 + 0.008 = 1.0
# x=1
# 1-0 0.8 x 0.8 x 0.5 = 0.32
# 1-1 0.5 x 0.2 x 0.8 + 0.2 x 0.5 x 0.8 x 2 = 0.48
# 1-2 0.5 x 0.2 x 0.8 x 2 + 0.5 x 0.2 x 0.2 = 0.18 
# 0.5 x 0.2 x 0.2  + 0.5 x 0.2 x 0.8 x 2 
# 1-3 0.5 x 0.2 x 0.2 = 0.02
# 0.32 + 0.48 + 0.18 + 0.02 = 1.0 
# x=2 
# 2-0 0.8 x 0.5 x 0.5 = 0.2
# 2-1 0.5 x 0.5 x 0.8 x 2 + 0.5 x 0.5 x 0.2 = 0.45
# 2-2 0.5 x 0.5 x 0.8 + 0.5 x 0.5 x 0.2 x 2 = 0.3
# 2-3 0.5 x 0.5 x 0.2 = 0.05
# 0.2 + 0.45 + 0.3 + 0.05 = 1.0 
# x=3
# 3-0 0.5 x 0.5 x 0.5 = 0.125
# 3-1 0.5 x 0.5 x 0.5 x 3 = 0.375
# 3-2 0.5 x 0.5 x 0.5 x 3 = 0.375
# 3-3 0.5 x 0.5 x 0.5 = 0.125
# 0.125 + 0.375 + 0.375 + 0.125 = 1.0


import numpy as np
from graphviz import Digraph
from IPython.display import display

G = Digraph(engine = 'dot')
p = np.array([[0.512, 0.384, 0.096, 0.008], [0.32, 0.48, 0.18, 0.02], [0.2, 0.45, 0.3, 0.05], [0.125, 0.375, 0.375, 0.125]])
xshape,yshape = p.shape
for x in range(xshape):
    G.node(str(x))
    for y in range(yshape):
      G.edge(str(x), str(y), label = str(p[x][y].item()))
display(G)
55/2:
# Zestaw 2 - zadanie D

import numpy as np
import matplotlib.pyplot as plt
import math
from random import choices

users= 100
experiments = 10000
population = [0,1]
hist = {}

users_states = np.zeros(users,dtype=int)
for experiments in range(experiments):
  current_st = []
  x = np.sum(users_states)
  p = [[0.8, 0.2], [1 - (0.008 * x + 0.1), 0.008 * x + 0.1]]
  for user_state in users_states:
    action = choices(population=population,weights=p[user_state])[0]
    current_st.append(action)
  users_states = current_st  
  hist[np.sum(users_states)] = hist.get(np.sum(users_states), 0) + 1
for key, value in hist.items():
  hist[key] = value / experiments


plt.figure(figsize=(8, 6))
plt.plot(list(hist.keys()), list(hist.values()), 'bo');
57/1:
from graphviz import Digraph
from IPython.display import display
import numpy as np

def drawGraph(p_matrix):
  graph = Digraph('graph')
  x_dim,y_dim = p_matrix.shape
  for x in range(x_dim):
    graph.node(str(x))
    for y in range(y_dim):
      graph.edge(str(x), str(y), label = str(p_matrix[x][y].item()))

  display(graph)
59/1:
import numpy as np
import matplotlib.pyplot as plt
59/2:
def multiply_matrix(A):
    C = np.zeros(A.shape)
    for i in range(A.shape[0]):
        for j in range(A.shape[1]):
            for k in range(A.shape[1]):
                C[i][j] += A[i][k] * A[k][j]
    return C
59/3:
def compare_matrices(A, B, max_diff):
    counter = 0
    diffs = []
    for i in range(A.shape[0]):
        for j in range(A.shape[0]):
            diffs.append(abs(A[i][j] - B[i][j]))
    if(max(diffs) > max_diff):
        return True
    else:
        return False
59/4:
P = np.array([[0.64, 0.32, 0.04], [0.4, 0.5, 0.1], [0.25, 0.5, 0.25]])
tmp = multiply_matrix(P)
PPs = []
counter = 0
while(compare_matrices(P, tmp, 0.000000001)):
    counter += 1
    PPs.append(tmp)
    P = tmp
    tmp = multiply_matrix(P)
for i in range(len(PPs)):
    print("Iteration no.", i+1)
    print(PPs[i])
print("\nStationary after", counter, "iterations")
59/5:
def simulate_B(starting_node, probabilities, iterations, number_of_states):
    x = starting_node
    nodes_visited = np.zeros(number_of_states)
    for i in range(iterations):
        x = np.random.choice(number_of_states, p = probabilities[x])
        nodes_visited[x] += 1
    pi = np.zeros(number_of_states)
    for i in range(number_of_states):
        pi[i] = nodes_visited[i] / iterations
    return pi
59/6:
P = np.array([[0.64, 0.32, 0.04], [0.4, 0.5, 0.1], [0.25, 0.5, 0.25]])
number_of_states = 3
start_from = np.zeros(shape=(number_of_states, number_of_states))
stationary = PPs[-1][0]
for i in range(number_of_states):
    print("Start from x =", i)
    start_from[i] = simulate_B(i, P, 10000, number_of_states)
    diff = abs(start_from[i] - stationary)
    print("Pi:\n", start_from[i])
    print("Theoretical value (P matrix):\n", stationary)
    print("Absolute diff between corresponding values:\n", diff,)
    print("Average diff:", np.mean(diff))
    print("\n")
59/7:
number_of_states = 3
start_from = np.zeros(shape=(number_of_states, number_of_states))
stationary = PPs[-1][0]
for i in range(number_of_states):
    print("Start from x =", i)
    start_from[i] = simulate_B(i, P, 1000000, number_of_states)
    diff = abs(start_from[i] - stationary)
    print("Pi vector:\n", start_from[i])
    print("Theoretical value:\n", stationary)
    print("Absolute diff between corresponding values:\n", diff,)
    print("Average diff:", np.mean(diff))
    print("\n")
59/8:
def simulate_C(probabilities, iterations, number_of_users):
    current_states = np.zeros(number_of_users,dtype=int)
    counters = np.zeros(number_of_users+1)
    for i in range(iterations):
        for j in range(number_of_users):
            state_change = np.random.choice(2, p = probabilities[current_states[j]])
            current_states[j] = state_change
        c = np.sum(current_states)
        counters[c] += 1
    return counters / iterations
59/9:
def plot_prob(cnt):
    plt.plot(cnt);
    plt.title("Probability that given number of people are logged in")
    plt.xlabel("Number of people logged in")
    plt.ylabel("Probability")
    plt.show()
59/10:
prob = [[0.8, 0.2], [0.5, 0.5]]
number_of_users = 100
plot_prob(simulate_C(prob, 10000, number_of_users))
59/11:
prob = [[0.5, 0.5], [0.5, 0.5]]
plot_prob(simulate_C(prob, 10000, number_of_users))
59/12:
prob = [[0.1, 0.9], [0.1, 0.9]]
plot_prob(simulate_C(prob, 10000, number_of_users))
59/13:
def simulate_D(probabilities, iterations, number_of_users):
    current_states = np.zeros(number_of_users,dtype=int)
    counters = np.zeros(number_of_users+1)
    for i in range(iterations):
        x = np.sum(current_states)
        probabilities = [[0.8, 0.2], [1 - (0.008 * x + 0.1), 0.008 * x + 0.1]]
        for j in range(number_of_users):
            state_change = np.random.choice(2, p = probabilities[current_states[j]])
            current_states[j] = state_change
        c = np.sum(current_states)
        counters[c] += 1
    return counters / iterations
59/14:
initial_prob = [[0.8, 0.2], [0.5, 0.5]]
number_of_users = 100
plot_prob(simulate_C(initial_prob, 10000, number_of_users))
62/1: "AG---"[0:3]
62/2: "AG-asdasda"[0:3]
62/3: "AG-asdasda"[3:]
63/1: ?str.replace
65/1: import binaryHeap
65/2: heap = binaryHeap.binaryHeap(32)
65/3: heap.printNice(0 , 0)
65/4: heap.insertKey(7)
65/5: heap.printNice(0 , 0)
65/6: heap.insertKey(8)
65/7: heap.printNice(0 , 0)
65/8: heap.insertKey(9)
65/9: heap.printNice(0 , 0)
65/10: heap.insertKey(1)
65/11: heap.printNice(0 , 0)
65/12: heap.insertKey(6)
65/13: heap.printNice(0 , 0)
65/14: heap.insertKey(11)
65/15: heap.printNice(0 , 0)
65/16: heap.insertKey(12)
65/17: heap.printNice(0 , 0)
65/18: heap.extractMin()
65/19: heap.printNice(0 , 0)
65/20: heap.extractMin()
65/21: heap.printNice(0 , 0)
65/22: heap.extractMin()
65/23: heap.printNice(0 , 0)
65/24: heap.extractMin()
65/25: heap.printNice(0 , 0)
65/26: heap.extractMin()
65/27: heap.printNice(0 , 0)
65/28: heap.extractMin()
65/29: heap.printNice(0 , 0)
65/30: heap.extractMin()
68/1: import opencv
69/1: import cv2
70/1: import cv2
70/2: import matplotlib
70/3: import numpy
70/4: import numpy as np
70/5: cap = cv2.VideoCapture(0)
70/6:
while(True):
    ret, frame = cap.read()
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    cv2.imshow('frame',gray)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
70/7: cap.release()
70/8: cv2.destroyAllWindows()
71/1: import graphviz
72/1: import smtplib
72/2: uj_user = "kacper.topolnicki@uj.edu.pl"
72/3: import getpass
72/4: us_password = getpass.getpass("Enter password: ")
72/5: uj_password
72/6: uj_password = getpass.getpass("Enter password: ")
72/7: uj_password
73/1: import smtplib
73/2: import getpass
73/3: uj_user = "kacper.topolnicki@uj.edu.pl"
73/4: uj_password = getpass.getpass("Enter password: ")
73/5: len(uj_password)
73/6: to = "kacpertopol@gmail.com"
73/7: subject = "Test message"
73/8: body = "Nothing in "
73/9: email_text = "From: "+ user + "\n" + "To: " + to + "\n" + "Subject: " + subject + "\n" + body
73/10: email_text = "From: "+ uj_user + "\n" + "To: " + to + "\n" + "Subject: " + subject + "\n" + body
73/11: email_text
73/12: email_text = "From: "+ uj_user + "\\n" + "To: " + to + "\\n" + "Subject: " + subject + "\\n" + body
73/13: email_text
73/14: email_text = "From: "+ uj_user + "\n" + "To: " + to + "\n" + "Subject: " + subject + "\n" + body
73/15: print(email_text)
73/16: server = smtplib.SMTP_SSL('mail.uj.edu.pl' , 993)
73/17: server = smtplib.SMTP_SSL('mail.uj.edu.pl' , 993)
73/18: server = smtplib.SMTP_SSL('smtp.mail.uj.edu.pl' , 993)
73/19: server = smtplib.SMTP_SSL('mail.uj.edu.pl' , 993)
73/20: server = smtplib.SMTP_SSL('mail.uj.edu.pl' , 143)
73/21: server = smtplib.SMTP_SSL('mail.uj.edu.pl' , 465)
73/22: ?smtplib.ehlo
73/23: ?smtplib.ehlo()
73/24: ?server.ehlo()
73/25: ?server.ehlo
73/26: server.ehlo()
73/27: server.login(uj_user)
73/28: server.login(uj_user , uj_password)
73/29: server.sendmail(uj_user, [to], email_text)
75/1: import smtplib
75/2: import getpass
75/3: uj_user = "kacper.topolnicki@uj.edu.pl"
75/4: uj_password = getpass.getpass("Enter password: ")
75/5: uj_password
75/6: to = "kacpertopol@gmail.com"
75/7: subject = "Test message"
75/8: email_text = "From: "+ uj_user + "\n" + "To: " + to + "\n" + "Subject: " + subject + "\n" + body
75/9: body = "Ignore."
75/10: email_text = "From: "+ uj_user + "\n" + "To: " + to + "\n" + "Subject: " + subject + "\n" + body
75/11: email_text
75/12: server = smtplib.SMTP_SSL('mail.uj.edu.pl' , 465)
75/13: server.login(uj_user , uj_password)
75/14: server.sendmail(uj_user, [to], email_text)
76/1: import smtplib
76/2: server = smtplib.SMTP_SSL('mail.uj.edu.pl' , 465)
76/3: server.login(uj_user , uj_password)
76/4: server = smtplib.SMTP_SSL('mail.uj.edu.pl' , 465)
76/5: server = smtplib.SMTP_SSL('smtp.office365.com' , 587)
76/6: server = smtplib.SMTP_TLS('smtp.office365.com' , 587)
76/7: server = smtplib.SMTP_SSL('smtp.office365.com' , 587)
76/8: server = smtplib.SMTP('smtp.office365.com' , 587)
76/9: server.starttls()
76/10: server = smtplib.SMTP_SSL('mail.uj.edu.pl' , 465)
77/1: import smtplib
77/2: uj_user = "kacper.topolnicki@uj.edu.pl"
77/3: uj_password
77/4: uj_password = getpass.getpass("Enter password: ")
77/5: uj_password = "dGr7n #IpnO"
77/6: server.login(uj_user , uj_password)
77/7: server = smtplib.SMTP_SSL('mail.uj.edu.pl' , 465)
78/1: import simpleparse
78/2: import re
79/1: "aaa" in "aseadsdAAAdddasdaaaekwlerkm"
79/2: "aaa" in "asdasdlkamlsdkmaslkdmalksdm"
78/3:
def hasString(d , data):
    return (data in d)
78/4:
def isNumber(d , data):
    return int(data) == int(d)
78/5: re.compile(r'.*').match("1231231231")
78/6: hasStringRe = re.compile(r'.*')
78/7: re.compile(r'[1-9]*')
78/8: re.compile(r'[1-9]*').match("123123")
78/9: re.compile(r'[1-9]*').match("123a")
78/10: re.compile(r'[0123456789]*').match("123a")
78/11: re.compile(r'[0123456789]*').match("sdffdsdfs")
78/12: re.compile(r'[0123456789]+').match("sdffdsdfs")
78/13: hasStringRe = re.compile(r'^/.+$')
78/14: hasStringRe = re.compile(r'^.+$')
78/15: hasStringRe.match("")
78/16: hasStringRe.match("123123 sfs dfsd")
78/17: isNumberRe = re.compile(r'^[0123456789]+$')
78/18: isNumberRe.match("1231231")
78/19: isNumberRe.match("123123d1")
78/20: isNumberRe.match("123123d1")
78/21: functions = [[hasStringRe , hasString] , [isNumberRe , isNumber]]
78/22: fun = simpleparse(functions , "123123")
78/23: fun = simpleparse.simpleparse(functions , "123123")
78/24: %load_ext autoreload
78/25: %autoreload 2
78/26: import simpleparse
78/27: hasStringRe = re.compile(r'^[a-z]+$')
78/28: hasStringRe.match("123")
78/29: hasStringRe.match("asdasd")
78/30: functions = [[hasStringRe , hasString] , [isNumberRe , isNumber]]
78/31: fun = simpleparse.simpleparse(functions , "123123")
78/32: fun
78/33: fun = simpleparse.simpleparse(functions , "123 aaa |")
78/34: fun = simpleparse.simpleparse(functions , "123 aaa |")
78/35: fun("123")
78/36: fun("111")
78/37: fun("aaa")
78/38: fun("aaa")
78/39:
def isNumber(d , data):
    print(data)
    return int(data) == int(d)
78/40: functions = [[hasStringRe , hasString] , [isNumberRe , isNumber]]
78/41: fun = simpleparse.simpleparse(functions , "123 aaa |")
78/42: fun("aaa")
80/1: "123asdasdASDA".lower()
80/2: "123asdasdASDĄĘŚĆŹŻ".lower()
81/1: import re
81/2: impore sys
81/3: import sys
83/1: "#123"[0:1]
83/2: "#123"[0:2]
84/1: [1 , 2 , 3] + [4 , 5 , 6]
84/2: [1 , 2 , 3].remove(2)
84/3: a = [1 ,2 , 3]
84/4: a.remove(2)
84/5: a
84/6: a.remove(2)
84/7: union
86/1: import re
86/2: re.compile(r'^\w+$').match("Kacper_Topolnicki")
86/3: re.compile(r'^\w+$').match("Kacper_@#$@#$@Topolnicki")
86/4: re.compile(r'^\w+$').match("_Topolnicki")
86/5: re.compile(r'^\w+$').match("_")
86/6: re.compile(r'^\w+$').match("_123")
86/7: re.compile(r'^\w+$').match("_1234567890")
86/8: re.compile(r'^\w+$').match("_1234567890!@")
86/9: re.compile(r'^\w+$').match("_1234567890!")
86/10: re.compile(r'^\w+$').match("_1234567890_")
86/11: re.compile(r'^\w+$').match("_1234567890!@#!")
87/1: import re
87/2: re.compile(r'^\w+@\d+$').match("kacper@2")
87/3: re.compile(r'^\w+@\d+$').match("kacper")
87/4: "kacper@2".split("@")[-1]
88/1: import re
88/2: re.compile(r'^\!\d$').mathc("!2")
88/3: re.compile(r'^\!\d$').match("!2")
88/4: re.compile(r'^\!\d$').match("2")
88/5: re.compile(r'^\!\d$').match(":2")
88/6: re.compile(r'^\!\d$').match(":2")
88/7: [0] + [1 , 2 , 3]
88/8: [0 , 1 , 3 , 4][1:]
88/9: [][1:]
89/1: [0 , 1 , 3 , 4][:-1]
89/2: [][:-1]
90/1: "kk" in "kkasdada"
91/1: ?map
91/2: map(lambda x : x.lower() , ["AAA"])
92/1: a = "0123456"
92/2:
for c in a:
    print(c)
93/1: [1 , 2 , 3 , 4][2:3]
93/2: [1 , 2 , 3 , 4][2-1:3]
94/1: import re.
94/2: import re
94/3: re.compile(r'mon|tue').match("m")
94/4: re.compile(r'mon|tue').match("mon")
94/5: re.compile(r'mon|tue').match("tue")
94/6: re.compile(r'mon|tue').match("tuew")
96/1: import copy
96/2: import sys
96/3: from pyPdf import PdfFileWriter, PdfFileReader
97/1: import copy , sys
97/2: from pyPdf import PdfFileWriter, PdfFileReader
97/3: import pyPdf
98/1: import copy , sys
98/2: from pyPdf import PdfFileWriter, PdfFileReader
99/1: from pyPdf import PdfFileWriter, PdfFileReader
101/1: from pyPdf import PdfFileWriter, PdfFileReader
102/1: from pyPdf import PdfFileWriter, PdfFileReader
103/1: from pyPdf import PdfFileWriter, PdfFileReader
103/2: import pdf
103/3: import py_pdf
104/1: from pyPdf import PdfFileWriter, PdfFileReader
105/1: import graph
105/2: a = graph.Vertex("A")
105/3: a.key
106/1: %load_ext autoreload
106/2: %autoreload 2
106/3: import graph
107/1: %load_ext autoreload
107/2: %autoreload 2
107/3: import graph
107/4: import graph
107/5: g = graph.Graph()
107/6: g.add_vertex("A")
107/7: g.add_vertex(graph.Vertex("A"))
107/8: g.add_vertex(graph.Vertex("B"))
107/9: g
107/10: g
107/11: g = graph.Graph()
107/12: g.add_vertex(graph.Vertex("A"))
107/13: g.add_vertex(graph.Vertex("B"))
107/14: g
107/15: print(g)
107/16: print(g)
107/17: print(g)
107/18: print(g)
107/19: g.add_edge("A" , "B")
107/20: print(g)
107/21: g.add_edge("A" , "B")
107/22: g.dot_str()
107/23: g.dot_str()
107/24: print(g.dot_str())
107/25: print(g.dot_str())
107/26: print(g.dot_str())
107/27: print(g)
107/28: g.draw()
107/29: g.draw()
107/30: g.draw()
107/31: g.draw()
107/32: g.draw()
107/33: g.draw()
107/34: g.draw(edge_labels = True)
107/35: g.draw(edge_labels = True)
107/36: g.draw(edge_labels = True)
107/37: g.add_edge("A" , "B" , weight = 10)
107/38: g.draw(edge_labels = True)
107/39: g.draw(edge_labels = True)
107/40: print(g)
108/1: %load_ext autoreload
108/2: %autoreload 2
108/3: import graph
108/4: g = graph.Graph()
108/5: g.add_edge("A" , "B" , weight = 10)
108/6: g.draw()
108/7: print(g)
108/8: g.add_edge("A" , "B" , weight = 10)
108/9: g.add_edge("A" , "B" , weight = 10)
108/10: g.add_edge("A" , "B" , weight = 10)
108/11: g.draw()
108/12: g.draw()
108/13: g.draw()
108/14: g.draw()
108/15: g.draw(edge_labels = True)
108/16: g.draw(edge_labels = True)
108/17: g.draw(edge_labels = True)
108/18: g.draw(edge_labels = True)
108/19: g.draw(edge_labels = True)
108/20: g.draw(edge_labels = True)
108/21: g.draw(edge_labels = True)
108/22: g.draw(edge_labels = True)
108/23: g.add_edge("A" , "B" , weight = 1)
108/24: g.draw(edge_labels = True)
108/25: g.add_edge("B" , "A" , weight = -1)
108/26: g.draw(edge_labels = True)
109/1: %load_ext autoreload
109/2: %autoreload 2
109/3: from graph import Graph , Vertex
109/4: g = Graph()
109/5:
for in in range(6):
    g.add_vertex(Vertex(i))
109/6:
for in range(6):
    g.add_vertex(Vertex(i))
109/7:
for i in range(6):
    g.add_vertex(Vertex(i))
109/8: g
109/9: print(g)
109/10: g.draw()
109/11: g.add_edge(0, 1, 5)
109/12: g.add_edge(0, 5, 2)
109/13: g.add_edge(1, 2, 4)
109/14: g.add_edge(2, 3, 9)
109/15: g.add_edge(3, 4, 7)
109/16: g.add_edge(3, 5, 3)
109/17: g.add_edge(4, 0, 1)
109/18: g.add_edge(5, 4, 8)
109/19: g.add_edge(5, 2, 1)
109/20: g.draw()
109/21:
gr = {
    0: {1: 5, 5: 2},
    1: {2: 4},
    2: {3: 9},
    3: {4: 7, 5: 3},
    4: {0: 1},
    5: {4: 8}
}
109/22: gr
109/23: print(gr)
109/24: from graph import draw_dict_graph
109/25: draw_dict_graph(gr)
109/26: draw_dict_graph(gr)
109/27: g.draw()
109/28: g.draw()
109/29: g.draw()
109/30: g.draw()
109/31: gr
109/32: gr
109/33: draw_dict_graph(gr)
109/34: draw_dict_graph(gr)
109/35: g.draw()
109/36: draw_dict_graph(gr)
109/37: "0123456789"[0]
109/38: "0123456789"[1]
110/1: %load_ext autoreload
110/2: %autoreload 2
110/3: import graph
110/4:
gr = {
    0: {1: 5, 5: 2},
    1: {2: 4},
    2: {3: 9},
    3: {4: 7, 5: 3},
    4: {0: 1},
    5: {4: 8}
}
110/5: graph.draw_dict_graph(gr)
110/6:
gr = {
    0: {1, 5},
    1: {2},
    2: {3},
    3: {4, 5},
    4: {0},
    5: {4}
}
110/7: graph.draw_dict_graph(gr)
110/8: graph.draw_dict_graph(gr)
110/9: graph.draw_dict_graph(gr)
110/10: type(gr)
110/11: type(gr) == dict
110/12: type(gr["1"]) == dict
110/13: type(gr[1]) == dict
110/14: type(gr[1])
110/15: graph.draw_dict_graph(gr)
110/16:
gr = {
    0: {1, 5},
    1: {2},
    2: {3},
    3: {4, 5},
    4: {0},
    5: {4}
}
110/17: graph.draw_dict_graph(gr)
110/18:
gr = {
    0: {1: 5, 5: 2},
    1: {2: 4},
    2: {3: 9},
    3: {4: 7, 5: 3},
    4: {0: 1},
    5: {4: 8}
}
110/19: graph.draw_dict_graph(gr)
110/20: ls
111/1: from graphTools import Graph
111/2: g = Graph()
111/3: g.add_vertex("mleko")
111/4: from graphTools import Graph , Vertex
111/5: g = Graph()
111/6: g.add_vertex(Vertex("mleko"))
111/7: g.add_vertex(Vertex("jajko"))
111/8: g.add_vertex(Vertex("olej"))
111/9: g.add_vertex(Vertex("proszek"))
111/10: g.add_edge("mleko" , "proszek")
111/11: g.add_edge("jajko" , "proszek")
111/12: g.add_edge("olej" , "proszek")
111/13: g.draw()
111/14: g.add_vertex(Vertex("patelnia"))
111/15: g.add_vertex(Vertex("porcja"))
111/16: g.add_edge("patelnia" , "porcja")
111/17: g.draw()
111/18: g.add_vertex(Vertex("obrót"))
111/19: g.add_edge("porcja" , "obrót")
111/20: g.add_vertex(Vertex("obrót"))
111/21: g.draw()
111/22: g.add_vertex(Vertex("konsumpcja"))
111/23: g.add_edge("obrót" , "konsumpcja")
111/24: g.draw()
111/25: g.add_vertex(Vertex("syrop"))
111/26: g.add_edge("syrop" , "konsumpcja")
111/27: g.draw()
111/28: g.add_edge("proszek" , "syrop")
111/29: g.draw()
111/30: g.add_edge("proszek" , "porcja")
111/31: g.draw()
112/1: from graphTools import Graph , Vertex
112/2: g = Graph()
112/3: g.add_vertex(Vertex("grzej syrop"))
112/4: g.draw()
112/5: g.add_vertex(Vertex("grzej_syrop"))
112/6: g.draw()
112/7: g = Graph()
112/8: g.add_vertex(Vertex("wlej_mleko"))
112/9: g.add_vertex(Vertex("wlej_jajko"))
112/10: g.add_vertex(Vertex("wlej_olej"))
112/11: g.add_vertex(Vertex("zamieszaj_ciasto"))
112/12: g = Graph()
112/13: g.add_vertex(Vertex("wlej_mleko"))
112/14: g.add_vertex(Vertex("wlej_jajko"))
112/15: g.add_vertex(Vertex("wlej_olej"))
112/16: g.add_vertex(Vertex("zamieszaj_ciasto"))
112/17: g.draw()
114/1: exot
115/1: from graphTools import Graph , Vertex
115/2: g = Graph()
115/3: g.add_vertex(Vertex("dodaj_jako"))
115/4: g.add_vertex(Vertex("dolej_mleko"))
115/5: g.add_vertex(Vertex("dolej_olej"))
115/6: g.draw()
115/7: g.add_vertex(Vertex("zmieszaj_ciasto"))
115/8: g.draw()
115/9: g.add_edge("dodaj_jako" , "zmieszaj_ciasto")
115/10: g.add_edge("dolej_mleko" , "zmieszaj_ciasto")
115/11: g.add_edge("dolej_olej" , "zmieszaj_ciasto")
115/12: g.draw()
115/13: g.add_vertex(Vertex("podgrzej_syrop"))
115/14: g.draw()
115/15: g.add_edge("zmieszaj_ciasto" , "podgrzej_syrop")
115/16: g.draw()
115/17: g.add_vertex(Vertex("podgrzej_patelnie"))
115/18: g.draw()
115/19: g.add_vertex(Vertex("wylej_porcje"))
115/20: g.draw()
115/21: g.add_edge("zmieszaj_ciasto" , "wylej_porcje")
115/22: g.draw()
115/23: g.draw()
115/24: g.add_edge("podgrzej_patelnie" , "wylej_porcje")
115/25: g.draw()
115/26: g.add_vertex(Vertex("obroc_nalesnik"))
115/27: g.add_edge("wylej_porcje" , "obroc_nalesnik")
115/28: g.draw()
115/29: g.add_vertex(Vertex("zjedz_nalesnik"))
115/30: g.add_edge("obroc_nalesnik" , "zjedz_nalesnik")
115/31: g.draw()
115/32: g.draw()
115/33: g.add_edge("podgrzej_syrop" , "zjedz_nalesnik")
115/34: g.draw()
116/1: from collections import defaultdict
116/2: a = defaultdict(set)
116/3: a
116/4: a["X"]
116/5: a
116/6: a["X"].add("Y")
116/7: a
116/8: a["X"].add("Z")
116/9: a
116/10: [0 , 1 , 2][0:0]
116/11: [0 , 1 , 2][:1]
116/12: [0 , 1 , 2][:2]
116/13: [0 , 1 , 2][:3]
117/1: ?sorted
117/2: pth = [0 , 1 , 2 , 3 , 4]
117/3: range(len(pth))
117/4: for i in range(len(pth))
117/5:
for i in range(len(pth)):
    print(i , pth[:i])
117/6: from collections import sorted
117/7: sorted([3 , 2 , 1 , 5])
117/8: sorted([3 , 2 , 1 , 5] , lambda a , b : a - b)
117/9: sorted([3 , 2 , 1 , 5] , key = lambda x : -x)
118/1: import csv
119/1: import csv
119/2:
with open("temp.csv" , "r") as fle:
    csv_reade = csv.DictReader(fle)
    print(csv_reade)
119/3:
with open("temp.csv" , "r") as fle:
    csv_reade = csv.DictReader(fle)
    for row in csv_reade:
        print(row)
120/1: import fzfcsvtools
120/2: dat = fzfcsvtools.read_csv("temp.csv")
120/3: dat
121/1: dat = fzfcsvtools.read_csv("temp.csv")
121/2: import fzfcsvtools
121/3: dat = fzfcsvtools.read_csv("temp.csv")
121/4: dat
122/1: import fzfcsvtools
122/2: dat = fzfcsvtools.read_csv("temp.csv")
122/3: dat
123/1: import fzfcsvtools
123/2: dat = fzfcsvtools.read_csv("temp.csv")
123/3: dat
124/1: import fzfcsvtools
125/1: import fzfcsvtools
125/2: dat = fzfcsvtools.read_csv("temp.csv")
125/3: q
126/1: %load_ext autoreload
126/2: %autoreload 2
126/3: import fzfcsvtools
126/4: dat = fzfcsvtools.read_csv("temp.csv")
126/5: dat
126/6: dat = fzfcsvtools.read_csv("temp.csv")
126/7: dat = fzfcsvtools.read_csv("temp.csv")
126/8: x = [" 123 " , " 231" , "2"]
126/9: map(lambda x : x.strip() , x)
126/10: list(map(lambda x : x.strip() , x))
126/11: dat = fzfcsvtools.read_csv("temp.csv")
126/12: dat
126/13: dat = fzfcsvtools.read_csv("temp.csv")
126/14: dat
126/15: range(3)
126/16: list(range(3))
126/17: dat = fzfcsvtools.read_csv("temp.csv")
126/18: dat = fzfcsvtools.read_csv("temp.csv")
126/19: dat = fzfcsvtools.read_csv("temp.csv")
126/20: dat
126/21: set([1 , 1 , 1 ,2 ])
126/22: dat = fzfcsvtools.read_csv("temp.csv")
126/23: dat
126/24: x = [" 123 " , " 231" , "2"]
126/25: a[2:]
126/26: x[2:]
126/27: x[1:]
126/28: dat = fzfcsvtools.read_csv("temp.csv")
126/29: dat
126/30: dat
126/31: dat = fzfcsvtools.read_csv("temp.csv")
126/32: dat
126/33: dat
126/34: dat = fzfcsvtools.read_csv("temp.csv")
126/35: dat
127/1: %load_ext autoreload
127/2: %autoreload 2
127/3: import fzfcsvtools
127/4: dat = fzfcsvtools.read_csv("temp.csv")
127/5: dat
127/6: dat = fzfcsvtools.read_csv("temp.csv")
127/7: dat
127/8: dat = fzfcsvtools.read_csv("temp.csv")
127/9: dat
127/10: dat = fzfcsvtools.read_csv("temp.csv")
127/11: dat
127/12: dat = fzfcsvtools.read_csv("temp.csv")
127/13: dat = fzfcsvtools.read_csv("temp.csv")
127/14: dat = fzfcsvtools.read_csv("temp.csv")
127/15: fzfcsvtools.print_csv(dat)
127/16: fzfcsvtools.print_csv(dat)
127/17: fzfcsvtools.print_csv(dat)
127/18: dat
127/19: dat = fzfcsvtools.read_csv("temp.csv")
127/20: fzfcsvtools.print_csv(dat)
127/21: fzfcsvtools.print_csv(dat)
127/22: fzfcsvtools.print_csv(dat)
127/23: fzfcsvtools.print_csv(dat)
127/24: fzfcsvtools.print_csv(dat)
127/25: fzfcsvtools.print_csv(dat)
127/26: fzfcsvtools.print_csv(dat)
127/27: fzfcsvtools.print_csv(dat)
127/28: fzfcsvtools.print_csv(dat)
127/29: fzfcsvtools.write_csv(dat , "new.csv")
127/30: fzfcsvtools.write_csv(dat , "new.csv")
127/31: dat = fzfcsvtools.read_csv("new.csv")
127/32: fzfcsvtools.print_csv(dat)
127/33: dat
128/1: %load_ext autoreload
128/2: %autoreload 2
128/3: import fzfcsvtools
128/4: dat = fzfcsvtools.read_csv("new.csv")
128/5: dat
128/6: dat
128/7: dat = fzfcsvtools.read_csv("new.csv")
128/8: dat = fzfcsvtools.read_csv("new.csv")
128/9: dat
128/10: dat = fzfcsvtools.read_csv("new.csv")
128/11: dat
128/12: dat = fzfcsvtools.read_csv("new.csv")
128/13: fzfcsvtools.print_csv(dat)
128/14: dat = fzfcsvtools.read_csv("temp.csv")
128/15: fzfcsvtools.print_csv(dat)
129/1: %load_ext autoreload
129/2: %autoreload 2
129/3: import fzfcsvtools
129/4: fzfcsvtools.select_from(["111" , "222" , "333"])
129/5: fzfcsvtools.select_from(["111" , "222" , "333"])
129/6: fzfcsvtools.select_from(["111" , "222" , "333"])
129/7: fzfcsvtools.select_from(["111" , "222" , "333"])
129/8: fzfcsvtools.select_from(["111" , "222" , "333"])
129/9: fzfcsvtools.select_from(["111" , "222" , "333"])
129/10: fzfcsvtools.select_from(["111" , "222" , "333"])
129/11: fzfcsvtools.select_from(["111" , "222" , "333"])
129/12: fzfcsvtools.select_from(["111" , "222" , "333"])
130/1: import os
130/2:
with open("list" , "r") as fle:
    for line in fle.readlines():
        print(line)
130/3:
with open("list" , "r") as fle:
    for line in fle.readlines():
        print(line)
130/4: arg = ""
130/5:
with open("list" , "r") as fle:
    for line in fle.readlines():
        arg = arg + "\"" + line + "\""
130/6: print(arg)
130/7:
with open("list" , "r") as fle:
    for line in fle.readlines():
        arg = arg + "\"" + line.strip() + "\""
130/8: arg = ""
130/9:
with open("list" , "r") as fle:
    for line in fle.readlines():
        arg = arg + "\"" + line.strip() + "\""
130/10: arg
130/11: arg = "pdfunite "
130/12:
with open("list" , "r") as fle:
    for line in fle.readlines():
        arg = arg + "\"" + line.strip() + "\" "
130/13: arg = arg + " all"
130/14: arg
130/15: os.system(arg)
131/1:
with open("./out_sagemath" , "r") as file:
    for line in file.readlines():
        print(line)
132/1: import sys
132/2:
with open("out_sagemath" , "r") as f:
    for line in f.readlines():
        pkg , fle , a , b , c = line.split()
        print(fle)
132/3:
with open("out_sagemath" , "r") as f:
    for line in f.readlines():
        pkg , fle , a , b , c = line.split()
        if(a.strip() == "exists"):
            print(fle)
        else:
            print("!!!!!!!!")
132/4: import os
132/5:
with open("out_sagemath" , "r") as f:
    for line in f.readlines():
        pkg , fle , a , b , c = line.split()
        if(a.strip() == "exists"):
            print(os.system("pacman -Qo " + fle.strip()))
        else:
            print("!!!!!!!!")
133/1: import os
134/1: import matplotlib
134/2: import matplotlib.pyplot as plt
134/3: import numpy as np
134/4: fig , ax = plt.subplots()
134/5: fig
134/6: ax
134/7: ax.plot([1 ,2 , 3 , 4], [1 , 4 , 2 , 3])
134/8: fig.show()
134/9: fig, axs = plt.subplots(2, 2)
134/10: fig.show()
134/11: ax
134/12: np.random.rand(4,5)
134/13: import pandas
134/14: pandas.DataFrame(np.random.rand(4,5), columns = list('abcde'))
134/15: pandas.DataFrame(np.random.rand(4,5), columns = list('abcde')).values
134/16: np.matrix([[1, 2], [3, 4]])
134/17: np.linspace(0, 2, 100)
135/1: from numpy import linalg as LS
135/2: from numpy import linalg as LA
135/3: np.diag((1 , 2 , 3))
135/4: import numpy as np
135/5: np.diag((1 , 2 , 3))
135/6: import multiprocessing as mp
135/7: print("Number of processors: " , mp.cpu_count())
135/8: import scipy.integrate as integrate
135/9: import scipy.special as special
135/10: ?integrate.quad
135/11: result = integrate.quad(lambda x: special.jv(2.5,x), 0, 4.5)
135/12: result
135/13: ?special.jv
135/14: special.jv(2.5 , 0.4)
135/15: special.jv(2.5 , 0.7)
135/16: special.jv(2.5 , 0.9)
135/17: type(result)
135/18: ?integrate.quad
136/1: import glob
136/2: glob.glob('*_deltaweak_*')
136/3: glob.glob('*')
136/4: glob.glob('*_*')
136/5: glob.glob('*_delta*')
136/6: glob.glob('*_deltaweak*')
136/7: glob.glob('*_deltaweak*')
136/8: ?glob.glob
137/1: import numpy as np
137/2: np.array()
137/3: np.array([])
137/4: x = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
137/5: x[3 , :]
137/6: x[3:3 , :]
137/7: x[1 , :]
137/8: x[2 , :]
137/9: x[: , 3]
137/10: x[: , 3].shape
137/11: x[: , 3]
137/12: new = x[: , 3]
137/13: new.size
138/1: import numba
139/1: from numba import jit
139/2: import numpy as np
139/3: x = np.arange(100).reshape(10, 10)
139/4: x
139/5:
@jit(nopython=True) # Set "nopython" mode for best performance, equivalent to @njit
def go_fast(a): # Function is compiled to machine code when called the first time
    trace = 0.0
    for i in range(a.shape[0]):   # Numba likes loops
        trace += np.tanh(a[i, i]) # Numba likes NumPy functions
    return a + trace              # Numba likes NumPy broadcasting
139/6: go_fase
139/7: go_fast
139/8: print(go_fast(x))
139/9:
def go_slow(a): # Function is compiled to machine code when called the first time
    trace = 0.0
    for i in range(a.shape[0]):   # Numba likes loops
        trace += np.tanh(a[i, i]) # Numba likes NumPy functions
    return a + trace              # Numba likes NumPy broadcasting
139/10: print(go_slow(x))
139/11: print(go_fast(x))
139/12: print(go_slow(x))
139/13: x = np.arange(10000).reshape(100, 100)
139/14: x
139/15: import timeit
139/16: import time
139/17:
def time_function(function , x):
    start = time.perf_counter_ns()
    function(x)
    end = time.perf_counter_ns()
    print(end - start)
139/18: time_function(go_fast , x)
139/19: time_function(go_slow , x)
139/20: go_fast(x)
139/21: go_slow(x)
139/22: x = np.arange(1000000).reshape(1000, 1000)
139/23: time_function(go_slow , x)
139/24: go_fast(x)
139/25: time_function(go_fast , x)
139/26: time_function(go_fast , x)
139/27: time_function(go_fast , x)
139/28: time_function(go_fast , x)
139/29: time_function(go_slow , x)
139/30: time_function(go_slow , x)
139/31: time_function(go_slow , x)
139/32: time_function(go_fast , x) / time_function(go_slow , x)
139/33:
def time_function(function , x):
    start = time.perf_counter_ns()
    function(x)
    end = time.perf_counter_ns()
    return end - start
139/34: time_function(go_fast , x) / time_function(go_slow , x)
139/35: time_function(go_fast , x) / time_function(go_slow , x)
139/36: time_function(go_fast , x) / time_function(go_slow , x)
139/37: time_function(go_fast , x) / time_function(go_slow , x)
139/38: time_function(go_fast , x) / time_function(go_slow , x)
139/39: time_function(go_fast , x) / time_function(go_slow , x)
139/40: time_function(go_fast , x) / time_function(go_slow , x)
139/41: time_function(go_fast , x) / time_function(go_slow , x)
139/42: time_function(go_fast , x) / time_function(go_slow , x)
139/43: time_function(go_fast , x) / time_function(go_slow , x)
139/44: time_function(go_fast , x) / time_function(go_slow , x)
139/45: time_function(go_fast , x) / time_function(go_slow , x)
139/46: time_function(go_fast , x) / time_function(go_slow , x)
139/47: time_function(go_fast , x) / time_function(go_slow , x)
139/48: time_function(go_fast , x) / time_function(go_slow , x)
139/49: time_function(go_fast , x) / time_function(go_slow , x)
139/50: time_function(go_fast , x) / time_function(go_slow , x)
139/51: time_function(go_fast , x) / time_function(go_slow , x)
139/52: time_function(go_fast , x) / time_function(go_slow , x)
139/53: time_function(go_fast , x) / time_function(go_slow , x)
139/54: time_function(go_fast , x) / time_function(go_slow , x)
139/55: time_function(go_fast , x) / time_function(go_slow , x)
139/56: time_function(go_fast , x) / time_function(go_slow , x)
139/57: time_function(go_fast , x) / time_function(go_slow , x)
139/58: time_function(go_fast , x) / time_function(go_slow , x)
139/59: time_function(go_fast , x) / time_function(go_slow , x)
139/60: time_function(go_fast , x) / time_function(go_slow , x)
140/1: import matplotlib as mpl
140/2: import numpy
141/1: import pygame
141/2: pygame.init()
142/1: ?isdigit
142/2: ?str.isdigit()
142/3: ?str.isdigit
143/1: "adasd(1 ,2 , 3 , hg)".split("(")[0]
144/1: "adasd".split("(")[0]
145/1: print([1 , 2 , 3 , 4, 5])
145/2: print({1 , 2 , 3 , 4, 5})
145/3: str([1 , 2 , 3 , 4, 5])
145/4: str({1 , 2 , 3 , 4, 5})
146/1: import pygame
146/2: pygame.init()
146/3: import pygame.locals
146/4: pygame.locals.RESIZABLE
146/5: ?pygame.locals.RESIZABLE
146/6: ? pygame.locals.RESIZABLE
146/7: ? pygame.locals
146/8: pygame.RESIZABLE
147/1: import nbs2d
147/2: nbs2d.environ
148/1: import environ
149/1: import environ
149/2: environ.initialize()
150/1: import environ
150/2: environ.Environ.initialize()
147/3: import pygame
147/4: ? pygame.display.flip
151/1: ls
151/2: import nbs2d
152/1: import nbs2d
152/2: nbs2d.Environ.initialize()
153/1:
class temp:
    a = []
153/2: temp.a
154/1: import nbs2d
154/2: nbs2d.Display.initialize()
154/3: nbs2d.Display._initialized
154/4: disp = nbs2d.Display(1 , "1" , 1)
155/1: import nbs2d
155/2: nbs2d.Display.initialize()
155/3: disp = nbs2d.Display(1 , "1" , 1)
155/4: import nbs2d
155/5: nbs2d.Display.initialize()
155/6: disp = nbs2d.Display(1 , "1" , 1)
156/1: %load_ext autoreload
156/2: %autoreload 2
156/3: import nbs2d
156/4: nbs2d.Display.initialize()
156/5: disp = nbs2d.Display(1 , "1" , 1)
156/6: 1+1
157/1: %load_ext autoreload
157/2: %autoreload 2
157/3: import nbs2d
157/4: nbs2d.Display.initialize()
157/5: nbs2d.Display.initialize()
157/6: disp = nbs2d.Display(1 , "1" , 1)
158/1: %load_ext autoreload
158/2: %autoreload 2
158/3: import nbs
158/4: import nbs2d
158/5: nbs2d.Display.initialize()
158/6: disp = nbs2d.Display(1 , "1" , 1)
158/7: disp.start()
159/1: %load_ext autoreload
159/2: %autoreload 2
159/3: import nbs2d
159/4: nbs2d.Display.initialize()
159/5: disp = nbs2d.Display(1 , "1" , 1)
159/6: disp.start()
160/1: %load_ext autoreload
160/2: %autoreload 2
160/3: import nbs2d
160/4: nbs2d.Display.initialize()
160/5: disp = nbs2d.Display(1 , "1" , 1)
160/6: disp.start()
161/1: %load_ext autoreload
161/2: %autoreload 2
161/3: import nbs2d
162/1: import nbs2d
163/1: import pygame
164/1: import pygame
165/1: import nbs2d
165/2: disp = nbs2d.Display(1 , "1" , 1)
165/3: disp.start()
166/1: disp.start()
166/2: import nbs2d
166/3: disp = nbs2d.Display(1 , "1" , 1)
166/4: disp.start()
167/1: import nbs2d
168/1: import nbs2d
168/2: disp = nbs2d.Display(1 , "1" , 1)
168/3: disp.start()
169/1: import nbs2d
169/2: disp = nbs2d.Display(1 , "1" , 1)
169/3: disp.start()
169/4: disp._data
169/5: disp.get_data()
170/1: import nbs2d
170/2: disp = nbs2d.Display(1 , "1" , 1)
170/3: disp.start()
170/4: disp.get_data()
171/1: import nbs2d
171/2: disp = nbs2d.Display(1 , "1" , 1)
171/3: disp.start()
171/4: disp.get_data()
171/5: disp.get_data()
171/6: disp.get_data()
171/7: disp.get_data()
172/1: import nbs2d
172/2: disp = nbs2d.Display(1 , "1" , 1)
172/3: disp.start()
173/1: import pygame
174/1: import pygame
175/1: import nbs2d
176/1: import nbs2d
176/2: disp = nbs2d.Display(1 , "1" , 1)
176/3: disp.start()
176/4: disp.get_data()
177/1: %load_ext autoreload
177/2: %autoreload 2
177/3: import nbs2d
177/4: disp = nbs2d.Display(1 , "1" , 1)
177/5: disp = nbs2d.Display()
177/6: disp.start()
177/7: disp.get_data()
177/8: disp.get_data()
177/9: type(1.0)
178/1: %load_ext autoreload
178/2: %autoreload 2
178/3: import nbs2d
179/1: 1 * 0.5
179/2: 1 / 2
180/1: import nbs2d
180/2: disp = nbs2d.Display(0.0 , 1.0 , 0.0)
180/3: disp.start()
180/4: disp.get_data()
180/5: disp.get_data()
181/1: import nbs2d
181/2: import nbs2d
181/3: import nbs2d
181/4: nbs2d.Environ.verbatim = True
181/5: disp = nbs2d.Display(0.0 , 1.0 , 0.0)
182/1: import nbs2d
182/2: import nbs2d
182/3: disp = nbs2d.Display(0.0 , 1.0 , 0.0)
183/1: import nbs2d
183/2: disp = nbs2d.Display(0.0 , 1.0 , 0.0)
184/1: import nbs2d
184/2: nbs2d.Environ.verbatim = True
184/3: disp = nbs2d.Display(0.0 , 1.0 , 0.0)
184/4: disp.get_data()
184/5: disp.get_data()
184/6: disp.start()
184/7: disp.get_data()
184/8: disp.get_data()
184/9: disp.get_data()
184/10: 0.75 / 2
184/11: 0.75 / 2
184/12: disp.get_data()
184/13: disp.get_data()
185/1: import nbs2d
185/2: nbs2d.Environ.verbatim = True
185/3: disp = nbs2d.Display(0.0 , 1.0 , 0.0)
185/4: disp.start()
185/5: disp.get_data()
185/6: disp.get_data()
185/7: disp.get_data()
185/8: disp.get_data()
186/1: import nbs2d
186/2: disp = nbs2d.Display(0.0 , 1.0 , 0.0)
186/3: disp.start()
186/4: disp.get_data()
186/5: disp.realToScreen((0.0125, 0.3625))
186/6: disp.get_data()
186/7: disp.realToScreen((0.990625, -0.36875))
188/1: import nbs2d
188/2: import nbs2d
188/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
188/4: disp.start()
188/5: disp.get_data()
189/1: import nbs2d
189/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
189/3: nbs2d.Environ.verbatim = True
189/4: disp.start()
190/1: import nbs2d
190/2: nbs2d.Environ.verbatim = True
190/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
190/4: disp.start()
191/1: import nbs2d
191/2: nbs2d.Environ.verbatim = True
191/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
191/4: disp.start()
191/5: import nbs2d
191/6: nbs2d.Environ.verbatim = True
191/7: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
192/1: import nbs2d
192/2: nbs2d.Environ.verbatim = True
192/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
192/4: disp.start()
192/5: disp.get_data()
193/1: import nbs2d
193/2: nbs2d.Environ.verbatim = True
193/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
193/4: disp.start()
194/1: import nbs2d
195/1: import nbs2d
195/2: nbs2d.Environ.verbatim = True
195/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
195/4: disp.start()
196/1: import nbs2d
196/2: nbs2d.Environ.verbatim = True
196/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
196/4: disp.start()
196/5: pygame.init()
196/6: disp.start()
197/1: import nbs2d
197/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
197/3: disp.start()
197/4: disp.get_data()
198/1: import nbs2d
198/2: nbs2d.Environ.verbatim = True
198/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
198/4: disp.start()
198/5: ls
198/6: disp.get_data()
199/1: import nbs2d
199/2: nbs2d.Environ.verbatim = True
199/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
199/4: disp.start()
200/1: import nbs2d
200/2: nbs2d.Environ.verbatim = True
200/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
200/4: disp.start()
201/1: import nbs2d
201/2: nbs2d.Environ.verbatim = True
201/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
201/4: disp.start()
201/5: surf
202/1: import nbs2d
202/2: nbs2d.Environ.verbatim = True
202/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
202/4: disp.start()
203/1: import nbs2d
203/2: nbs2d.Environ.verbatim = True
203/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
203/4: disp.start()
204/1: import nbs2d
204/2: nbs2d.Environ.verbatim = True
204/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
204/4: disp.start()
205/1: import nbs2d
205/2: nbs2d.Environ.verbatim = True
205/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
205/4: disp.start()
206/1: import nbs2d
206/2: nbs2d.Environ.verbatim = True
206/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
206/4: disp.start()
206/5: disp.start()
207/1: import nbs2d
208/1: import nbs2d
208/2: nbs2d.Environ.verbatim = True
208/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
208/4: disp.start()
208/5: disp.get_data()
209/1: import nbs2d
209/2: nbs2d.Environ.verbatim = True
209/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
209/4: disp.start()
209/5: disp.get_data()
209/6: disp
210/1: import nbs2d
210/2: nbs2d.Environ.verbatim = True
210/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
210/4: disp.start()
210/5: disp.get_data()
210/6: disp
211/1: import nbs2d
211/2: nbs2d.Environ.verbatim = True
211/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
211/4: disp.start()
212/1: import nbs2d
212/2: nbs2d.Environ.verbatim = True
212/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
212/4: disp.start()
213/1: import nbs2d
213/2: nbs2d.Environ.verbatim = True
213/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
214/1: import nbs2d
214/2: nbs2d.Environ.verbatim = True
214/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
214/4: disp.start()
215/1: import nbs2d
215/2: nbs2d.Environ.verbatim = True
215/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
215/4: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
215/5: disp.start()
216/1: import nbs2d
216/2: nbs2d.Environ.verbatim = True
216/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
216/4: disp.start()
217/1: import nbs2d
217/2: nbs2d.Environ.verbatim = True
217/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
217/4: disp.start()
218/1: import nbs2d
218/2: nbs2d.Environ.verbatim = True
218/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
218/4: disp.start()
219/1: import pygame
219/2: pygame.init()
219/3: screen = pygame.display.set_mode((640 , 480) , pygame.RESIZABLE)
219/4: screen
219/5: screen.fill((100 , 100 , 100))
219/6: screen.update()
219/7: pygame.display.update()
219/8: pygame.display.flip()
219/9: screen = pygame.display.set_mode((640 , 480) , pygame.RESIZABLE)
219/10: pygame.display.flip()
219/11: screen.fill((100 , 100 , 100))
219/12: pygame.display.flip()
220/1: import pygame
220/2: screen = pygame.display.set_mode((640 , 480) , pygame.RESIZABLE)
220/3: pygame.display.flip()
220/4: screen = pygame.display.set_mode((640 , 480) , pygame.RESIZABLE)
220/5: screen.fill((100 , 100 , 100))
220/6: pygame.display.flip()
220/7: screen.fill((50 , 50 , 50))
220/8: pygame.display.flip()
221/1: import nbs2d
221/2: nbs2d.Environ.verbatim = True
221/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
221/4: import pygame
222/1: import pygame
222/2: screen = pygame.display.set_mode((640 , 480) , pygame.RESIZABLE)
222/3: screen.fill((100 , 100 , 100))
222/4: pygame.display.flip()
222/5: screen.fill((50 , 50 , 50))
222/6: screen
222/7: pygame.display.flip()
222/8: pygame.display.update()
223/1: import pygame
223/2: screen = pygame.display.set_mode((640 , 480) , pygame.RESIZABLE)
223/3: screen.fill((50 , 50 , 50))
223/4: pygame.display.flip()
223/5: pygame.display.update()
223/6: pygame.display.flip()
224/1:
import pygame

pygame.init()
screen = pygame.display.set_mode((400, 300))
225/1:
import pygame

pygame.init()
screen = pygame.display.set_mode((400, 300) , pygame.RESIZABLE)
225/2: screen.fill((50 , 50 , 50))
225/3: pygame.display.update()
225/4: pygame.display.flip()
226/1: import pygame
226/2: screen = pygame.display.set_mode((640 , 480) , pygame.RESIZABLE)
226/3: screen.fill((255 , 255 , 255))
226/4: pygame.display.flip()
227/1: import pygame
227/2: screen = pygame.display.set_mode((1200, 800))
227/3: pygame.display.set_caption("Learning Pygame")
227/4: pygame.display.flip()
227/5: screen.fill((50 , 50 , 50))
227/6: pygame.display.flip()
228/1: screen = pygame.display.set_mode((1200, 800))
228/2: import pygame
228/3: screen = pygame.display.set_mode((1200, 800))
228/4: screen.fill((50 , 50 , 50))
228/5: pygame.display.flip()
228/6: pygame.display.flip()
228/7: pygame.display.flip()
229/1: import nbs2d
229/2: nbs2d.Environ.verbatim = True
229/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
230/1: ipython
231/1: import pygame
231/2: pygame.init()
231/3: _screen = pygame.display.set_mode((640 , 480) , pygame.RESIZABLE)
231/4: _bg_color = (50 , 50 , 50)
231/5: _screen.fill(_bg_color)
231/6: pygame.display.flip()
232/1: import pygame
232/2: pygame.init()
232/3: _screen = pygame.display.set_mode((640 , 480))
232/4: _bg_color = (50 , 50 , 50)
232/5: _screen.fill(_bg_color)
232/6: pygame.display.flip()
233/1: import pygame
233/2: pygame.init()
233/3: _screen = pygame.display.set_mode((640 , 480) , pygame.RESIZABLE)
233/4: _bg_color = (50 , 50 , 50)
233/5: _screen.fill(_bg_color)
233/6: pygame.display.flip()
233/7: pygame.display.flip()
234/1: import pygame
234/2: pygame.init()
234/3: _screen = pygame.display.set_mode((640 , 480))
234/4: _bg_color = (50 , 50 , 50)
234/5: _screen.fill(_bg_color)
234/6: pygame.display.flip()
235/1: import pygame
235/2: pygame.init()
235/3: _screen = pygame.display.set_mode((640 , 480) , pygame.RESIZABLE)
235/4: _bg_color = (50 , 50 , 50)
235/5: _screen.fill(_bg_color)
235/6: pygame.display.flip()
235/7: _screen = pygame.display.set_mode((640 , 480) , pygame.RESIZABLE)
235/8: _screen.fill(_bg_color)
235/9: pygame.display.flip()
236/1: import pygame
236/2: _screen = pygame.display.set_mode((640 , 480))
236/3: _screen_1 = pygame.display.set_mode((640 , 480))
236/4: screen
236/5: _screen
236/6: _screen_1
236/7: _screen == _screen_1
237/1: import nbs2d
237/2: nbs2d.Environ.verbatim = True
237/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
238/1: import nbs2d
238/2: nbs2d.Environ.verbatim = True
238/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
238/4: disp.start()
239/1: import nbs2d
239/2: nbs2d.Environ.verbatim = True
239/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
239/4: disp.start()
240/1: import nbs2d
240/2: nbs2d.Environ.verbatim = True
240/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
240/4: disp.start()
241/1: import nbs2d
241/2: nbs2d.Environ.verbatim = True
241/3: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
241/4: disp.start()
242/1: import nbs2d
242/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
242/3: disp.start()
242/4: disp
243/1: import nbs2d
243/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
243/3: disp.start()
244/1: import nbs2d
244/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
244/3: disp.start()
245/1: import nbs2d
245/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
245/3: disp.start()
246/1: import nbs2d
246/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
246/3: disp.start()
247/1: import nbs2d
247/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
247/3: disp.start()
247/4: disp.start()
247/5: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
247/6: disp.start()
248/1: import nbs2d
248/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
248/3: disp.start()
248/4: disp
248/5: disp.get_data()
248/6: disp.get_data()
249/1: import nbs2d
249/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
249/3: disp.start()
249/4: disp.get_data()
249/5: import math
249/6: ?math.pow
250/1: import nbs2d
250/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
250/3: disp.start()
250/4: disp.circle_mode()
251/1: import nbs2d
251/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
251/3: disp.start()
251/4: disp.circle_mode()
252/1: import nbs2d
252/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
252/3: disp.start()
252/4: disp.circle_mode()
253/1: import nbs2d
253/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
253/3: disp.start()
253/4: disp.circle_mode()
254/1: import nbs2d
254/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
254/3: disp.start()
254/4: disp.circle_mode()
254/5: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
254/6: disp.start()
255/1: import nbs2d
255/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
255/3: disp.circle_mode()
256/1: import nbs2d
256/2: disp = nbs2d.Part(0.0 , 1.0 , 0.0)
256/3: disp.circle_mode()
257/1: import matplotlib
257/2: import numpy as np
257/3: np.random.normal(0.0 , 1.0 , 100)
257/4: import matplotlib.pyplot as plt
257/5: rnd = np.random.normal(0.0 , 1.0 , 100)
257/6: ?plt.hist
257/7: ?plt.hist
257/8: n , bins , patches = plt.hist(rnd , 30)
257/9: n
257/10: bins
257/11: patches
257/12: plt.xlabel("x")
257/13: plt.ylabel("y")
257/14: plt.ylabel("pr")
257/15: ?plt.axes
257/16: plt.show()
257/17: rnd = np.random.normal(0.0 , 1.0 , 10000)
257/18: n , bins , patches = plt.hist(rnd , 30)
257/19: plt.show()
258/1: import matplotlib.pyplot as plt
258/2: fig = plt.figure()
258/3: ?fig.gca
258/4: ax = fig.gca(projection = '3d')
259/1: s = "@#"
259/2: len(s)
259/3: "#@this iad"[0:len(s)]
259/4: "#@this iad"[0:len(s)] == s
259/5: g = "#@this iad"[0:len(s)]
259/6: s
259/7: g
259/8: "#@this iad"[0:len(s)] == s
259/9: s = "#@"
259/10: "#@this iad"[0:len(s)] == s
260/1: import os
260/2: os.path.basename("/home/kacper/somefile.py")
260/3: os.path.basename("/home/kacper/somefile")
261/1: print('\n')
261/2: :q
262/1: import os
262/2: os.path.splittext("/home/kacper/somefile.txt")
262/3: os.path.splitext("/home/kacper/somefile.txt")
263/1: import re
263/2: ?re.match
263/3: re.match(r'[a-z]*' , "this")
263/4: re.match(r'[a-z]*' , "This")
263/5: re.match(r'[^\s]+' , "This")
263/6: re.match(r'[^\s]+' , "this")
263/7: re.match(r'[^\s]+' , "this sdfs")
263/8: re.match(r'[a-z]+' , "this sdfs")
263/9: re.compile("[a-z]+")
263/10: re = re.compile("[a-z]+")
263/11: re.match
264/1: import re
264/2: rec = re.compile("[a-z]+")
264/3: rec.match("sdaklsdmalkdm")
264/4: rec.match("sdaklsdmalkdm1231 asd")
264/5:
if(rec.match(sdfsdf)):
    print("OK")
264/6:
if(rec.match("sdfsdf")):
    print("OK")
264/7:
if(rec.match("sdfsdf")):
    print("OK")
264/8:
if(rec.match("sdfsdf")):
    print("OK")
264/9:
if(rec.match("sdf1231231sdf")):
    print("OK")
264/10:
if re.match(r"hello[0-9]+", 'hello1'):
    print('Yes')
264/11:
if re.match(r"hello[0-9]+", 'helloasda'):
    print('Yes')
264/12:
if re.match(r"[a-z]+", 'helloasda'):
    print('Yes')
264/13:
if re.match(r"[a-z]+", 'he1231231'):
    print('Yes')
264/14:
if re.match(r"^[a-z]+$", 'he1231231'):
    print('Yes')
264/15:
if re.match(r"^[a-z]+$", 'hesdasklkdam'):
    print('Yes')
264/16:
if re.match(r"^[a-z]+$", 'hesdasklkADKKAD'):
    print('Yes')
265/1: import os
265/2: os.cwd()
265/3: os.curdir()
265/4: os.curdir
265/5: os.pwd
265/6: os.getcwd()
266/1: import numpy
266/2: ?numpy
267/1:
def plusFun(funs):
    def newfun(keys):
        score = 0
        for f in funs:
            score = score + f(keys)
        return score
    return newfun
267/2:
def timesFun(funs):
    def newfun(keys):
        score = 1
        for f in funs:
            score = score * f(keys)
        return score
    return newfun
267/3:
def isIn(key):
    def newfun(keys):
        score = 0
        for k in keys:
            if(k == key):
                score = score + 1
        return score
    return newfun
267/4:
def parseRPN(expr):
    words = expr.split()
    ok = True
    for w in words:
        ok = ok and (re.match(r"^[a-z]+$" , w) or re.match(r"^[*+]$" , w))
    if(not ok):
        raise ValueError("RPN expression has wrong format.")
    fun_stack = []
    for w in words:
        if(w == "+"):
            nf = plusFun(fun_stack)
            fun_stack = [nf]
        elif(w == "|"):
            nf = timesFun(fun_stack)
            fun_stack = [nf]
        else:
            fun_stack.append(isIn(w))
    if(len(fun_stack) != 1):
        raise ValueError("RPN expression schould leave stack with one element.")
    return fun_stack[0]
267/5: keywords = ["one" , "two" , "three"]
267/6: fun = parseRPN("one")
267/7: import re
267/8: fun = parseRPN("one")
267/9: fun
267/10: fun(keywords)
267/11:
def parseRPN(expr):
    words = expr.split()
    ok = True
    for w in words:
        ok = ok and (re.match(r"^[a-z]+$" , w) or re.match(r"^[*+]$" , w))
    if(not ok):
        raise ValueError("RPN expression has wrong format.")
    fun_stack = []
    for w in words:
        print(w)
        if(w == "+"):
            nf = plusFun(fun_stack)
            fun_stack = [nf]
        elif(w == "|"):
            nf = timesFun(fun_stack)
            fun_stack = [nf]
        else:
            fun_stack.append(isIn(w))
    if(len(fun_stack) != 1):
        raise ValueError("RPN expression schould leave stack with one element.")
    return fun_stack[0]
267/12: fun(keywords)
267/13: fun = parseRPN("+ four one")
267/14: fun = parseRPN("four one + ")
267/15: fun
267/16: fun(["five"])
267/17: fun(["five" , "four"])
267/18: fun(["five" , "four" , "one"])
267/19: fun = parseRPN("four one + none *")
267/20:
def parseRPN(expr):
    words = expr.split()
    ok = True
    for w in words:
        ok = ok and (re.match(r"^[a-z]+$" , w) or re.match(r"^[*+]$" , w))
    if(not ok):
        raise ValueError("RPN expression has wrong format.")
    fun_stack = []
    for w in words:
        if(w == "+"):
            nf = plusFun(fun_stack)
            fun_stack = [nf]
        elif(w == "*"):
            nf = timesFun(fun_stack)
            fun_stack = [nf]
        else:
            fun_stack.append(isIn(w))
    if(len(fun_stack) != 1):
        raise ValueError("RPN expression schould leave stack with one element.")
    return fun_stack[0]
267/21: fun = parseRPN("four one + none *")
267/22: fun(["five" , "four"])
267/23: fun(["five" , "four" , "none"])
267/24: fun(["five" , "four" , "none" , "one"])
268/1: import os
268/2: os.getcwd()
269/1: import graphics
270/1: import wx
271/1: import os
272/1: import graphics
272/2: os.getcwd()
272/3: import os
272/4: os.getcwd()
272/5: os.getcwd()
273/1: input()
273/2: import sys
273/3:
def get_choice(lst):
    for el in lst:
        sys.stdout.write(str(el))
273/4: get_choice([1 , 2 , 3])
273/5:
def get_choice(lst):
    for el in lst:
        sys.stdout.write(str(el) + "\n")
273/6: get_choice([1 , 2 , 3])
273/7:
def get_choice(lst , toStr):
    for el in lst:
        sys.stdout.write(toStr(el) + "\n")
273/8:
def get_choice(lst , toStr):
    for el in lst:
        sys.stdout.write(toStr(el) + "\n")
273/9: get_choice([1 , 2 , 3] , lambda x : str(x))
273/10:
def get_choice(lst , toStr):
    ch = 0
    n = 0
    for el in lst:
        if(n == ch):
            sys.stdout.write("> ")
        else:
            sys.stdout.write("  ")
        sys.stdout.write(toStr(el) + "\n")
273/11: get_choice([1 , 2 , 3] , lambda x : str(x))
273/12:
def get_choice(lst , toStr):
    ch = 0
    n = 0
    for el in lst:
        if(n == ch):
            sys.stdout.write("> ")
        else:
            sys.stdout.write("  ")
        sys.stdout.write(toStr(el) + "\n")
        n += 1
273/13: get_choice([1 , 2 , 3] , lambda x : str(x))
273/14:
def get_choice(lst , toStr):
    fin = False
    ch = 0
    while(not fin):
        n = 0
        for el in lst:
            if(n == ch):
                sys.stdout.write("> ")
            else:
                sys.stdout.write("  ")
            sys.stdout.write(toStr(el) + "\n")
            n += 1
        char = sys.stdin.read(1)
        if(char == "w"):
            ch -= 1
        elif(char == "s"):
            ch += 1
        elif(char == "d"):
            fin = True 
        ch = ch % len(lst)
        for n in range(len(lst)):
            sys.stdout.write("\r")
    return lst(ch)
273/15: get_choice([1 , 2 , 3] , lambda x : str(x))
273/16: get_choice([1 , 2 , 3] , lambda x : str(x))
273/17:
def get_choice(lst , toStr):
    fin = False
    ch = 0
    while(not fin):
        n = 0
        for el in lst:
            if(n == ch):
                sys.stdout.write("> ")
            else:
                sys.stdout.write("  ")
            sys.stdout.write(toStr(el) + "\n")
            n += 1
        char = sys.stdin.read(1)
        if(char == "w"):
            ch -= 1
        elif(char == "s"):
            ch += 1
        elif(char == "d"):
            fin = True 
        ch = ch % len(lst)
        for n in range(len(lst)):
            sys.stdout.write("\r")
    return lst[ch]
273/18: get_choice([1 , 2 , 3] , lambda x : str(x))
273/19:
def get_choice(lst , toStr):
    fin = False
    ch = 0
    while(not fin):
        n = 0
        for el in lst:
            if(n == ch):
                sys.stdout.write("> ")
            else:
                sys.stdout.write("  ")
            sys.stdout.write(toStr(el) + "\n")
            n += 1
        tty.setraw(sys.stdin.fileno())
        char = sys.stdin.read(1)
        if(char == "w"):
            ch -= 1
        elif(char == "s"):
            ch += 1
        elif(char == "d"):
            fin = True 
        ch = ch % len(lst)
        for n in range(len(lst)):
            sys.stdout.write("\r")
    return lst[ch]
273/20: get_choice([1 , 2 , 3] , lambda x : str(x))
273/21: import tty
273/22: get_choice([1 , 2 , 3] , lambda x : str(x))
273/23:
def get_choice(lst , toStr):
    fin = False
    ch = 0
    while(not fin):
        n = 0
        for el in lst:
            if(n == ch):
                sys.stdout.write("> ")
            else:
                sys.stdout.write("  ")
            sys.stdout.write(toStr(el) + "\n")
            n += 1
        tty.setraw(sys.stdin.fileno())
        char = sys.stdin.read(1)
        if(char == "w"):
            ch -= 1
        elif(char == "s"):
            ch += 1
        elif(char == "d"):
            fin = True 
        ch = ch % len(lst)
        #for n in range(len(lst)):
        #    sys.stdout.write("\r")
    return lst[ch]
273/24: get_choice([1 , 2 , 3] , lambda x : str(x))
273/25: import readchar
273/26:
def get_choice(lst , toStr):
    fin = False
    ch = 0
    while(not fin):
        n = 0
        for el in lst:
            if(n == ch):
                sys.stdout.write("> ")
            else:
                sys.stdout.write("  ")
            sys.stdout.write(toStr(el) + "\n")
            n += 1
        tty.setraw(sys.stdin.fileno())
        char = sys.stdin.read(1)
        if(char == "w"):
            ch -= 1
        elif(char == "s"):
            ch += 1
        elif(char == "d"):
            fin = True 
        ch = ch % len(lst)
        #for n in range(len(lst)):
        #    sys.stdout.write("\r")
    return lst[ch]
273/27: import tty , terminos
273/28: import termios
273/29:
def get_choice(lst , toStr):
    fin = False
    ch = 0
    while(not fin):
        n = 0
        for el in lst:
            if(n == ch):
                sys.stdout.write("> ")
            else:
                sys.stdout.write("  ")
            sys.stdout.write(toStr(el) + "\n")
            n += 1
        fd = sys.stdin.fileno()
        old = termios.tcgetattr(fd)
        tty.setraw(fd)
        char = sys.stdin.read(1)
        termios.tcsetattr(fd , termios.TCSADRAIN , old)
        if(char == "w"):
            ch -= 1
        elif(char == "s"):
            ch += 1
        elif(char == "d"):
            fin = True 
        ch = ch % len(lst)
        #for n in range(len(lst)):
        #    sys.stdout.write("\r")
    return lst[ch]
273/30: get_choice([1 , 2 , 3] , lambda x : str(x))
275/1: import tty , terminos
275/2: import tty , termios
275/3: import tty , termios , sys
275/4:
def get_choice(lst , toStr):
    fin = False
    ch = 0
    while(not fin):
        n = 0
        for el in lst:
            if(n == ch):
                sys.stdout.write("> ")
            else:
                sys.stdout.write("  ")
            sys.stdout.write(toStr(el) + "\n")
            n += 1
        fd = sys.stdin.fileno()
        old = termios.tcgetattr(fd)
        tty.setraw(fd)
        char = sys.stdin.read(1)
        termios.tcsetattr(fd , termios.TCSADRAIN , old)
        if(char == "w"):
            ch -= 1
        elif(char == "s"):
            ch += 1
        elif(char == "d"):
            fin = True 
        ch = ch % len(lst)
        #for n in range(len(lst)):
        #    sys.stdout.write("\r")
    return lst[ch]
275/5: get_choice([1 , 2 , 3] , lambda x : str(x))
275/6: ls
275/7:
def get_choice(lst , toStr):
    fin = False
    ch = 0
    while(not fin):
        n = 0
        for el in lst:
            if(n == ch):
                sys.stdout.write("> ")
            else:
                sys.stdout.write("  ")
            sys.stdout.write(toStr(el) + "\n")
            n += 1
        fd = sys.stdin.fileno()
        old = termios.tcgetattr(fd)
        tty.setraw(fd)
        char = sys.stdin.read(1)
        termios.tcsetattr(fd , termios.TCSADRAIN , old)
        if(char == "w"):
            ch -= 1
        elif(char == "s"):
            ch += 1
        elif(char == "d"):
            fin = True 
        ch = ch % len(lst)
        for n in range(len(lst)):
            sys.stdout.write("\033[2K")
    return lst[ch]
275/8: get_choice([1 , 2 , 3] , lambda x : str(x))
275/9:
def get_choice(lst , toStr):
    fin = False
    ch = 0
    while(not fin):
        n = 0
        for el in lst:
            if(n == ch):
                sys.stdout.write("> ")
            else:
                sys.stdout.write("  ")
            sys.stdout.write(toStr(el) + "\n")
            n += 1
        fd = sys.stdin.fileno()
        old = termios.tcgetattr(fd)
        tty.setraw(fd)
        char = sys.stdin.read(1)
        termios.tcsetattr(fd , termios.TCSADRAIN , old)
        if(char == "w"):
            ch -= 1
        elif(char == "s"):
            ch += 1
        elif(char == "d"):
            fin = True 
        ch = ch % len(lst)
        for n in range(len(lst)):
            sys.stdout.write("\r")
    return lst[ch]
275/10: get_choice([1 , 2 , 3] , lambda x : str(x))
275/11:
def get_choice(lst , toStr):
    CURSOR_UP_ONE = '\x1b[1A' 
    ERASE_LINE = '\x1b[2K' 
    fin = False
    ch = 0
    while(not fin):
        n = 0
        for el in lst:
            if(n == ch):
                sys.stdout.write("> ")
            else:
                sys.stdout.write("  ")
            sys.stdout.write(toStr(el) + "\n")
            n += 1
        fd = sys.stdin.fileno()
        old = termios.tcgetattr(fd)
        tty.setraw(fd)
        char = sys.stdin.read(1)
        termios.tcsetattr(fd , termios.TCSADRAIN , old)
        if(char == "w"):
            ch -= 1
        elif(char == "s"):
            ch += 1
        elif(char == "d"):
            fin = True 
        ch = ch % len(lst)
        for n in range(len(lst)):
            sys.stdout.write(ERASE_LINE)
            sys.stdout.write(CURSOR_UP_LINE)
    return lst[ch]
275/12: get_choice([1 , 2 , 3] , lambda x : str(x))
275/13:
def get_choice(lst , toStr):
    CURSOR_UP_ONE = '\x1b[1A' 
    ERASE_LINE = '\x1b[2K' 
    fin = False
    ch = 0
    while(not fin):
        n = 0
        for el in lst:
            if(n == ch):
                sys.stdout.write("> ")
            else:
                sys.stdout.write("  ")
            sys.stdout.write(toStr(el) + "\n")
            n += 1
        fd = sys.stdin.fileno()
        old = termios.tcgetattr(fd)
        tty.setraw(fd)
        char = sys.stdin.read(1)
        termios.tcsetattr(fd , termios.TCSADRAIN , old)
        if(char == "w"):
            ch -= 1
        elif(char == "s"):
            ch += 1
        elif(char == "d"):
            fin = True 
        ch = ch % len(lst)
        for n in range(len(lst)):
            sys.stdout.write(ERASE_LINE)
            sys.stdout.write(CURSOR_UP_ONE)
    return lst[ch]
275/14:
def get_choice(lst , toStr):
    CURSOR_UP_ONE = '\x1b[1A' 
    ERASE_LINE = '\x1b[2K' 
    fin = False
    ch = 0
    while(not fin):
        n = 0
        for el in lst:
            if(n == ch):
                sys.stdout.write("> ")
            else:
                sys.stdout.write("  ")
            sys.stdout.write(toStr(el) + "\n")
            n += 1
        fd = sys.stdin.fileno()
        old = termios.tcgetattr(fd)
        tty.setraw(fd)
        char = sys.stdin.read(1)
        termios.tcsetattr(fd , termios.TCSADRAIN , old)
        if(char == "w"):
            ch -= 1
        elif(char == "s"):
            ch += 1
        elif(char == "d"):
            fin = True 
        ch = ch % len(lst)
        for n in range(len(lst)):
            sys.stdout.write(ERASE_LINE)
            sys.stdout.write(CURSOR_UP_LINE)
    return lst[ch]
275/15:
def get_choice(lst , toStr):
    CURSOR_UP_ONE = '\x1b[1A' 
    ERASE_LINE = '\x1b[2K' 
    fin = False
    ch = 0
    while(not fin):
        n = 0
        for el in lst:
            if(n == ch):
                sys.stdout.write("> ")
            else:
                sys.stdout.write("  ")
            sys.stdout.write(toStr(el) + "\n")
            n += 1
        fd = sys.stdin.fileno()
        old = termios.tcgetattr(fd)
        tty.setraw(fd)
        char = sys.stdin.read(1)
        termios.tcsetattr(fd , termios.TCSADRAIN , old)
        if(char == "w"):
            ch -= 1
        elif(char == "s"):
            ch += 1
        elif(char == "d"):
            fin = True 
        ch = ch % len(lst)
        for n in range(len(lst)):
            sys.stdout.write(ERASE_LINE)
            sys.stdout.write(CURSOR_UP_ONE)
    return lst[ch]
275/16: get_choice([1 , 2 , 3] , lambda x : str(x))
275/17: get_choice([1 , 2 , 3] , lambda x : str(x))
275/18:
def get_choice(lst , toStr):
    CURSOR_UP_ONE = '\x1b[1A' 
    ERASE_LINE = '\x1b[2K' 
    fin = False
    ch = 0
    while(not fin):
        n = 0
        for el in lst:
            if(n == ch):
                sys.stdout.write("> ")
            else:
                sys.stdout.write("  ")
            sys.stdout.write(toStr(el) + "\n")
            n += 1
        fd = sys.stdin.fileno()
        old = termios.tcgetattr(fd)
        tty.setraw(fd)
        char = sys.stdin.read(1)
        termios.tcsetattr(fd , termios.TCSADRAIN , old)
        if(char == "w"):
            ch -= 1
        elif(char == "s"):
            ch += 1
        elif(char == "d"):
            fin = True 
        ch = ch % len(lst)
        for n in range(len(lst)):
            sys.stdout.writie(ERASE_LINE)
            sys.stdout.write(CURSOR_UP_ONE)
    return lst[ch]
275/19: %save?
275/20: %edit get_choice
275/21: %edit get_choice
275/22: %edit get_choice
276/1: import configparser
276/2: config = configparser.ConfigParser()
276/3: config.read("keyDir.config")
276/4: config.items("PATHS")
277/1: import feedparser
278/1:
import urllib.request
with urllib.request.urlopen('http://python.org/') as response:
   html = response.read()
278/2: html
278/3:
import urllib.request
with urllib.request.urlopen('https://lukesmith.xyz/rss.xml') as response:
   html = response.read()
278/4:
import urllib.request
with urllib.request.urlopen('https://lukesmith.xyz/rss.xml') as response:
   rss = response.read()
278/5: rss
278/6: import xml.etree.ElementTree as ET
278/7: tree = ET.parse('https://lukesmith.xyz/rss.xml')
278/8: ?ET.parse
278/9:
with open("/home/kacper/Downloads/temp.rss" , "w") as f:
    f.write(rss)
278/10:
with open("/home/kacper/Downloads/temp.rss" , "w") as f:
    f.write(rss.decode('utf-8'))
278/11: tree = ET.parse("/home/kacper/Downloads/temp.rss")
278/12: root = tree.getroot()
278/13: rooy
278/14: root
278/15: root.tag
278/16: root.attrib
278/17:
for child in root:
    print(child.tag , child.attrib)
278/18: root[0].child.tag
278/19: root[0].tag
278/20:
for child in root[0]:
    print(child.tag , child.attrib)
278/21:
for el in root.iter('item'):
    print(el.tag)
278/22:
for el in root.iter('item'):
    for c in el:
        print(c.tag)
278/23:
for el in root.iter('item'):
    for c in el:
        print(c.tag , c.atrrib)
278/24:
for el in root.iter('item'):
    for c in el:
        print(c.tag , c.attrib)
278/25:
for el in root.iter('item'):
    for c in el:
        print(c.tag , c.attrib , c.text)
279/1: import html2text
280/1: import subprocess
280/2: subprocess.check_output(['ls'])
280/3: subprocess.check_output(['xdotool' , 'selectwindow' , 'getwindowgeometry'])
280/4: subprocess.check_output(['xdotool' , 'selectwindow' , 'getwindowgeometry']).decode('utf-8')
280/5: window = subprocess.check_output(['xdotool' , 'selectwindow' , 'getwindowgeometry']).decode('utf-8')
280/6: window
280/7: print(window)
278/26: xit
281/1: import configparser
281/2: config = configparser.ConfigParser()
281/3: config.read("./keyDir.config")
281/4:
for section in config:
    print(section)
282/1: import configparser
282/2: config = configparser.ConfigParser()
282/3: config.read("./keyDir.config")
282/4: "KEYFILES" in config
282/5: q
282/6: exot
283/1: import subprocess
283/2: window_geometry = subprocess.check_output(['xdotool' , 'selectwindow' , 'getwindowgeometry']).decode('utf-8')
283/3: print(window_geometry)
283/4: window_geometry = subprocess.check_output(['xdotool' , 'selectwindow' , 'getwindowgeometry']).decode('utf-8')
283/5: print(window_geometry)
283/6: ?map
285/1: range(10)
285/2: range(0 , 10)
285/3: type(range(0 , 10))
287/1: "#@ 111"[0:4]
287/2: "#@ 111"[0:3]
287/3: "#@ 111"[3]
287/4: "#@ 111"[2]
287/5: "#@ 111"[3:]
287/6: "#@\n"[3:]
287/7: "#@ 1111\n"[3:]
287/8: "#@ 1111\n"[3:-1]
287/9: "#@\n"[3:-1]
288/1: "#@ 1111\n"[3:-1]
288/2: "#@\n"[3:-1]
288/3: "#@"[3:-1]
288/4: "#@\n".strip()[3:-1]
288/5: "#@ 123\n".strip()[3:-1]
288/6: "#@ 123\n".strip()[3:]
288/7: "#@     123\n".strip()[3:]
288/8: :q
289/1: len("#@ 123\n")
289/2: len("#@ ")
289/3: "#@ "[3:]
289/4: q
290/1: def fun()
290/2:
def fun():
    123
290/3: fun()
291/1: a = [0 , 1 , 2 , 3 ,4]
291/2: a[-2:]
291/3: a[:-2]
291/4: a = []
291/5: a[:-2]
291/6: a[-2:]
292/1: from datetime import date
292/2: date.today()
292/3: from datetime import datetime
292/4: datetime.now()
292/5: str(datetime.now())
293/1: import datetime
293/2: datetime.datetime.strptime("2020-08-20T19:00:02+00:00")
293/3: datetime.datetime.strptime("2020-08-20T19:00:02+00:00" , "%y-%m-%d")
293/4: datetime.datetime.strptime("2020-08-20T19:00:02+00:00" , "%y-%m-%d.*")
294/1: import os
294/2: os.getcwd()
295/1: import flask
296/1: ls
296/2: import datetime
296/3:
with open("./temp_time" , "r") as f:
    for line in f.readlines()
296/4:
with open("./temp_time" , "r") as f:
    for line in f.readlines():
        print(line)
296/5:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        print(line)
296/6:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        print(line.strip())
296/7: import re
296/8: re.compile(r'^..., \d\d ... \d\d\d\d')
296/9: rss = re.compile(r'^..., \d\d ... \d\d\d\d')
296/10:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        print(line.strip())
        if(re.match(line.strip())):
            print("Match!")
296/11:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        print(line.strip())
        if(rss.match(line.strip())):
            print("Match!")
296/12: rss = re.compile(r'^..., \d\d ... \d\d\d$')
296/13:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        print(line.strip())
        if(rss.match(line.strip())):
            print("Match!")
296/14: rss = re.compile(r'^..., \d\d ... \d\d\d')
296/15:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        print(line.strip())
        if(rss.match(line.strip())):
            print("Match!")
296/16: feed = re.compile(r'^\d\d\d-\d\d-\d\d')
296/17:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        print(line.strip())
        if(rss.match(line.strip())):
            print("RSS")
        elif(feed.match(line.strip())):
            print("FEED")
296/18: import datetime
296/19:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        print(line.strip())
        print(datetime.datetime.strptime(line.strip() , '%a, %d %b %Y %X %Z'))
296/20:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        try:
            print(datetime.datetime.strptime(line.strip() , '%a, %d %b %Y %X %Z'))
        except ValueError as e:
            print(e)
296/21: dte = 'Fri, 27 Mar 2020 13:21:15 -0400'
296/22: datetime.datetime.strptime(dte , '%a, %-d %b %Y %X %z' )
296/23: datetime.datetime.strptime(dte , '%a, %d %b %Y %X %z' )
296/24:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        try:
            print(datetime.datetime.strptime(line.strip() , '%a, %d %b %Y %X %z'))
        except ValueError as e:
            pass
297/1: import datetime
297/2:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        try:
            print(datetime.datetime.strptime(line.strip() , '%a, %d %b %Y %X %z'))
        except ValueError as e:
            pass
297/3:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        try:
            dte = datetime.datetime.strptime(line.strip() , '%a, %d %b %Y %X %z')
        except ValueError as e:
            pass
297/4:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        try:
            dte = datetime.datetime.strptime(line.strip() , '%a, %d %b %Y %X %z')
        except:
            dte = datetime.datetime.strptime(line.strip() , '%a, %d %b %Y %X %z')
        except:
            dte = datetime.datetime.strptime(line.strip() , '%a, %d %b %Y %X %z')
        except ValueError as e:
            print(e)
297/5:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if("T" in line):
            print(line.strip().split('T')[0].split('-'))
297/6:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if("T" in line):
            print(line.strip().split('T'))
297/7:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if("-" in line):
            print(line.strip().split('T'))
297/8:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            print(line.strip().split('T'))
297/9:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            print(line.strip().split('T')[0])
297/10:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            print(line.strip().split('T')[0].split("-"))
297/11:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            print(list(map(lambda x : int(x) , line.strip().split('T')[0].split("-"))))
297/12:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            print(list(map(lambda x : int(x) , line.strip().split('T')[0].split("-"))))
        else:
            print(line.split(" ")[[1:3]])
297/13:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            print(list(map(lambda x : int(x) , line.strip().split('T')[0].split("-"))))
        else:
            print(line.split(" ")[1:3])
297/14:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            print(list(map(lambda x : int(x) , line.strip().split('T')[0].split("-"))))
        else:
            print(line.split(" ")[1:4])
297/15:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            print(line.strip().split('T')[0].split("-"))
        else:
            print(line.split(" ")[1:4])
297/16:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            print(line.strip().split('T')[0].split("-"))
        else:
            print(line.split(" ")[1:4])
297/17:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            print(line.strip().split('T')[0].split("-"))
        else:
            pass
            #print(line.split(" ")[1:4])
297/18:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            datelist = list(map(lambda x : int(x) , line.strip().split('T')[0].split("-")))
            print(datelist)
        else:
            pass
            #print(line.split(" ")[1:4])
297/19:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            datelist = list(map(lambda x : int(x) , line.strip().split('T')[0].split("-")))
            print(datetime.datetime(year = datelist[0] , month = datelist[1] , day = datelist[2]))
        else:
            pass
            #print(line.split(" ")[1:4])
297/20: ?datetime.datetime.strftime
297/21: ?datetime.datetime.strftime()
297/22:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            datelist = list(map(lambda x : int(x) , line.strip().split('T')[0].split("-")))
            print(datetime.datetime(year = datelist[0] , month = datelist[1] , day = datelist[2]).timestamp())
        else:
            pass
            #print(line.split(" ")[1:4])
297/23:
mths = {
            'jan' : 1,
            'feb' : 2,
            'mar' : 3,
            'apr' : 4,
            'may' : 5,
            'jun' : 6,
            'jul' : 7,
            'aug' : 8,
            'sep' : 9, 
            'oct' : 10,
            'nov' : 11,
            'dec' : 12
    }
297/24:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            datelist = list(map(lambda x : int(x) , line.strip().split('T')[0].split("-")))
            dte = datetime.datetime(year = datelist[0] , month = datelist[1] , day = datelist[2]).timestamp()
        else:
            datelist = line.split(" ")[1:4]
            print(datelist)
297/25:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            datelist = list(map(lambda x : int(x) , line.strip().split('T')[0].split("-")))
            dte = datetime.datetime(year = datelist[0] , month = datelist[1] , day = datelist[2]).timestamp()
        else:
            datelist = line.split(" ")[1:4]
            dte = datetime.datetime(year = int(datelist[2]) , month = mths[datelist[1].lower] , day = int(datelist[0]))
            print(dte)
297/26:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            datelist = list(map(lambda x : int(x) , line.strip().split('T')[0].split("-")))
            dte = datetime.datetime(year = datelist[0] , month = datelist[1] , day = datelist[2]).timestamp()
        else:
            datelist = line.split(" ")[1:4]
            dte = datetime.datetime(year = int(datelist[2]) , month = mths[datelist[1].lower()] , day = int(datelist[0]))
            print(dte)
297/27:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            datelist = list(map(lambda x : int(x) , line.strip().split('T')[0].split("-")))
            dte = datetime.datetime(year = datelist[0] , month = datelist[1] , day = datelist[2]).timestamp()
        else:
            datelist = line.split(" ")[1:4]
            dte = datetime.datetime(year = int(datelist[2]) , month = mths[datelist[1].lower()] , day = int(datelist[0])).timestamp()
            print(dte)
297/28:
with open("./temp_times" , "r") as f:
    for line in f.readlines():
        dte = None
        if(not("," in line)):
            datelist = list(map(lambda x : int(x) , line.strip().split('T')[0].split("-")))
            dte = datetime.datetime(year = datelist[0] , month = datelist[1] , day = datelist[2]).timestamp()
        else:
            datelist = line.split(" ")[1:4]
            dte = datetime.datetime(year = int(datelist[2]) , month = mths[datelist[1].lower()] , day = int(datelist[0])).timestamp()%ed
297/29: %ed
298/1:
mths = {
            'jan' : 1,
            'feb' : 2,
            'mar' : 3,
            'apr' : 4,
            'may' : 5,
            'jun' : 6,
            'jul' : 7,
            'aug' : 8,
            'sep' : 9, 
            'oct' : 10,
            'nov' : 11,
            'dec' : 12
    }exit
299/1: list({1:2 , 3:4})
301/1: ?rand
301/2: import random
301/3: ?random.random
301/4: randomrange(0 , 10)
301/5: random.randomrange(0 , 10)
301/6: random.randrange(0 , 10)
301/7: ?random.randrange(0 , 10)
301/8: ?random.randrange
301/9: random.seed()
301/10: ?random.randrange(0 , 10)
301/11: random.randrange(0 , 10)
301/12: random.randrange(0 , 10)
301/13: random.randrange(0 , 10)
302/1: import shutil
302/2: shutil.get_terminal_size()
302/3: shutil.get_terminal_size().columns
302/4: shutil.get_terminal_size()
302/5: shutil.get_terminal_size()
303/1: import niceMenu
303/2: ?niceMenu.niceMenu.get_choice
303/3: niceMenu.niceMenu.get_choice([1 , 2 , 3] , lambda x : str(x) , "N")
304/1: %load_ext autoreload
304/2: %autoreload 2
304/3: import niceMenu
304/4: niceMenu.niceMenu.get_choice([1 , 2 , 3] , lambda x : str(x) , "N")
304/5: niceMenu.niceMenu.get_choice([1 , 2 , 3] , lambda x : str(x) , "N")
304/6: niceMenu.niceMenu.get_choice([1 , 2 , 3] , lambda x : str(x) , "N")
304/7: niceMenu.niceMenu.get_choice([1 , 2 , 3] , lambda x : str(x) , "N")
304/8: [1 , 2 , 3][0:10]
304/9: [1 , 2 , 3][5:10]
304/10: [1 , 2 , 3][5]
304/11: niceMenu.niceMenu.get_choice(list(range(100)) , lambda x : str(x) , "N")
304/12: niceMenu.niceMenu.get_choice(list(range(100)) , lambda x : str(x) , "N")
304/13: niceMenu.niceMenu.get_choice(list(range(100)) , lambda x : str(x) , "N")
304/14: :w
305/1: %load_ext autoreload
305/2: %autoreload 2
305/3: import niceMenu
305/4: niceMenu.niceMenu.get_choice(list(range(100)) , lambda x : str(x) , "N")
306/1: import subprocess
306/2: ?subprocess.run
308/1: from sympy import *
309/1: from sympy import *
309/2: x , y = symbols('x y')
309/3: x
309/4: y
309/5: x , t , z , nu = symbols('x t , z , nu')
309/6: x , t , z , nu = symbols('x t z nu')
309/7: x
310/1: from sympy import *
310/2: x , t , z , nu = symbols('x t z nu')
310/3: init_printing(use_unicode = True)
310/4: diff(sin(x) * exp(x) , x)
310/5: integerate(sin(x**2) , (x , -oo , +oo))
310/6: integrate(sin(x**2) , (x , -oo , +oo))
310/7: x
310/8: x + 1
310/9: (x + 1) / y
310/10: (x + 1) / t
310/11: Eq(x + 1 , 4)
310/12: pi.evalf(1000)
310/13: pi.evalf(10000)
311/1: from sympy import init_session
311/2: init_session()
311/3: Integral(sqrt(1/x) , x)
311/4: Integral(sqrt(1/x) , (x , -1 , 1))
311/5: str(Integral(sqrt(1/x) , (x , -1 , 1)))
311/6: pprint(Integral(sqrt(1/x) , (x , -1 , 1)))
311/7: pprint(Integral(sqrt(1/x) , (x , -1 , 1)) , unicode = False)
311/8: pprint(Integral(sqrt(1/x) , (x , -1 , 1)) , use_unicode = False)
311/9: ?pprint
312/1: import pil
312/2: import pillow
312/3: import PIL
312/4: from PIL import Image
312/5: im = Image.open('lena.ppm')
312/6: im = Image.open('Sztuczne_Fiolki_van_Gogh.jpg')
312/7: im = Image.open('/home/kacper/PicturesSztuczne_Fiolki_van_Gogh.jpg')
312/8: im = Image.open('/home/kacper/Pictures/Sztuczne_Fiolki_van_Gogh.jpg')
312/9: im.show()
312/10: im.show()
312/11: source = im.split()
312/12: source
312/13: source[0].show()
313/1: import scipy
313/2: import scipy.misc
313/3: import scipy.cluster
313/4: from PIL import Image
313/5: import numpy as np
313/6: im = Image.read("/home/kacper/Pictures/Van_Gogh_defetyzm.jpg")
313/7: im = Image.open("/home/kacper/Pictures/Van_Gogh_defetyzm.jpg")
313/8: im.show
313/9: im.show()
313/10: ar = np.asarray(im)
313/11: shape = ar.shape
313/12: shape
313/13: shape[:2]
313/14: ?scipy.product
313/15: ?numpy.product
313/16: ?np.product
313/17: ?np.prod
313/18: np.prod(np.array([1 , 2 ,3]))
313/19: ar = reshape(np.prod(shape[:2]) , shape[2]).astype(float)
313/20: ar = npreshape(np.prod(shape[:2]) , shape[2]).astype(float)
313/21: ar
313/22: ar = np.reshape(np.prod(shape[:2]) , shape[2]).astype(float)
313/23: ar = np.asarray(im)
313/24: shape = ar.shape
313/25: ar = np.reshape(np.prod(shape[:2]) , shape[2]).astype(float)
313/26: ar = ar.reshape(scipy.product(shape[:2]), shape[2]).astype(float)
313/27: ar
313/28: NUM_CLUSTERS = 16
313/29: codes, dist = scipy.cluster.vq.kmeans(ar, NUM_CLUSTERS)
313/30: codes
313/31: dist
313/32: vecs, dist = scipy.cluster.vq.vq(ar, codes)
313/33: counts, bins = scipy.histogram(vecs, len(codes))
313/34: index_max = scipy.argmax(counts)
313/35: index_max
313/36: peak = codes[index_max]
313/37: peak
313/38: colour = binascii.hexlify(bytearray(int(c) for c in peak)).decode('ascii')
314/1: "123\456"
314/2: "123\n456"
314/3: print("123\n456")
314/4: "123\n456".replace("\n" , " ")
315/1: [][0:3]
315/2: [0 , 1][0:3]
315/3: [0 , 1][0:2]
317/1: import 1
317/2: exot
318/1: import first
318/2: first.fancyFunction(1)
319/1: %autoreload 2
319/2: %load_ext autoreload
319/3: %autoreload 2
319/4: a = {1 : 10 , 2 : 100}
319/5:
for x in a:
    print(x)
319/6: " ".join(["1" , "2"])
319/7: ["a"]
319/8: ["a"][:-1]
319/9: ["a"][-1:]
319/10: ["0" , "1" , "2"][:-2]
319/11: ["0" , "1" , "2"][-2:]
319/12: r"123"
319/13: [r"123" , "123"]
319/14: " ".join([r"123" , "123"])
319/15: import niceParse
319/16: import re
319/17: re.match(r"^![+*]$" , "123")
319/18: re.match(r"^![+*]$" , "*")
319/19: print(re.match(r"^![+*]$" , "*"))
319/20: print(re.match(r"^[+*]$" , "*"))
319/21: print(re.match(r"^![+*]$" , "*"))
319/22: print(re.match(r"^![+*]$" , "a"))
319/23: print(re.match(r"^[^+*]$" , "a"))
319/24: print(re.match(r"^[^+*]$" , "*"))
319/25: print(re.match(r"^[^|&]$" , "*"))
319/26: print(re.match(r"^[^\|&]$" , "*"))
319/27: print(re.match(r"^[^\|\&]$" , "*"))
319/28: print(re.match(r"^[^+*]$" , "*"))
319/29: print(re.match(r"^[^+*]$" , "*"))
319/30: funDict = {r"^[^+*]$" : lambda x : int(x)}
319/31: print(re.match(r"^*$" , "*"))
319/32: print(re.match(r"^[*]$" , "*"))
319/33: funDict = {r"^[^+*]$" : lambda x : int(x)}
319/34: binDict = {r"^[*]$" : lambda x , y : x * y}
319/35: funDict = {r"^[^+*]$" : lambda x : int(x)}
319/36: binDict = {r"^[*]$" : lambda x , y : x * y , r"^[+]$" : lambda x , y : x + y}
319/37: unDict = {r"^[-]$" : lambda x : -x}
319/38: funDict = {r"^[^+*]$" : lambda x : (lambda keys : x in keys)}
319/39: unDict = {r"^[-]$" : lambda x : -x}
319/40: funDict = {r"^[^+*]$" : lambda x : (lambda keys : x in keys)}
319/41: unDict = {r"^[-]$" : lambda x : not(x)}
319/42: funDict = {r"^[^+*]$" : lambda x : int(x)}
319/43: funDict = {r"^[^+*]$" : lambda x : (lambda keys : x in keys)}
319/44: unDict = {r"^[-]$" : lambda x , keys : not(x(keys))}
319/45: binDict = {r"^[*]$" : lambda x , y , keys : and(x(keys) , y(keys)) , r"^[+]$" : lambda x , y , keys : or(x(keys) , y(keys))}
319/46: binDict = {r"^[*]$" : (lambda x , y , keys : and(x(keys) , y(keys))) , r"^[+]$" : (lambda x , y , keys : or(x(keys) , y(keys)))}
319/47: lambda x , y , z : x + y + z
320/1: %load_ext autoreload
320/2: %autoreload 2
320/3: funDict = {r"^[^+*]$" : lambda x : (lambda keys : x in keys)}
320/4: import niceParse
320/5: niceParse.parseRPN("aaa" , funDict , {} , {})
320/6: niceParse.parseRPN("aaa" , funDict , {} , {})
320/7: funDict
320/8: funDict
320/9: niceParse.parseRPN("aaa" , funDict , {} , {})
320/10: import re
320/11: re.match(funDict[0][0] , "aaa")
320/12:
for reg in funDict:
    print(reg)
    print(re.match(reg , "aaa"))
320/13: re.match(r"^[^+*]$" , "aaa")
320/14: print(re.match(r"^[^+*]$" , "aaa"))
320/15: print(re.match(r"^[+*]$" , "aaa"))
320/16: print(re.match(r"^*$" , "aaa"))
320/17: print(re.match(r"^.$" , "aaa"))
320/18: print(re.match(r"^.*$" , "aaa"))
320/19: print(re.match(r"^[^+*]*$" , "aaa"))
320/20: funDict = {r"^[^+*]*$" : lambda x : (lambda keys : x in keys)}
320/21: niceParse.parseRPN("aaa" , funDict , {} , {})
320/22: funp = niceParse.parseRPN("aaa" , funDict , {} , {})
320/23: funp(["aaa" , "bbb" , "ccc"])
320/24: funp(["adfsaa" , "bbb" , "ccc"])
320/25: funp = niceParse.parseRPN("***" , funDict , {} , {})
320/26: funDict = {r"^[^+*]*$" : lambda x : (lambda keys : x in keys)}
320/27: funDict = {r"^[^+*-]*$" : lambda x : (lambda keys : x in keys)}
320/28: unDict = {r"^[-]*$" : lambda f : (lambda keys : not(f(keys)))}
320/29: funp = niceParse.parseRPN("***" , funDict , unDict , {})
320/30: funp = niceParse.parseRPN("aaa" , funDict , unDict , {})
320/31: funp(["adfsaa" , "bbb" , "ccc"])
320/32: funp(["aaa" , "bbb" , "ccc"])
320/33: funp = niceParse.parseRPN("aaa -" , funDict , unDict , {})
320/34: funp(["aaa" , "bbb" , "ccc"])
320/35: funp(["adfsaa" , "bbb" , "ccc"])
320/36: funDict = {r"^[^+*-]*$" : lambda x : (lambda keys : x in keys)}
320/37: unDict = {r"^[-]*$" : lambda f : (lambda keys : not(f(keys)))}
320/38: funDict = {r"^[^+*-]*$" : lambda x : (lambda keys : x in keys)}
320/39: unDict = {r"^[-]$" : lambda f : (lambda keys : not(f(keys)))}
320/40: binDict = {r"^[*]$" : lambda f , g : (lambda keys : and(f(keys) , g(keys)))}
320/41: binDict = {r"^[*]$" : lambda f , g : (lambda keys : (f(keys) and g(keys)))}
320/42: binDict = {r"^[*]$" : lambda f , g : (lambda keys : (f(keys) and g(keys))) , r"^[+]$" : lambda f , g : (lambda keys : (f(keys) or g(keys)))}
320/43: funDict = {r"^[^+*-]*$" : lambda x : (lambda keys : x in keys)}
320/44: unDict = {r"^[-]$" : lambda f : (lambda keys : not(f(keys)))}
320/45: binDict = {r"^[*]$" : lambda f , g : (lambda keys : (f(keys) and g(keys))) , r"^[+]$" : lambda f , g : (lambda keys : (f(keys) or g(keys)))}
320/46: funp = niceParse.parseRPN("aaa -" , funDict , unDict , {})
320/47: funp = niceParse.parseRPN("aaa bbb +" , funDict , unDict , {})
320/48:
for reg in binDict:
    print(reg)
320/49:
for reg in binDict:
    print(reg)
    print(re.match(reg , "*"))
320/50: funp = niceParse.parseRPN("aaa bbb +" , funDict , unDict , {})
320/51: funp = niceParse.parseRPN("aaa bbb +" , funDict , unDict , binOper)
320/52: funp = niceParse.parseRPN("aaa bbb +" , funDict , unDict , binDict)
320/53: funp(["adfsaa" , "bbb" , "ccc"])
320/54: funp(["adfsaa" , "bsdfsdfbb" , "ccc"])
320/55: funp(["adfsaa" , "bsdfsdfbb" , "aaa"])
320/56: funp = niceParse.parseRPN("aaa bbb *" , funDict , unDict , binDict)
320/57: funp(["adfsaa" , "bsdfsdfbb" , "aaa"])
320/58: funp(["adfsaa" , "bbb" , "aaa"])
320/59: funp(["adfsaa" , "bbb" , "aaa"])exit
321/1:
def add(a : int , b : int):
    return a + b
321/2: ?add
321/3:
def add(a : int , b : int):
    """
    Adds two numbers.
    
    a - the first number
    b - the second number
    """
    return a + b
321/4: ?add
322/1: print(u'\u2500')
322/2:
for i in range(0):
    print(i)
322/3: t
323/1: int(0)
324/1: myFancyFunction(123)
325/1: 1 * 2 * 3 * 4 * 5
325/2: 1  2  3  4  5
326/1: "aaa".upper()
327/1: "asdasda".split("|")
328/1: None < 1
328/2: 1 != None
329/1: range(3)
329/2: list(range(3))
329/3: list(range(0:3))
329/4: list(range(0,3))
330/1: c = "1"
330/2: c = "111"
330/3: count(c , "1")
330/4: ?count
330/5: "1\n"
330/6: print("1\n")
330/7: print("1\n1")
330/8: print("1\n1".count("\n"))
331/1: list(range(10,3))
332/1: import sys
332/2: sys.stdout.write("\033[31;1m" + "something" + "\033[0m;")
332/3: sys.stdout.write("\033[31;1m" + "something" + "\033[0m")
332/4: sys.stdout.write("\033[31;1m" + "something" + " \033[0m")
332/5: sys.stdout.write("\033[31;1m" + "something" + " ")
332/6: sys.stdout.write("\033[31;1m" + "something")
332/7: sys.stdout.write("\033[7m" + "something" + " ")
332/8: sys.stdout.write("\033[7m" + "something" + "\033[0m")
333/1: print("\033[7m 111 \033[0m")
333/2: print("\033[7m 111 \033[0m 111")
333/3: print("\033[7m111\033[0m 111")
333/4: print("\033[7m111\033[0m 111")
334/1: "1231231".count(12)
334/2: "1231231".count("12")
334/3: "11111111".count("11")
334/4: "0123456789"[0:4]
334/5: "0123456789"[4:]
334/6: "0123456789"[0:0]
334/7: "0123456789"[0:]
335/1:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:pos].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[pos:].count(w)
        if(countBefore + countAfter == countAll and pos >= length):
            return line[0:pos]
        if(countBefore + countAfter == countAll):
            pos = pos + 1
    return line
335/2: cut_line("1|||2" , 1 , ["|||"])
335/3: cut_line("1|||2" , 2 , ["|||"])
335/4: cut_line("1|||2" , 2 , ["|||" , "---"])
335/5: cut_line("1|||2---3" , 2 , ["|||" , "---"])
335/6: cut_line("1|||2---3" , 1 , ["|||" , "---"])
335/7: cut_line("1|||2---3" , 2 , ["|||" , "---"])
335/8:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    print(countAll)
    pos = 0
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:pos].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[pos:].count(w)
        print(i , countBefore , countAfter)
        if(countBefore + countAfter == countAll and pos >= length):
            return line[0:pos]
        if(countBefore + countAfter == countAll):
            pos = pos + 1
    return line
335/9: cut_line("1|||2" , 2 , ["|||"])
335/10:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    print(countAll)
    pos = 0
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:pos].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[pos:].count(w)
        print(i , countBefore + countAfter)
        if(countBefore + countAfter == countAll and pos >= length):
            return line[0:pos]
        if(countBefore + countAfter == countAll):
            pos = pos + 1
    return line
335/11: cut_line("1|||2" , 2 , ["|||"])
335/12: str = "1|||2"
335/13: str[0]
335/14: cut_line("1|||2---3" , 2 , ["|||" , "---"])
335/15:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    print(countAll)
    pos = 0
    for i in range(len(line)):
        print(i , line[i])
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:pos].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[pos:].count(w)
        print(i , countBefore + countAfter)
        if(countBefore + countAfter == countAll and pos >= length):
            return line[0:pos]
        if(countBefore + countAfter == countAll):
            pos = pos + 1
    return line
335/16: cut_line("1|||2---3" , 2 , ["|||" , "---"])
335/17: cut_line("a|||b---c" , 2 , ["|||" , "---"])
335/18:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    print("countAll" , countAll)
    pos = 0
    for i in range(len(line)):
        print("(i , line[i])" ,i , line[i])
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:pos].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[pos:].count(w)
        print("(i , countBefore + countAfter)" , i , countBefore + countAfter)
        if(countBefore + countAfter == countAll and pos >= length):
            return line[0:pos]
        if(countBefore + countAfter == countAll):
            pos = pos + 1
    return line
335/19: cut_line("a|||b---c" , 2 , ["|||" , "---"])
335/20: "0123"[1:3]
335/21:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    print("countAll" , countAll)
    pos = 0
    for i in range(len(line)):
        print("(i , line[i])" ,i , line[i])
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:pos].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[pos:].count(w)
        print("(i , countBefore , countAfter)" , i , countBefore , countAfter)
        if(countBefore + countAfter == countAll and pos >= length):
            return line[0:pos]
        if(countBefore + countAfter == countAll):
            pos = pos + 1
    return line
335/22: cut_line("a|||b---c" , 2 , ["|||" , "---"])
335/23:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    print("countAll" , countAll)
    pos = 0
    for i in range(len(line)):
        print("(i , line[i])" ,i , line[i])
        countBefore = 0
        for w in ommit:
            print(line[0:pos].count(w) , w)
            countBefore = countBefore + line[0:pos].count(w)
        countAfter = 0
        for w in ommit:
            print(line[pos:].count(w) , w)
            countAfter = countAfter + line[pos:].count(w)
        print("(i , countBefore , countAfter)" , i , countBefore , countAfter)
        if(countBefore + countAfter == countAll and pos >= length):
            return line[0:pos]
        if(countBefore + countAfter == countAll):
            pos = pos + 1
    return line
335/24: cut_line("a|||b---c" , 2 , ["|||" , "---"])
335/25:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    print("countAll" , countAll)
    pos = 0
    for i in range(len(line)):
        print("(i , line[i])" ,i , line[i])
        countBefore = 0
        for w in ommit:
            print(line[0:pos] , w , line[0:pos].count(w))
            countBefore = countBefore + line[0:pos].count(w)
        countAfter = 0
        for w in ommit:
            print(line[pos:] , w , line[pos:].count(w))
            countAfter = countAfter + line[pos:].count(w)
        print("(i , countBefore , countAfter)" , i , countBefore , countAfter)
        if(countBefore + countAfter == countAll and pos >= length):
            return line[0:pos]
        if(countBefore + countAfter == countAll):
            pos = pos + 1
    return line
335/26: cut_line("a|||b---c" , 2 , ["|||" , "---"])
335/27:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    print("countAll" , countAll)
    pos = 0
    for i in range(len(line)):
        print("(i , line[i])" ,i , line[i])
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        print("(i , countBefore , countAfter)" , i , countBefore , countAfter)
        if(countBefore + countAfter == countAll and pos >= length):
            return line[0:pos]
        if(countBefore + countAfter == countAll):
            pos = pos + 1
    return line
335/28: cut_line("a|||b---c" , 2 , ["|||" , "---"])
335/29:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    print("countAll" , countAll)
    pos = 0
    for i in range(len(line)):
        print("(i , line[i])" ,i , line[i])
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        print("(i , countBefore , countAfter)" , i , countBefore , countAfter)
        if(countBefore + countAfter == countAll and pos >= length):
            return line[0:i]
        if(countBefore + countAfter == countAll):
            pos = pos + 1
    return line
335/30: cut_line("a|||b---c" , 2 , ["|||" , "---"])
335/31:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        if(countBefore + countAfter == countAll and pos >= length):
            return line[0:i]
        if(countBefore + countAfter == countAll):
            pos = pos + 1
    return line
335/32: cut_line("a|||b---c" , 2 , ["|||" , "---"])
335/33: cut_line("a|||b---c" , 0 , ["|||" , "---"])
335/34: cut_line("a|||b---c" , 1 , ["|||" , "---"])
335/35: cut_line("a|||b---c" , 2 , ["|||" , "---"])
335/36: cut_line("a|||b---c" , 3 , ["|||" , "---"])
335/37: cut_line("a|||b---c" , 4 , ["|||" , "---"])
335/38: cut_line("a|||b---c" , 5 , ["|||" , "---"])
335/39: cut_line("a|||b---c" , 6 , ["|||" , "---"])
335/40: cut_line("a|||b---c" , 10 , ["|||" , "---"])
335/41:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        if(countBefore + countAfter == countAll):
            pos = pos + 1
            if(pos == length):
                return line[0:i]
    return line
335/42: cut_line("a|||b---c" , 0 , ["|||" , "---"])
335/43: cut_line("a|||b---c" , 1 , ["|||" , "---"])
335/44: cut_line("a|||b---c" , 2 , ["|||" , "---"])
335/45: cut_line("a|||b---c" , 3 , ["|||" , "---"])
335/46: cut_line("a|||b---c" , 4 , ["|||" , "---"])
335/47:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    for i in range(len(line)):
        print(i , pos , line[i])
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        if(countBefore + countAfter == countAll):
            if(pos == length):
                return line[0:i]
            pos = pos + 1
    return line
335/48: cut_line("a|||b---c" , 10 , ["|||" , "---"])
335/49:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    for i in range(len(line)):
        print(i , pos , line[i])
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        print(line[0:i] , line[i:] , countBefore , countAfter , countAll)
        if(countBefore + countAfter == countAll):
            if(pos == length):
                return line[0:i]
            pos = pos + 1
    return line
335/50: cut_line("a|||b---c" , 10 , ["|||" , "---"])
335/51:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    for i in range(len(line)):
        print(i , pos , line[i])
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        print("<" + line[0:i] + "><" + line[i:] + ">" , countBefore , countAfter , countAll)
        if(countBefore + countAfter == countAll):
            if(pos == length):
                return line[0:i]
            pos = pos + 1
    return line
335/52: cut_line("a|||b---c" , 10 , ["|||" , "---"])
335/53:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    for i in range(len(line)):
        #print(i , pos , line[i])
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        #print("<" + line[0:i] + "><" + line[i:] + ">" , countBefore , countAfter , countAll)
        if(countBefore + countAfter == countAll):
            if(pos == length):
                return line[0:i]
            pos = pos + 1
    return line
335/54: cut_line("a|||b---c" , 10 , ["|||" , "---"])
335/55: cut_line("a|||b---c" , 0 , ["|||" , "---"])
335/56: cut_line("a|||b---c" , 1 , ["|||" , "---"])
335/57: cut_line("a|||b---c" , 2 , ["|||" , "---"])
335/58:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    inommit = False
    pos = 0
    for i in range(len(line)):
        #print(i , pos , line[i])
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        #print("<" + line[0:i] + "><" + line[i:] + ">" , countBefore , countAfter , countAll)
        if(countBefore + countAfter == countAll):
            inommit = not in
            if(pos == length):
                return line[0:i]
            if(not inommit):
                pos = pos + 1
    return line
335/59:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    inommit = False
    pos = 0
    for i in range(len(line)):
        #print(i , pos , line[i])
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        #print("<" + line[0:i] + "><" + line[i:] + ">" , countBefore , countAfter , countAll)
        if(countBefore + countAfter == countAll):
            inommit = not in
            if(pos == length):
                return line[0:i]
            if(not inommit):
                pos = pos + 1
    return line
335/60:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    inommit = False
    pos = 0
    for i in range(len(line)):
        #print(i , pos , line[i])
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        #print("<" + line[0:i] + "><" + line[i:] + ">" , countBefore , countAfter , countAll)
        if(countBefore + countAfter == countAll):
            inommit = not in
            if(pos == length):
                return line[0:i]
            if(not inommit):
                pos = pos + 1
    return line
335/61:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    inommit = False
    pos = 0
    for i in range(len(line)):
        #print(i , pos , line[i])
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        #print("<" + line[0:i] + "><" + line[i:] + ">" , countBefore , countAfter , countAll)
        if(countBefore + countAfter == countAll):
            inommit = not inommit
            if(pos == length):
                return line[0:i]
            if(not inommit):
                pos = pos + 1
    return line
335/62: cut_line("a|||b---c" , 2 , ["|||" , "---"])
335/63: cut_line("a|||b---c" , 1 , ["|||" , "---"])
335/64: cut_line("a|||b---c" , 2 , ["|||" , "---"])
335/65: cut_line("a|||b---c" , 3 , ["|||" , "---"])
335/66: cut_line("a|||b---c" , 4 , ["|||" , "---"])
335/67: %edit
335/68:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    inommit = False
    pos = 0
    for i in range(len(line)):
        #print(i , pos , line[i])
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        #print("<" + line[0:i] + "><" + line[i:] + ">" , countBefore , countAfter , countAll)
        if(countBefore + countAfter == countAll):
            inommit = not inommit
            if(pos == length):
                return line[0:i]
            if(not inommit):
                pos = pos + 1
    return line
    %edit
336/1:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    inommit = False
    pos = 0
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        oktocut = (countBefore + countAfter == countAll)
        inommit = not oktocut
        if(oktocut):
            if(pos == length):
                return line[0:i]
                pos = pos + 1
    return line
336/2: cut_line("0---123456---7---8" , 100 , ["---"])
336/3:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    inommit = False
    pos = 0
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        oktocut = (countBefore + countAfter == countAll)
        inommit = not oktocut
        if(oktocut):
            print(line[i] , pos)
            if(pos == length):
                return line[0:i]
                pos = pos + 1
    return line
336/4: cut_line("0---123456---7---8" , 100 , ["---"])
336/5:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    inommit = False
    pos = 0
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        oktocut = (countBefore + countAfter == countAll)
        inommit = not oktocut
        if(oktocut):
            print(line[i] , pos)
            if(pos == length):
                return line[0:i]
            pos = pos + 1
    return line
336/6: cut_line("0---123456---7---8" , 100 , ["---"])
336/7:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    inommit = False
    pos = 0
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        oktocut = (countBefore + countAfter == countAll)
        inommit = not oktocut
        if(oktocut):
            pos = pos + 1
            print(line[i] , pos)
            if(pos == length):
                return line[0:i]
    return line
336/8: cut_line("0---123456---7---8" , 100 , ["---"])
336/9:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        oktocut = (countBefore + countAfter == countAll)
        if(oktocut):
            pos = pos + 1
            if(pos == length):
                return line[0:i]
    return line
336/10: cut_line("0---123456---7---8" , 100 , ["---"])
336/11:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        oktocut = (countBefore + countAfter == countAll)
        if(oktocut):
            print(i , pos , line[i])
            if(pos == length):
                return line[0:i]
            pos = pos + 1
    return line
336/12: cut_line("0---123456---7---8" , 100 , ["---"])
336/13: cut_line("0---1234---5---" , 100 , ["---"])
336/14: "0---1234---5---"
336/15: "0---1234---5---"[0:0]
336/16: "0---1234---5---"[0:]
336/17: "0---1234---5---"[0:1]
336/18: "0---1234---5---"[1:]
336/19: "0---1234---5---"[0:2]
336/20: "0---1234---5---"[2:]
336/21: "0---1234---5---"[0:7]
336/22: "0---1234---5---"[7:]
336/23: "0---1234---5---"[0:8]
336/24: "0---1234---5---"[8:]
336/25:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    encountered = 0
    oktocutbefore = True
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        oktocut = (countBefore + countAfter == countAll)
        if(oktocutbefore == True and oktocut == False):
            encountered = encountered + 1
        if(oktocut):
            pos = pos + 1
            if(pos == length - encountered):
                return line[0:i]
        oktocutbefore = oktocut
    return line
336/26: cut_line("0---123456---7---8" , 100 , ["---"])
336/27: cut_line("0---123456---7---8" , 1 , ["---"])
336/28: cut_line("0---123456---7---8" , 2 , ["---"])
336/29: cut_line("0---123456---7---8" , 3 , ["---"])
336/30:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    encountered = 0
    oktocutbefore = True
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        oktocut = (countBefore + countAfter == countAll)
        if(oktocutbefore == True and oktocut == False):
            encountered = encountered + 1
        print(i , pos , encountered , line[i])
        if(oktocut):
            pos = pos + 1
            if(pos == length - encountered):
                return line[0:i]
        oktocutbefore = oktocut
    return line
336/31: cut_line("0---123456---7---8" , 3 , ["---"])
336/32: cut_line("0---123456---7---8" , 100 , ["---"])
336/33:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    encountered = 0
    oktocutbefore = True
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        oktocut = (countBefore + countAfter == countAll)
        if(oktocutbefore == True and oktocut == False):
            encountered = encountered + 1
        print(length - encountered , line[i])
        if(oktocut):
            pos = pos + 1
            if(pos == length - encountered):
                return line[0:i]
        oktocutbefore = oktocut
    return line
336/34: cut_line("0---123456---7---8" , 100 , ["---"])
336/35:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    encountered = 0
    oktocutbefore = True
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        oktocut = (countBefore + countAfter == countAll)
        if(oktocutbefore == True and oktocut == False):
            encountered = encountered + 1
        print(pos - encountered , line[i])
        if(oktocut):
            pos = pos + 1
            if(pos == length - encountered):
                return line[0:i]
        oktocutbefore = oktocut
    return line
336/36: cut_line("0---123456---7---8" , 100 , ["---"])
336/37:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    encountered = 0
    oktocutbefore = True
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        oktocut = (countBefore + countAfter == countAll)
        if(oktocutbefore == True and oktocut == False):
            encountered = encountered + 1
        print(pos - encountered , line[i])
        if(oktocut):
            pos = pos + 1
            if(pos - encountered == length):
                return line[0:i]
        oktocutbefore = oktocut
    return line
336/38: cut_line("0---123456---7---8" , 100 , ["---"])
336/39:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    encountered = 0
    oktocutbefore = True
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        oktocut = (countBefore + countAfter == countAll)
        if(oktocutbefore == True and oktocut == False):
            encountered = encountered + 1
        if(oktocut):
            pos = pos + 1
            if(pos - encountered == length):
                return line[0:i]
        oktocutbefore = oktocut
    return line
336/40: cut_line("0---123456---7---8" , 0 , ["---"])
336/41: cut_line("0---123456---7---8" , 1 , ["---"])
336/42: cut_line("0---123456---7---8" , 2 , ["---"])
336/43: cut_line("0---123456---7---8" , 3 , ["---"])
336/44:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    encountered = 0
    oktocutbefore = True
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        oktocut = (countBefore + countAfter == countAll)
        if(oktocutbefore == True and oktocut == False):
            encountered = encountered + 1
        if(oktocut):
            pos = pos + 1
            if(pos - encountered == length + 1):
                return line[0:i]
        oktocutbefore = oktocut
    return line
336/45: cut_line("0---123456---7---8" , 3 , ["---"])
336/46: cut_line("0---123456---7---8" , 0 , ["---"])
336/47: cut_line("0---123456---7---8" , 1 , ["---"])
336/48: cut_line("0---123456---7---8" , 2 , ["---"])
336/49: cut_line("0---123456---7---8" , 3 , ["---"])
336/50: cut_line("0---123456---7---8" , 4 , ["---"])
336/51: cut_line("0---123456---7---8" , 5 , ["---"])
336/52: cut_line("0---123456---7---8" , 6 , ["---"])
336/53: cut_line("0---123456---7---8" , 7 , ["---"])
336/54: cut_line("0---123456---7---8" , 8 , ["---"])
336/55: cut_line("0---123456---7---8" , 9 , ["---"])
336/56:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    encountered = 0
    oktocutbefore = True
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        oktocut = (countBefore + countAfter == countAll)
        if(oktocutbefore == True and oktocut == False):
            encountered = encountered + 1
        if(oktocut):
            pos = pos + 1
            if(pos - encountered == length + 1):
                return line[0:i]
        oktocutbefore = oktocut
    return line
337/1: aaa = "\033[0m"
337/2: aaa[4:]
337/3: aaa[5:]
337/4: aaa
337/5: aaa[-3:]
338/1: aaa = "\033[0m"
338/2: aaa[1]
338/3: aaa[0]
338/4: aaa[1]
338/5:
def cut_line(line , length , ommit):
    countAll = 0
    for w in ommit:
        countAll = countAll + line.count(w)
    pos = 0
    encountered = 0
    oktocutbefore = True
    for i in range(len(line)):
        countBefore = 0
        for w in ommit:
            countBefore = countBefore + line[0:i].count(w)
        countAfter = 0
        for w in ommit:
            countAfter = countAfter + line[i:].count(w)
        oktocut = (countBefore + countAfter == countAll)
        if(oktocutbefore == True and oktocut == False):
            encountered = encountered + 1
        if(oktocut):
            pos = pos + 1
            if(pos - encountered == length + 1):
                return line[0:i]
        oktocutbefore = oktocut
    return line
338/6: REVERSE_COLOR = "\033[7m"
338/7: RESET_ESCAPE = "\033[0m"
338/8: lne = REVERSE_COLOR + "0123" + RESET_ESCAPE + "45"
338/9: lne
338/10: print(lne)
338/11: cut_line(lne , 0 , [RESET_ESCAPE])
338/12: cut_line(lne , 1 , [RESET_ESCAPE])
338/13: cut_line(lne , 2 , [RESET_ESCAPE])
338/14: cut_line(lne , 3 , [RESET_ESCAPE])
338/15: cut_line(lne , 4 , [RESET_ESCAPE])
338/16: cut_line(lne , 5 , [RESET_ESCAPE])
338/17: cut_line(lne , 6 , [RESET_ESCAPE])
338/18: print(cut_line(lne , 6 , [RESET_ESCAPE]))
338/19: print(cut_line(lne , 9 , [RESET_ESCAPE]))
338/20: print(cut_line(lne , 0 , [RESET_ESCAPE]))
338/21: print(cut_line(lne , 1 , [RESET_ESCAPE]))
338/22: print(cut_line(lne , 2 , [RESET_ESCAPE]))
338/23: print(cut_line(lne , 3 , [RESET_ESCAPE]))
338/24: print(cut_line(lne , 4 , [RESET_ESCAPE]))
338/25: print(cut_line(lne , 5 , [RESET_ESCAPE]))
339/1: a = "123123"
339/2: a.replace("12" , "aa")
339/3: a
339/4: q
340/1: import os
340/2: os.get_terminal_size()
340/3: os.get_terminal_size().columns
340/4: os.get_terminal_size().lines
340/5: (columns , lines) = os.get_terminal_size()
340/6: columns
340/7: q
340/8: euit
341/1: import cursor
342/1: eval("import math; return math.sin(123)")
342/2: ?exec
342/3: ?eval
342/4: eval("1+2")
342/5: eval("1")
342/6:
def ff(x):
    return 2 * x
342/7: ?exec_string
342/8: exec("1+2")
342/9: eval("ff(123)")
343/1: eval("a = 123; a+1")
343/2: a = 1; a+123
343/3:
code="""
a = 1
b = a + 1
b + a
"""
343/4: code
343/5: eval(code)
343/6:
code = """
def f(x):
    x = x + 1
    return x

print 'This is my output.'
"""
343/7: eval(code)
343/8: exec(code)
343/9:
code = """
def f(x):
    x = x + 1
    return x

print('This is my output.')
"""
343/10: exec(code)
343/11: eval(code)
344/1: [0 , 1 ,2  , 3 , 4]
345/1: import niceScreen
345/2: a = niceScreen(5 , 5)
345/3: a = niceScreen.niceScreen(5 , 5)
345/4: a.chararray
345/5: a.stylearray
345/6: a = niceScreen.niceScreen(10 , 5)
345/7: a.stylearray
345/8: reload(niceScreen)
345/9: niceScreen.reload()
345/10: import imp
345/11: import importlib
345/12: importlib.reload(niceScreen)
345/13: a = niceScreen.niceScreen(10 , 5)
345/14: niceScreen.style_sub
346/1: import importlib
346/2: import niceScreen
346/3: niceScreen.niceScreen.style_sub
346/4: importlib.reload(niceScreen)
346/5: niceScreen.niceScreen.style_substitute
346/6: importlib.reload(niceScreen)
346/7: a = niceScreen.niceScreen(10 , 5)
346/8: a.set_style(1)
346/9: importlib.reload(niceScreen)
346/10: a = niceScreen.niceScreen(10 , 5)
346/11: a.set_style(1)
346/12: a.write("This\nis\naaa")
346/13: a.chararray
346/14: a.stylearray
346/15: a.read()
346/16: importlib.reload(niceScreen)
346/17: a = niceScreen.niceScreen(10 , 5)
346/18: a.write("This\nis\naaa")
346/19: a.read
346/20: a.read()
346/21: importlib.reload(niceScreen)
346/22: a = niceScreen.niceScreen(10 , 5)
346/23: a.write("This\nis\naaa")
346/24: a.read()
346/25: importlib.reload(niceScreen)
346/26: a = niceScreen.niceScreen(10 , 5)
346/27: a.write("This\nis\naaa")
346/28: a.read()
346/29: print(a.read())
346/30: import sys
346/31: sys.stdout.write(a.read)
346/32: sys.stdout.write(a.read())
346/33: sys.stdout.write(a.read())
346/34: a.read()
346/35: importlib.reload(niceScreen)
346/36: a = niceScreen.niceScreen(10 , 5)
346/37: a.write("This\nis\naaa")
346/38: a.read()
346/39: a.set_style(niceScreen.niceScreen.red_bold)
346/40: a.reset_all()
346/41: importlib.reload(niceScreen)
346/42: a = niceScreen.niceScreen(10 , 5)
346/43: a.reset_all()
346/44: a.set_style(niceScreen.niceScreen.red_bold)
346/45: a.write("This\nis\naaa")
346/46: a.read()
346/47: print(a.read())
347/1: ?compile
347/2: eval(1+1)
347/3: eval("1+1")
347/4: compile("1+1" , "" , "eval")
347/5: codeobj = compile("1+1" , "" , "eval")
347/6: codeobj.co_code
347/7: print(codeobj)
347/8: codeobj = compile("f(g(x))" , "" , "eval")
347/9: eval(codeobj)
347/10: r , c = 1 , 2
347/11:
def rel(x , y):
    return ("value at :" , r - y , c - x)
347/12: codeobj = compile("rel(-1 , -1)" , "" , "eval")
347/13: eval(codeobj)
347/14: r , c = 1 , 10
347/15: eval(codeobj)
348/1: r , c = 1 , 2
348/2:
def rel(x , y):
    return ("value at :" , r - y , c - x)
348/3:
codeobj = compile("""
a = 1
b = 2
rel(-1 , -1)
""" , "" , "eval")
348/4: codeobj = compile("list(rel(-1 , -1)) + [0 , 0 , 0]" , "" , "eval")
348/5: eval(codeobj)
349/1: import keyboard
350/1: import sys
350/2: import terminos
350/3: import termios
350/4: fd = sys.stdin.fileno()
350/5: old = termios.tcgetattr(fd)
350/6: tty.setraw(fd)
350/7: import tty
350/8: tty.setraw(fd)
350/9: char = sys.stdin.read(1)
350/10: char
351/1: [1][1:]
352/1: import cv2
352/2: import numpy as np
352/3: cap = cv2.VideoCapture(0)
352/4:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Display the resulting frame
    cv2.imshow('frame',gray)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/1: import cv2
353/2: import numpy as np
353/3:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Display the resulting frame
    cv2.imshow('frame',gray)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/4: cap = cv2.VideoCapture(0)
353/5:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Display the resulting frame
    cv2.imshow('frame',gray)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/6:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Display the resulting frame
    cv2.imshow('frame',gray)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/7:
cap.release()
out.release()
cv2.destroyAllWindows()
353/8:
cap.release()
cv2.destroyAllWindows()
353/9: cap = cv2.VideoCapture(0)
353/10:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    flip = cv2.flip(gray,0)

    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/11:
cap.release()
cv2.destroyAllWindows()
353/12: ?cv2.flip
353/13: cap = cv2.VideoCapture(0)
353/14:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    flip = cv2.flip(gray,-1)

    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/15:
cap.release()
cv2.destroyAllWindows()
353/16: qrCodeDetector = cv2.QRCodeDetector()
353/17: cap = cv2.VideoCapture(0)
353/18:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)

    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/19:
cap.release()
cv2.destroyAllWindows()
353/20: cap = cv2.VideoCapture(0)
353/21:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, _ = qrCodeDetector.detectAndDecode(image)
    if points is not None:
        print(points , decodedText)
        
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/22:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, _ = qrCodeDetector.detectAndDecode(frame)
    if points is not None:
        print(points , decodedText)
        
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/23:
cap.release()
cv2.destroyAllWindows()
353/24:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, _ = qrCodeDetector.detectAndDecode(frame)
    #if points is not None:
    #    print(points , decodedText)
        
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/25: cap = cv2.VideoCapture(0)
353/26:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, _ = qrCodeDetector.detectAndDecode(frame)
    #if points is not None:
    #    print(points , decodedText)
        
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/27:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    print(points , decodedText , something)
        
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/28:
cap.release()
cv2.destroyAllWindows()
353/29:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    print("points = " , points , "decodedText = " , decodedText , "something = " , something)
        
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/30: cap = cv2.VideoCapture(0)
353/31:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    print("points = " , points , "decodedText = " , decodedText , "something = " , something)
        
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/32:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        print(points)
        
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/33:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        print(points)
        
        nrOfPoints = len(points)
 
        for i in range(nrOfPoints):
            nextPointIndex = (i+1) % nrOfPoints
            cv2.line(frame, tuple(points[i][0]), tuple(points[nextPointIndex][0]), (255,0,0), 5)
            
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/34:
cap.release()
cv2.destroyAllWindows()
353/35: cap = cv2.VideoCapture(0)
353/36: points = None
353/37: pointsglob = None
353/38:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        pointsglob = points
        
    nrOfPoints = len(pointsglob)
 
    for i in range(nrOfPoints):
        nextPointIndex = (i+1) % nrOfPoints
        cv2.line(frame, tuple(pointsglob[i][0]), tuple(pointsglob[nextPointIndex][0]), (255,0,0), 5)
            
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/39:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        pointsglob = points
        
    nrOfPoints = len(pointsglob)
 
    if(pointsglob != None):
        for i in range(nrOfPoints):
            nextPointIndex = (i+1) % nrOfPoints
            cv2.line(frame, tuple(pointsglob[i][0]), tuple(pointsglob[nextPointIndex][0]), (255,0,0), 5)
            
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
353/40:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        pointsglob = points
        
    if(pointsglob != None):
        nrOfPoints = len(pointsglob)
 
        for i in range(nrOfPoints):
            nextPointIndex = (i+1) % nrOfPoints
            cv2.line(frame, tuple(pointsglob[i][0]), tuple(pointsglob[nextPointIndex][0]), (255,0,0), 5)
            
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
354/1: import cv2
354/2: import numpy as np
354/3: pointsglob = None
354/4: cap = cv2.VideoCapture(0)
354/5: cap = cv2.VideoCapture(0)
354/6: cap = cv2.VideoCapture(0)
355/1: import cv2
355/2: import numpy as np
355/3: pointsglob = None
355/4: cap = cv2.VideoCapture(0)
355/5:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        pointsglob = points
        
    if(pointsglob != None):
        nrOfPoints = len(pointsglob)
 
        for i in range(nrOfPoints):
            print(i , pointsglob[i])
            #nextPointIndex = (i+1) % nrOfPoints
            #cv2.line(frame, tuple(pointsglob[i][0]), tuple(pointsglob[nextPointIndex][0]), (255,0,0), 5)
            
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/6: qrCodeDetector = cv2.QRCodeDetector()
355/7:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        pointsglob = points
        
    if(pointsglob != None):
        nrOfPoints = len(pointsglob)
 
        for i in range(nrOfPoints):
            print(i , pointsglob[i])
            #nextPointIndex = (i+1) % nrOfPoints
            #cv2.line(frame, tuple(pointsglob[i][0]), tuple(pointsglob[nextPointIndex][0]), (255,0,0), 5)
            
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/8: got_points = True
355/9:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        pointsglob = points
        got_points = True
        
    if(got_points):
        nrOfPoints = len(pointsglob)
 
        for i in range(nrOfPoints):
            print(i , pointsglob[i])
            #nextPointIndex = (i+1) % nrOfPoints
            #cv2.line(frame, tuple(pointsglob[i][0]), tuple(pointsglob[nextPointIndex][0]), (255,0,0), 5)
            
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/10:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        pointsglob = points
        got_points = True
        
    if(got_points):
        nrOfPoints = len(pointsglob)
 
        for i in range(nrOfPoints):
            print(i , nrOfPoints , pointsglob[i])
            #nextPointIndex = (i+1) % nrOfPoints
            #cv2.line(frame, tuple(pointsglob[i][0]), tuple(pointsglob[nextPointIndex][0]), (255,0,0), 5)
            
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/11:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        pointsglob = points
        got_points = True
        
    if(got_points):
        nrOfPoints = len(pointsglob)
 
        for i in range(nrOfPoints):
            print(pointsglob)
            #nextPointIndex = (i+1) % nrOfPoints
            #cv2.line(frame, tuple(pointsglob[i][0]), tuple(pointsglob[nextPointIndex][0]), (255,0,0), 5)
            
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/12:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        pointsglob = points
        got_points = True
        
    if(got_points):
        nrOfPoints = len(pointsglob)
 
        for i in range(nrOfPoints):
            print(pointsglob)
            #nextPointIndex = (i+1) % nrOfPoints
            frame[int(pointsglob[0][0][0]) , int(pointsglob[0][0][1])] = (255 , 255 , 255)
            #cv2.line(frame, tuple(pointsglob[i][0]), tuple(pointsglob[nextPointIndex][0]), (255,0,0), 5)
            
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/13:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        pointsglob = points
        got_points = True
        
    if(got_points):
        nrOfPoints = len(pointsglob)
 
        for i in range(nrOfPoints):
            print(pointsglob)
            #nextPointIndex = (i+1) % nrOfPoints
            #frame[int(pointsglob[0][0][0]) , int(pointsglob[0][0][1])] = (255 , 255 , 255)
            cv2.line(frame , tuple(pointsglob[0][0]) , tuple(pointsglob[0][1]) , (255 , 0 , 0) , 5)
            #cv2.line(frame, tuple(pointsglob[i][0]), tuple(pointsglob[nextPointIndex][0]), (255,0,0), 5)
            
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/14:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        pointsglob = points
        got_points = True
        
    if(got_points):
        nrOfPoints = len(pointsglob)
 
        print(pointsglob)
        #nextPointIndex = (i+1) % nrOfPoints
        #frame[int(pointsglob[0][0][0]) , int(pointsglob[0][0][1])] = (255 , 255 , 255)
        cv2.line(frame , tuple(pointsglob[0][0]) , tuple(pointsglob[0][1]) , (255 , 0 , 0) , 5)
        cv2.line(frame , tuple(pointsglob[0][2]) , tuple(pointsglob[0][2]) , (255 , 0 , 0) , 5)
        cv2.line(frame , tuple(pointsglob[0][2]) , tuple(pointsglob[0][3]) , (255 , 0 , 0) , 5)
        cv2.line(frame , tuple(pointsglob[0][3]) , tuple(pointsglob[0][0]) , (255 , 0 , 0) , 5)
        #cv2.line(frame, tuple(pointsglob[i][0]), tuple(pointsglob[nextPointIndex][0]), (255,0,0), 5)
            
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/15:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        pointsglob = points
        got_points = True
        
    if(got_points):
        nrOfPoints = len(pointsglob)
 
        print(pointsglob)
        #nextPointIndex = (i+1) % nrOfPoints
        #frame[int(pointsglob[0][0][0]) , int(pointsglob[0][0][1])] = (255 , 255 , 255)
        cv2.line(frame , tuple(pointsglob[0][0]) , tuple(pointsglob[0][1]) , (255 , 0 , 0) , 5)
        cv2.line(frame , tuple(pointsglob[0][1]) , tuple(pointsglob[0][2]) , (255 , 0 , 0) , 5)
        cv2.line(frame , tuple(pointsglob[0][2]) , tuple(pointsglob[0][3]) , (255 , 0 , 0) , 5)
        cv2.line(frame , tuple(pointsglob[0][3]) , tuple(pointsglob[0][0]) , (255 , 0 , 0) , 5)
        #cv2.line(frame, tuple(pointsglob[i][0]), tuple(pointsglob[nextPointIndex][0]), (255,0,0), 5)
            
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/16:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        pointsglob = points
        got_points = True
        
    if(got_points):
        nrOfPoints = len(pointsglob)
 
        print(pointsglob)
        #nextPointIndex = (i+1) % nrOfPoints
        #frame[int(pointsglob[0][0][0]) , int(pointsglob[0][0][1])] = (255 , 255 , 255)
        cv2.line(frame , tuple(pointsglob[0][0]) , tuple(pointsglob[0][1]) , (0 , 255 , 0) , 5)
        cv2.line(frame , tuple(pointsglob[0][1]) , tuple(pointsglob[0][2]) , (0 , 255 , 0) , 5)
        cv2.line(frame , tuple(pointsglob[0][2]) , tuple(pointsglob[0][3]) , (0 , 255 , 0) , 5)
        cv2.line(frame , tuple(pointsglob[0][3]) , tuple(pointsglob[0][0]) , (0 , 255 , 0) , 5)
        #cv2.line(frame, tuple(pointsglob[i][0]), tuple(pointsglob[nextPointIndex][0]), (255,0,0), 5)
            
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/17:
cap.release()

cv2.destroyAllWindows()
355/18: cap = cv2.VideoCapture(0)
355/19:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    flip = cv2.threshold(frame , 121 , 255 , cv.THRESH_BINARY)

    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/20:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    flip = cv2.threshold(frame , 121 , 255 , cv2.THRESH_BINARY)

    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/21:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    ret , flip = cv2.threshold(frame , 121 , 255 , cv2.THRESH_BINARY)

    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/22:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    ret , flip = cv2.adaptiveThreshold(frame , 255 , cv2.ADAPTIVE_THRESH_MEAN_C , cv2.THRESH_BINARY , 11 , 2)

    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/23:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    flip = cv2.adaptiveThreshold(frame , 255 , cv2.ADAPTIVE_THRESH_MEAN_C , cv2.THRESH_BINARY , 11 , 2)

    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/24:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.adaptiveThreshold(frame , 255 , cv2.ADAPTIVE_THRESH_MEAN_C , cv2.THRESH_BINARY , 11 , 2)
    flip = cv.adaptiveThreshold(frame,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY,11,2)
    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
355/25:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.adaptiveThreshold(frame , 255 , cv2.ADAPTIVE_THRESH_MEAN_C , cv2.THRESH_BINARY , 11 , 2)
    flip = cv2.adaptiveThreshold(frame,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY,11,2)
    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
356/1: import cv2
356/2: import numpy as np
356/3: cap = cv2.VideoCapture(0)
356/4:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.adaptiveThreshold(frame , 255 , cv2.ADAPTIVE_THRESH_MEAN_C , cv2.THRESH_BINARY , 11 , 2)
    flip = cv2.adaptiveThreshold(frame,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY,11,2)
    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
356/5:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.adaptiveThreshold(frame , 255 , cv2.ADAPTIVE_THRESH_MEAN_C , cv2.THRESH_BINARY , 11 , 2)
    flip = cv2.adaptiveThreshold(gray,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY,11,2)
    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
356/6:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    inverse = cv2.flip(gray , -1)
    #flip = cv2.adaptiveThreshold(frame , 255 , cv2.ADAPTIVE_THRESH_MEAN_C , cv2.THRESH_BINARY , 11 , 2)
    flip = cv2.adaptiveThreshold(inverse,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY,11,2)
    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
356/7:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    inverse = cv2.flip(gray , -1)
    #flip = cv2.adaptiveThreshold(frame , 255 , cv2.ADAPTIVE_THRESH_MEAN_C , cv2.THRESH_BINARY , 11 , 2)
    flip = cv2.adaptiveThreshold(inverse,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY,11,2)
    flip = cv2.bitwise_not(flip)
    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
356/8:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    inverse = cv2.flip(gray , -1)
    #flip = cv2.adaptiveThreshold(frame , 255 , cv2.ADAPTIVE_THRESH_MEAN_C , cv2.THRESH_BINARY , 11 , 2)
    flip = cv2.adaptiveThreshold(inverse,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY,11,2)
    flip = cv2.bitwise_not(flip)
    flip = cv2.fastNlMeansDenoising(flip , None , 10 , 10 , 7 , 21)
    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
356/9:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    inverse = cv2.flip(gray , -1)
    #flip = cv2.adaptiveThreshold(frame , 255 , cv2.ADAPTIVE_THRESH_MEAN_C , cv2.THRESH_BINARY , 11 , 2)
    flip = cv2.adaptiveThreshold(inverse,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY,11,2)
    flip = cv2.bitwise_not(flip)
    flip = cv2.fastNlMeansDenoisingMulti(flip , 2 , 5 , None , 4 , 7 , 35)
    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
356/10:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    inverse = cv2.flip(gray , -1)
    #flip = cv2.adaptiveThreshold(frame , 255 , cv2.ADAPTIVE_THRESH_MEAN_C , cv2.THRESH_BINARY , 11 , 2)
    flip = cv2.adaptiveThreshold(inverse,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY,11,2)
    flip = cv2.bitwise_not(flip)
    #flip = cv2.fastNlMeansDenoisingMulti(flip , 2 , 5 , None , 4 , 7 , 35)
    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
356/11:
cap.release()


cv2.destroyAllWindows()
357/1: n
358/1:
while(True):
    
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.adaptiveThreshold(frame , 255 , cv2.ADAPTIVE_THRESH_MEAN_C , cv2.THRESH_BINARY , 11 , 2)
    flip = cv2.adaptiveThreshold(frame,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY,11,2)
    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
    
            break
358/2:
while(True):
    
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.adaptiveThreshold(frame , 255 , cv2.ADAPTIVE_THRESH_MEAN_C , cv2.THRESH_BINARY , 11 , 2)
    flip = cv2.adaptiveThreshold(frame,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY,11,2)
    # Display the resulting frame
    cv2.imshow('frame',flip)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
358/3: edit _
358/4: edit 2
358/5: import cv2
358/6: ?cv2.adaptiveThreshold
358/7:
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #flip = cv2.flip(gray,-1)
    
    decodedText, points, something = qrCodeDetector.detectAndDecode(frame)
    
    if(decodedText.strip() == "TechTutorialsX!"):
        pointsglob = points
        got_points = True
        
    if(got_points):
        nrOfPoints = len(pointsglob)
 
        print(pointsglob)
        #nextPointIndex = (i+1) % nrOfPoints
        #frame[int(pointsglob[0][0][0]) , int(pointsglob[0][0][1])] = (255 , 255 , 255)
        cv2.line(frame , tuple(pointsglob[0][0]) , tuple(pointsglob[0][1]) , (255 , 0 , 0) , 5)
        cv2.line(frame , tuple(pointsglob[0][2]) , tuple(pointsglob[0][2]) , (255 , 0 , 0) , 5)
        cv2.line(frame , tuple(pointsglob[0][2]) , tuple(pointsglob[0][3]) , (255 , 0 , 0) , 5)
        cv2.line(frame , tuple(pointsglob[0][3]) , tuple(pointsglob[0][0]) , (255 , 0 , 0) , 5)
        #cv2.line(frame, tuple(pointsglob[i][0]), tuple(pointsglob[nextPointIndex][0]), (255,0,0), 5)
            
    # Display the resulting frame
    cv2.imshow('frame',frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
358/8: edit 7
359/1: import numpy as np
359/2: np.array([1 , 2]) - np.array([0 ,0])
358/9: 112.5/50
358/10: import numpy
358/11: numpy.array([1 , 2 , 3])
358/12: 2.5 * numpy.array([1 , 2 , 3])
358/13: int(2.5 * numpy.array([1 , 2 , 3]))
358/14: a = 2.5 * numpy.array([1 , 2 , 3])
358/15: a.astype(int)
358/16: (2.5 * numpy.array([1 , 2 , 3]) + 0.5)
358/17: (2.5 * numpy.array([1 , 2 , 3]) + 0.5).astype(int)
358/18: (2.5 * numpy.array([1 , 2 , 3]))
358/19: ?cv2.warpPerspective
358/20: (2.5 * numpy.array([1 , 2 , 3])).size()
358/21: (2.5 * numpy.array([1 , 2 , 3])).size
358/22: (2.5 * numpy.array([1 , 2 , 3])).shape
358/23: numpy.array([[1 , 2] , [3 , 4] , [5 , 6]])
358/24: numpy.array([[1 , 2] , [3 , 4] , [5 , 6]]).shape
358/25: numpy.array([[1 , 2] , [3 , 4] , [5 , 6]]).type
358/26: numpy.array([[1 , 2] , [3 , 4] , [5 , 6]]).dtype
358/27: 200.0/112/5
358/28: 16.0/9.0
358/29: 200.0/112.5
358/30: import cv2
358/31: ?cv2.imshow
358/32: cv2.namedWindow('frame' , cv2.WINDOW_NORMAL)
360/1: import cv2
360/2: ?cv2.waitKey
361/1: import os
361/2: os.getcwd()
362/1: s = format('05d' , 12)
362/2: s = format('05d' , '12')
362/3: s
362/4: '11'.zfill(4)
364/1: import cv2
364/2: ?cv2.merge
364/3: Exit
366/1: import numpy
366/2: ?numpy.maximum
367/1: import numpy
367/2: import cv2
367/3: cap = cv2.VideoCapture(0)
367/4: ?cv2.VideoWriter
367/5: ret , frame = cap.read()
367/6: cv2.imshow("frame" , frame)
367/7: cap .release()
367/8: cv2.destroyAllWindows()
367/9: frame.shape
367/10: cv2.imshow("frame" , frame)
367/11: cap.release()
367/12: cv2.destroyAllWindows()
367/13: data = numpy.reshape(img, (-1,3))
367/14: data = numpy.reshape(frame, (-1,3))
367/15: print(data.shape)
367/16: data = numpy.float32(data)
367/17: print(data.shape)
367/18: criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
367/19: flags = cv2.KMEANS_RANDOM_CENTERS
367/20: compactness,labels,centers = cv2.kmeans(data,1,None,criteria,10,flags)
367/21: centers
367/22: compactness,labels,centers = cv2.kmeans(data,2,None,criteria,10,flags)
367/23: centers
367/24: compactness,labels,centers = cv2.kmeans(data,16,None,criteria,10,flags)
367/25: centers
367/26: flat = numpy.reshape(img, (-1,3))
367/27: flat = numpy.reshape(frame, (-1,3))
367/28: flat.shape
367/29: flat[1]
367/30: flat[1:2]
367/31: flat[1:10]
367/32: flat[0:10]
367/33: frame.shape
367/34: frame[1 , :].shape
367/35: frame[1 , 0:10]
367/36: frame[1 , 0:10] - numpy.uint8([1 , 2 , 3])
367/37: abs[frame[1 , 0:10] - numpy.uint8([1 , 2 , 3])]
367/38: abs(frame[1 , 0:10] - numpy.uint8([1 , 2 , 3]))
367/39: abs(frame[1 , 0:10] - numpy.uint8([1000 , 2000 , 3000]))
367/40: frame.shape
368/1: import cv2
368/2: import numpy
368/3: cap = cv2.VideoCapture(0)
368/4: cv2.namedWindow('frame' , cv2.WINDOW_NORMAL)
368/5: ret, frame = cap.read()
368/6: cv2.imshow('frame',warped)
368/7: cv2.imshow('frame',frame)
368/8: cap.release()
368/9: cv2.destroyAllWindows()
368/10: cv2.imshow('frame',frame)
368/11: cap.release()
368/12: cv2.imshow('frame',frame)
368/13: cv2.destroyAllWindows()
368/14: cap.release()
368/15: cv2.destroyAllWindows()
368/16: ret, frame = cap.read()
368/17: ret, frame = cap.read()
368/18: ret, frame = cap.read()
368/19: cv2.imshow('frame',frame)
368/20: frame.shape
368/21: cap = cv2.VideoCapture(0)
368/22: ret, frame = cap.read()
368/23: ret, frame = cap.read()
368/24: ret, frame = cap.read()
368/25: cv2.imshow('frame',frame)
368/26: ret, frame = cap.read()
368/27: cv2.imshow('frame',frame)
368/28: cv2.imshow('frame',frame)
368/29: ret, frame = cap.read()
368/30: cv2.imshow('frame',frame)
368/31: cv2.imshow('frame',frame)
368/32: cap.release()
368/33: cv2.destroyAllWindows()
368/34: frame
368/35: frame.shape
368/36: frame.reshape((-1 , 3))
368/37: frame.reshape((-1 , 3)).shape
368/38: flat = frame.reshape((-1 , 3)).shape
368/39: reshaped = flat.reshape(frame.shape)
368/40: flat = frame.reshape((-1 , 3))
368/41: reshaped = flat.reshape(frame.shape)
368/42: reshaped.shape
368/43: reshaped[1 , 1:10] - frame[1 , 1:10]
368/44: reshaped[10 , 1:10] - frame[10 , 1:10]
368/45: flat - np.uint8([255 , 255 , 255])
368/46: flat - numpy.uint8([255 , 255 , 255])
368/47: flat[1:10] - numpy.uint8([255 , 255 , 255])
368/48: flat[1:10] - numpy.uint8([[255 , 255 , 255] , [2 , 2 , 2]])
368/49: abs(flat[1:10] - numpy.uint8([[255 , 255 , 255]]))
368/50: abs(flat[1:10] - numpy.uint8([[255 , 0 , 0]]))
368/51: blue_abs = numpy.dot(flat[1:10] , numpy.uint8([[255 , 0 , 0]]))
368/52: flat[1:10] - numpy.uint8([255 , 255 , 255])
368/53: numpy.uint8([255 , 255 , 255]).reshape(flat[1:10].shape)
368/54: flat[1:10].shape
368/55: numpy.uint8([255 , 255 , 255])[:,None]
368/56: numpy.uint8([255 , 255 , 255])[,None]
368/57: ?numpy.sum
368/58: numpy.dot(flat[1:10] , flat[1:10])
368/59: numpy.uint8([255 , 255 , 255])[numpy.newaxis , :]
368/60: numpy.uint8([255 , 255 , 255])[numpy.newaxis , :].shape
368/61: numpy.uint8([255 , 255 , 255])[numpy.newaxis , numpy.newaxis , :]
368/62: numpy.uint8([255 , 255 , 255])[numpy.newaxis , numpy.newaxis , :].shape
368/63: frame.shape
368/64: frame - numpy.uint8([255 , 255 , 255])[numpy.newaxis , numpy.newaxis , :]
368/65: frame - numpy.uint8([255 , 255 , 255])[numpy.newaxis , numpy.newaxis , :].shape
368/66: white_min = frame - numpy.uint8([255 , 255 , 255])[numpy.newaxis , numpy.newaxis , :]
368/67: white_min[1,1:10]
368/68: frame[1 , 1:10]
368/69: white_min = numpy.float32(frame) - numpy.float32([255 , 255 , 255])[numpy.newaxis , numpy.newaxis , :]
368/70: white_min[1,1:10]
368/71: numpy.linalg.norm(white_min)
368/72: numpy.linalg.norm(white_min , axis= 2)
368/73: numpy.linalg.norm(white_min , axis = 2)
368/74: numpy.linalg.norm(white_min , axis = 2).shape
368/75: aaa = numpy.float32([[[1 , 2 , 4] , [3 , 4 , 4]] , [[1 , 2 , 10] , [1 , 10 , 20]]])
368/76: aaa/shape
368/77: aaa.shape
368/78: aaa = numpy.float32([[[1 , 0 , 1] , [3 , 4 , 4]] , [[0 , 1 , 0] , [1 , 10 , 20]]])
368/79: numpy.argmin(aaa , axis=2)
368/80: numpy.argmin(aaa , axis=1)
368/81: numpy.argmin(aaa , axis=0)
368/82: numpy.argmin(aaa)
368/83: numpy.argmin(aaa , axis=0)
368/84: numpy.argmax(aaa , axis=0)
368/85:
a = np.array([[0, 1, 2],

              [0, 2, 4],

              [0, 3, 6]])
368/86:
a = numpy.array([[0, 1, 2],
              [0, 2, 4],
              [0, 3, 6]])
368/87: np.where(a < 4, a, -1)
368/88: b = numpy.where(a < 4, a, -1)
368/89: b
368/90: a
368/91: vvv = numpy.array(["a" , "b" , "c"])
368/92: vvv
368/93:
a = numpy.array([[0, 1, 2],
              [1, 1, 1],
              [2, 1, 1]])
368/94: b[a]
368/95: vvv[a]
368/96: vvv = numpy.array([[255 , 255 , 255] , [0 , 0 , 0] , [255 , 0 , 0]])
368/97: vvv[a]
368/98: a
368/99: a
369/1: import numpy
369/2: frame = numpy.float32([[[100 , 100 , 100] , [132 , 213 , 240]] , [[2 , 2 , 2] , [3 , 3 , 3]]])
369/3: colors = numpy.float32([[[100 , 100 , 100] , [132 , 213 , 240]] , [[2 , 2 , 2] , [3 , 3 , 3]]])
369/4: colors.shape
369/5: numpy.linalg.norm(colors - numpy.float32([100 , 100 , 100])[numpy.newaxis , numpy.newaxis , :] , axis = 2)
369/6: colors - numpy.float32([100 , 100 , 100])[numpy.newaxis , numpy.newaxis , :]
369/7: colors
369/8: [0 , 1 , 2 ,3][0:-1]
370/1: 1<=2
370/2: q
371/1: from Tkinter import *
371/2: from tkinter import *
371/3: master = Tk()
371/4: variable = StringVar(master)
371/5: variable.set("one")
371/6: w = OptionMenu(master , variable , "one" , "two" , "three")
371/7: w.pack()
371/8: mainloop()
371/9: w
371/10:
def ok():
    print "value is", var.get()
    master.quit()
371/11:
def ok():
    print("value is", var.get())
    master.quit()
371/12:
button = Button(master, text="OK", command=ok)
button.pack()
371/13: master = Tk()
371/14: variable.set("one")
371/15: variable = StringVar(master)
371/16: variable.set("one")
371/17: w = OptionMenu(master , variable , "one" , "two" , "three")
371/18: w.pack()
371/19:
button = Button(master, text="OK", command=ok)
button.pack()
371/20: mainloop()
372/1: import tkinter
372/2:
root = Tk()
Button(root, text="Quit", command=root.destroy).pack()
root.mainloop()
372/3: from tkinter import *
372/4:
root = Tk()
Button(root, text="Quit", command=root.destroy).pack()
root.mainloop()
372/5:
root = Tk()
Button(root, text="Quit", command=root.destroy).pack()
root.mainloop()
373/1: from tkinter import *
373/2: master = Tk()
373/3: var1 = IntVar()
373/4: Checkbutton(master, text="male", variable=var1).grid(row=0, sticky=W)
373/5: var2 = IntVar()
373/6: Checkbutton(master, text="female", variable=var2).grid(row=1, sticky=W)
373/7: mainloop()
373/8: mainloop()
374/1: import os
374/2: os.listdir()
375/1: import os
375/2: os.listdir()
375/3:
for file in os.listdir():
    if ".png" in file:
        print(file)
375/4:
for file in os.listdir():
    if ".png" in file:
        print(file)
375/5:
for file in os.listdir():
    print(file[-3:])
375/6:
for file in os.listdir():
    print(file[-4:])
375/7:
for file in os.listdir():
    if(file[-4:] == ".png"):
        print(file)
375/8:
for file in os.listdir():
    if(file[-4:] == ".png"):
        print(file[:-4])
375/9:
for file in os.listdir():
    if(file[-4:] == ".png"):
        print(int(file[:-4]))
376/1: int('asda')
376/2: '0000'.isdigit()
376/3: ?isdigit
376/4: ?str.isdigit
377/1: import cv2
378/1: ?ord
378/2: ord('a')
378/3: ord('z')
378/4: ord('b')
378/5: ord('c')
378/6: ord('d')
378/7: ord('e')
378/8: ord('f')
378/9: ord('g')
378/10: ord('h')
378/11: ord('i')
378/12: ord('j')
378/13: ord('k')
378/14: ord('l')
378/15: ord('m')
378/16: ord('n')
378/17: ord('o')
378/18: ord('p')
378/19: ord('q')
378/20: ord('r')
378/21: ord('s')
378/22: ord('t')
378/23: ord('u')
378/24: ord('')
378/25: ord('v')
378/26: ord('z')
378/27: ord('x')
378/28: ord('y')
378/29: ord('z')
378/30: ?ord
378/31: q
379/1: import numpy
379/2: numpy.zeros((2 , 2))
379/3: a = numpy.zeros((2 , 2))
379/4: a.shape
379/5: a.dtype
379/6: a = numpy.zeros(a.shape , a.dtype)
379/7: a = numpy.zeros((2 , 2))
379/8: a = numpy.zeros(a.shape , a.dtype)
380/1: import numpy
380/2: a = numpy.array([[1.0 , 2.0] , [3.0 , 4.0]])
380/3: b = numpy.array([[5.0 , 6.0] , [7.0 , 8.0]])
380/4: a - b
380/5: ?numpy.power
380/6: ?numpy.square
381/1: import numpy
381/2: a = numpy.array([[1.0 , 2.0] , [3.0 , 4.0]])
381/3: b = numpy.array([[5.0 , 6.0] , [7.0 , 8.0]])
381/4: numpy.where(a<b , 1 , 0)
381/5: numpy.where(a > b , 1 , 0)
382/1: import cv2
383/1: import numpy
383/2: a = numpy.array([[1.0 , 2.0] , [3.0 , 4.0]])
383/3: b = numpy.array([[5.0 , 6.0] , [7.0 , 8.0]])
383/4: a[1:1,1:1]
383/5: a[0:1,0:1]
383/6: a[0:1,0:1] = b[0:1 , 0:1]
383/7: a
383/8: a[0:2]
383/9: a[0:2 , 1]
383/10: a
383/11: a[1:100]
383/12: a
383/13: a[1:100,1:100]
383/14: a = [0 , 1 , 2 , 3 , 4]
383/15: a[0:3]
383/16: range(2)
383/17: list(range(2))
383/18: list(range(4))
383/19: len(a)
383/20: list(range(5))
383/21: len(a)/3
383/22: int(len(a)/3)
384/1: range(5)
384/2: list(range(5))
384/3: 123%100
384/4: 123/100
384/5: int(123/100)
384/6: int(99/100)
385/1: 1280
385/2: 1280/100
385/3: int(0.5 + 1280/100)
385/4: list(range(4))
386/1: [0 , 1 , 2 , 3 , 4][5]
386/2: [0 , 1 , 2 , 3 , 4][5 % 5]
386/3: [0 , 1 , 2 , 3 , 4][6 % 5]
386/4: [0 , 1 , 2 , 3 , 4][7 % 5]
386/5: [0 , 1 , 2 , 3 , 4][-1 % 5]
386/6: 1/2
386/7: 3/28
386/8: 3/16
387/1: import pyp2p
388/1: import socket
389/1: import numpy
389/2: a = array([[1 , 2],[3 , 4]])
389/3: a = numpy.array([[1 , 2],[3 , 4]])
389/4: b = numpy.array([[5 , 6],[7 , 8]])
389/5: c = numpy.array([[9 , 10],[11 , 12]])
389/6: a * a
389/7: a * a + b * b + c * c
389/8: (a * a + b * b + c * c).flatten()
389/9: numpy.max((a * a + b * b + c * c).flatten())
390/1: import numpy
390/2: a = numpy.array([[1 , 2],[3 , 4]])
390/3: b = numpy.array([[5 , 6],[7 , 8]])
390/4: c = numpy.array([[9 , 10],[11 , 12]])
390/5: a[: , 1] = 2 * a[: , 1]
390/6: a
391/1: import numpy
391/2: numpy.exp(-100.0)
391/3: numpy.exp(-100000.0)
391/4: numpy.exp(-10.0)
391/5: numpy.exp(-1000.0)
392/1: import cv2
392/2: cv2.CV_8S
392/3: cv2.CV_8U
392/4: cv2.CV_16U
392/5: ?cv2.CV_16U
392/6: reverse([1 , 2 , 3])
392/7: [1 , 2 , 3].reverse()
392/8: a = [1 , 2 , 3]
392/9: a.reverse()
392/10: a
392/11: import numpy
392/12: numpy.fromfunction(lambda i , j : i + j , (4 , 4) , dtype = numpy.float32)
392/13: numpy.fromfunction(lambda i , j : (i - 3) * (i - 3) + (j - 3) * (j - 3) , (5 , 5) , dtype = numpy.float32)
392/14: numpy.fromfunction(lambda i , j : (i - 2) * (i - 2) + (j - 2) * (j - 2) , (4 , 4) , dtype = numpy.float32)
392/15: numpy.fromfunction(lambda i , j : (i - 1.5) * (i - 1.5) + (j - 1.5) * (j - 1.5) , (4 , 4) , dtype = numpy.float32)
392/16: numpy.fromfunction(lambda i , j : 1.0 if (i - 1.5) * (i - 1.5) + (j - 1.5) * (j - 1.5) < 2 * 2 else 0, (4 , 4) , dtype = numpy.float32)
392/17: numpy.fromfunction(lambda i , j : (1.0 if (i - 1.5) * (i - 1.5) + (j - 1.5) * (j - 1.5) < 2 * 2 else 0), (4 , 4) , dtype = numpy.float32)
392/18: numpy.fromfunction(lambda i , j : (1.0 if ((i - 1.5) * (i - 1.5) + (j - 1.5) * (j - 1.5) < 2 * 2) else 0), (4 , 4) , dtype = numpy.float32)
392/19: numpy.fromfunction(lambda i , j : (1.0 if ((i - 1.5) * (i - 1.5) + (j - 1.5) * (j - 1.5) < 2 * 2) else 0.0), (4 , 4) , dtype = numpy.float32)
392/20: lam = lambda i , j : (1.0 if ((i - 1.5) * (i - 1.5) + (j - 1.5) * (j - 1.5) < 2 * 2) else 0.0)
392/21: lam(0 , 0)
392/22: lam(0 , 2)
392/23: lam(2 , 2)
392/24: numpy.fromfunction(lam, (4 , 4) , dtype = numpy.float32)
392/25:
def val(i , j):
    if((i - 1.5) * (i - 1.5) + (j - 1.5) * (j - 1.5) < 2.0 * 2.0):
        1.0
       else:
392/27:
def val(i , j):
    if((i - 1.5) * (i - 1.5) + (j - 1.5) * (j - 1.5) < 2.0 * 2.0):
        return 1.0
    else:
        return 0.0
392/28: val(2 , 2)
392/29: numpy.fromfunction(val, (4 , 4) , dtype = numpy.float32)
392/30:
def val(i):
    if((i[0] - 1.5) * (i[0] - 1.5) + (i[1] - 1.5) * (i[1] - 1.5) < 2.0 * 2.0):
        return 1.0
    else:
        return 0.0
392/31: numpy.fromfunction(val, (4 , 4) , dtype = numpy.float32)
392/32:
def val(i , j):
    print(i)
    print(j)
    if((i - 1.5) * (i - 1.5) + (j - 1.5) * (j - 1.5) < 2.0 * 2.0):
        return 1.0
    else:
        return 0.0
392/33: numpy.fromfunction(val, (4 , 4) , dtype = numpy.float32)
392/34: lav = numpy.vectorize(val)
392/35: lav
392/36: numpy.fromfunction(val, (4 , 4) , dtype = numpy.float32)
392/37: numpy.fromfunction(lav, (4 , 4) , dtype = numpy.float32)
393/1: import numpy
393/2: a = numpy.array([[0 , 1 , 1 , 0],[0 , 1 , 0 , 1],[0 , 0 , 0 , 1],[0 , 1 , 0 , 0]])
393/3: a
393/4: a.flatten()
393/5: a.flatten().nonzero()
393/6: (a.flatten().nonzero())[0]
393/7: nonzero = (a.flatten().nonzero())[0]
393/8: numpy.roll(nonzero , 1)
393/9: numpy.roll(nonzero , 1) - nonzero
393/10: nonzero - numpy.roll(nonzero , 1)
393/11: nonzero
393/12: nonzero - numpy.roll(nonzero , 1)
393/13: a = numpy.array([[0 , 1 , 1 , 0],[0 , 1 , 1 , 1],[0 , 0 , 0 , 1],[0 , 1 , 0 , 0]])
393/14: nonzero = (a.flatten().nonzero())[0]
393/15: nonzero
393/16: nonzero - numpy.roll(nonzero , 1)
393/17: nonzero
393/18: a.flatten()
393/19: numpy.array(range(16))
393/20: nonzero
393/21: numpy.setdiff1d(numpy.array(range(16)) , nonzero)
393/22: all = numpy.array(range(16))
393/23: al = numpy.array(range(16))
393/24: numpy.setdiff1d(a; , nonzero)
393/25: numpy.setdiff1d(al , nonzero)
393/26: al
393/27: nonzero
393/28: numpy.setdiff1d(nonzero , al)
393/29: numpy.setdiff1d(al , nonzero)
393/30: nonzero
393/31: numpy.roll(nonzero,1)
393/32: numpy.roll(nonzero,-1)
393/33: numpy.roll(nonzero,-1) - 1
393/34: nonzero - (numpy.roll(nonzero,-1) - 1)
393/35: nonzero
393/36: a.flatten()
393/37: numpy.setdiff1d(nonzero - (numpy.roll(nonzero,-1) - 1) , numpy.array([0]))
393/38: numpy.delete(nonzero - (numpy.roll(nonzero,-1) - 1) , numpy.array([0]) , 0)
393/39: nonzero - (numpy.roll(nonzero,-1) - 1)
393/40: a = numpy.array([[0 , 1 , 1 , 0],[0 , 1 , 1 , 1],[0 , 0 , 1 , 1],[0 , 1 , 1 , 1]])
393/41: a.flatten()
393/42: nonzero = numpy.nonzero(a.flatten())
393/43: nonzero
393/44: nonzero - (numpy.roll(nonzero,-1) - 1)
393/45: (numpy.roll(nonzero,-1) - 1)
393/46: a = numpy.array([[0 , 1 , 1 , 0],[0 , 1 , 1 , 1],[0 , 0 , 1 , 1],[0 , 1 , 1 , 0]])
393/47: a.flatten()
393/48: nonzero = numpy.nonzero(a.flatten())
393/49: nonzero
393/50: nonzero - (numpy.roll(nonzero,-1) - 1)
393/51: (numpy.roll(nonzero,-1) - 1) - nonzero
393/52: nonzero - (numpy.roll(nonzero,-1) - 1)
393/53: nonzero
393/54: nonzero - (numpy.roll(nonzero,-1) - 1)
393/55: newnonzero = nonzero - (numpy.roll(nonzero,-1) - 1)
393/56: newnonzero
393/57: numpy.nonzero(newnonzero)
393/58: nonzero - (numpy.roll(nonzero,1) + 1)
393/59: nonzero
393/60: (numpy.roll(nonzero,1) + 1) - nonzero
393/61: numpy.nonzero((numpy.roll(nonzero,1) + 1) - nonzero)
393/62: nonzero
393/63: nonzero = numpy.nonzero(a.flatten())[0]
393/64: numpy.nonzero((numpy.roll(nonzero,1) + 1) - nonzero)
393/65: start = numpy.nonzero((numpy.roll(nonzero,1) + 1) - nonzero)
393/66: (numpy.roll(nonzero,-1) - 1) - nonzero
393/67: numpy.nonzero((numpy.roll(nonzero,-1) - 1) - nonzero)
393/68: end = numpy.nonzero((numpy.roll(nonzero,-1) - 1) - nonzero)
393/69: start
393/70: end
393/71: end - start
393/72: start = numpy.nonzero((numpy.roll(nonzero,1) + 1) - nonzero)[0]
393/73: end = numpy.nonzero((numpy.roll(nonzero,-1) - 1) - nonzero)[0]
393/74: end - start
393/75: a.flatten()
393/76: end - start + 1
393/77: a = numpy.array([[0 , 1 , 1 , 0],[0 , 1 , 1 , 1],[0 , 0 , 1 , 1],[0 , 1 , 1 , 0]])
393/78: nonzero = numpy.nonzero(a.flatten())[0]
393/79: start = numpy.nonzero((numpy.roll(nonzero,1) + 1) - nonzero)[0]
393/80: end = numpy.nonzero((numpy.roll(nonzero,-1) - 1) - nonzero)[0]
394/1: import numpy
394/2: a = numpy.array([True , False , False , True , False , False , True , True])
394/3: a.shpae
394/4: a.shape
394/5: a.dtype
394/6: numpy.packbits(a)
394/7: numpy.packbits(a)
395/1: import numpy
395/2: numpy.array([0 , 1 , 2])
395/3: numpy.array([0 , 1 , 2])[0:1]
395/4: numpy.array([0 , 1 , 2]) + numpy.array([3 , 4 , 5])
395/5: numpy.concatenate(numpy.array([0 , 1 , 2]) , numpy.array([3 , 4 , 5]))
395/6: numpy.concatenate(numpy.array([0 , 1 , 2]) , numpy.array([3 , 4 , 5]) , axis = 0)
395/7:
arr1 = np.array([1, 2, 3])

arr2 = np.array([4, 5, 6])

arr = np.concatenate((arr1, arr2))
395/8:
arr1 = numpy.array([1, 2, 3])

arr2 = numpy.array([4, 5, 6])

arr = numpy.concatenate((arr1, arr2))
396/1: a = [0 , 1]
396/2: a[123]
396/3: a[3]
396/4: a[-123]
397/1: [1] * 10
398/1: import sounddevice
398/2: import sounddevice
399/1: import numpy
399/2: a = numpy.array([0 , 1])
399/3: numpy.repeat(a , 2)
399/4: numpy.repeat(a , [1 , 2])
399/5: numpy.repeat(a , [1 , 2 , 1 , 2])
399/6: numpy.repeat([0 , 1 , 0 , 1] , [1 , 2 , 1 , 2])
400/1: import numpy
400/2: ?numpy.packbits
400/3: 720 * 1280
401/1: ls
402/1: import cv2
402/2: cap = cv2.VideoCapture(0)
402/3: cap
402/4: ?cap.get
402/5: cap.get(cv2.CV_CAP_PROP_FRAME_WIDTH)
402/6: cap.get(cv2.CV2_CAP_PROP_FRAME_WIDTH)
402/7: cap.get(cv2.CAP_PROP_FRAME_WIDTH)
402/8: cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
402/9: cap.set(cv2.CAP_PROP_FRAME_WIDTH , 1920)
402/10: cap.set(cv2.CAP_PROP_FRAME_WIDTH , 1280)
402/11: cap.set(cv2.CAP_PROP_FRAME_WIDTH , 720.0)
402/12: size_new = cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640),cap.set(cv2.CAP_PROP_FRAME_HEIGHT,480)
402/13: size_new
402/14: 16/9
402/15: 640/480
402/16: 1280/720
402/17: 1920/1080
402/18: cap = cv2.VideoCapture(0)
402/19:
def make_1080p():
    cap.set(3, 1920)
    cap.set(4, 1080)

def make_720p():
    cap.set(3, 1280)
    cap.set(4, 720)

def make_480p():
    cap.set(3, 640)
    cap.set(4, 480)

def change_res(width, height):
    cap.set(3, width)
    cap.set(4, height)
402/20: make_720p()
402/21: def make_1080p()
402/22: make_1080p()
402/23: make_720p()
402/24: make_1080p()
403/1: import cv2
403/2: cap = cv2.VideoCapture(0)
403/3:
def make_1080p():
    cap.set(3, 1920)
    cap.set(4, 1080)

def make_720p():
    cap.set(3, 1280)
    cap.set(4, 720)

def make_480p():
    cap.set(3, 640)
    cap.set(4, 480)

def change_res(width, height):
    cap.set(3, width)
    cap.set(4, height)
403/4: make_1080p()
403/5: rect , frame = cap.read()
403/6: frame.shape
403/7: frame
403/8: rect
403/9: cap = cv2.VideoCapture(0)
403/10: rect , frame = cap.read()
403/11: frame.shape
403/12: cap = cv2.VideoCapture(1)
403/13: rect , frame = cap.read()
403/14: frame.shape
403/15: cap = cv2.VideoCapture(2)
403/16: rect , frame = cap.read()
403/17: frame.shape
403/18: cap.release()
404/1: a = [0 ,1 , 2 ,3  , 4 , 5]
404/2: a[1:100]
404/3: a[0:100]
404/4: a.sort(key = lambda x : -x)
404/5: a
404/6: ?sorted
404/7: a.sort(key = lambda x : x)
404/8: a
405/1: import numpy
405/2: arr = numpy.array([[0 , 1 , 2] , [3 , 4 , 5]])
405/3: arr
405/4: numpy.repeat(arr , 3)
405/5: arr.shape
405/6: numpy.reshape(numpy.repeat(arr , 3) , (2 , 3 , 3))
405/7: numpy.reshape(numpy.repeat(arr , 3) , (2 , 3 , 3)).shape
406/1: import cv2
407/1: import cv2
407/2: cap = cv2.VideoCapture(0)
407/3: cap = cv2.VideoCapture(1)
407/4: cap
407/5: cap.release()
407/6: cap = cv2.VideoCapture(1)
407/7: cap = cv2.VideoCapture(0)
407/8: cap.release()
407/9: cap = cv2.VideoCapture(3)
407/10: cap.release()
407/11: cap = cv2.VideoCapture(4)
407/12: cap
408/1: import poppler
408/2: pdf = poppler.load_from_file("/home/kacper/Downloads/PhysRevC.90.024001.pdf")
408/3: page_1 = pdf.create_page(0)
408/4: page_1_text = page_1.text()
408/5: page_1_text
408/6: renderer = poppler.PageRenderer()
408/7: imge = renderer.render_page(page_1)
408/8: image_data = imge.data
408/9: image_data
409/1: import cairo
409/2: import poppler
409/3: pdf = poppler.load_from_file("/home/kacper/Downloads/PhysRevC.90.024001.pdf")
409/4: page_1 = pdf.create_page(0)
409/5: page_1
409/6: pdf.get_n_pages()
409/7: pdf.pages
409/8: renderer = poppler.PageRenderer()
409/9: image = renderer.image_format
409/10: image
409/11: image = renderer.can_render(pdf)
409/12: image = renderer.can_render()
409/13: image
409/14: import cairo
409/15: cairo.PSLevel:q
410/1: import cairoo
410/2: import cairo
410/3: import poppler
410/4: pdf = poppler.load_from_file("/home/kacper/Downloads/PhysRevC.90.024001.pdf")
410/5: page_1 = pdf.create_page(0)
410/6: page_1.get_size()
411/1: import opencv
411/2: import cv2
411/3: frame = cv2.imread("./temp.png")
411/4: frame
412/1: import re
412/2: ?re.match
412/3: re.match("\d\d-\d\d-\d\d\d\d\.md" , "")
412/4: re.match("\d\d-\d\d-\d\d\d\d\.md" , "01-10-2020.md")
412/5: re.match("\d\d-\d\d-\d\d\d\d\.md" , "01-10-2020.md") == None
412/6: re.match("\d\d-\d\d-\d\d\d\d\.md" , "") == None
412/7: import datetime
412/8: datetime.date(2020 , 1 , 1)
412/9: datetime.date(2020 , 1 , 1) > datetime.date(2020 , 1 , 2)
412/10: len("---title---")
412/11: ""[0:13]
413/1: "01234567879"[0:2]
414/1: "lll.tex"[-3:]
414/2: "ex"[-3:]
416/1: import numpy
416/2: import matplotlib
416/3: ls
416/4: x = numpy.linspace(0 , 2 , 100)
416/5: x
416/6: x = numpy.linspace(0 , 2.0 * numpy.math.pi , 100)
416/7: x
416/8: y = numpy.math.sin(x)
416/9: numpy.math.sin(1.0)
416/10: numpy.math.sin([1.0])
416/11: numpy.sin(x)
416/12: import matplotlib.pyplot as plt
416/13: ?plt.plot
416/14: plt.plot([1 , 2 , 3 ,4])
416/15: plt.show()
416/16: ?numpy.arrange
416/17: ?numpy.arange
416/18: numpy.arange(50)
416/19: ?plt.plot
417/1: import matplotlib.pyplot as plt
417/2: plt.plot([1 , 2 , 3, 4] , "-")
417/3: plt.show()
417/4: ?numpy.linspace
417/5: numpy.linspace(0 , 2 , 100)
417/6: import numpy
417/7: ?numpy.linspace
418/1: import matplotlib.pyplot as plt
418/2: ?plt.annotate
419/1: import numpy
419/2: ?numpy.sqrt
419/3: numpy.pi
419/4: numpy.exp()
419/5: ?numpy.exp
419/6: ?numpy.square
419/7: a = 123
419/8: a?
419/9: %print
419/10: %
419/11: %quickref
419/12: %magick
419/13: %magic
419/14: %edit
419/15: f(123)
419/16: !ls
419/17: xit
421/1: import matplotlib.pyplot as plt
421/2: import numpy
421/3: x = numpy.linspace(0.0 , 2.0 * numpy.math.pi , 100)
421/4: x
421/5: x[1]
421/6: x[2]
421/7: x[2:10]
421/8: y = numpy.sin(x)
421/9: x
421/10: y
421/11: plt.plot(x , y)
421/12: plt.show()
421/13: y1 = numpy.sin(x)
421/14: plt.plot(x , y1)
421/15: plt.xlabel("position")
421/16: plt.ylabel("amplitude")
421/17: plt.show()
421/18: plt.plot(x , y1 , linewidth = 2.0 , linestyle = "--")
421/19: plt.xlabel("position")
421/20: plt.ylabel("$\phi$")
421/21: plt.show()
421/22: plt.plot(x , y1 , linewidth = 10.0 , linestyle = "--")
421/23: plt.xlabel("position")
421/24: plt.ylabel("amplitude")
421/25: plt.show()
421/26: y2 = numpy.cos(x)
421/27: x
421/28: plt.xlabel("position")
421/29: plt.xlabel("x")
421/30: plt.ylabel("$\phi(x)$")
421/31: plt.plot(x , y1)
421/32: plt.plot(x , y2)
421/33: plt.show()
421/34: plt.xlabel("x")
421/35: plt.ylabel("$\phi(x)$")
421/36: plt.plot(x , y1 , linestyle = "-." , color = "red")
421/37: plt.plot(x , y2 , linewidth = 4.0 , linestyle = "--")
421/38: plt.show()
421/39: plt.xlabel("x")
421/40: plt.ylabel("$\phi(x)$")
421/41: plt.plot(x , y1 , x , y2)
421/42: plt.show()
421/43: fig , ax = plt.subplots()
421/44: ax.plot(x , y1 , label = "sin")
421/45: ax.plot(x , y2 , label = "cos")
421/46: ax.legend(loc = "upper center" , shadow = False , fontsize = "small")
421/47: plt.show()
421/48: plt.plot(x , y1)
421/49: plt.annotate('point where x = 1 and y = 1' , xy = (1 , 1))
421/50: plt.show()
421/51: ls
421/52: cd ..
421/53: ls
422/1: import numpy
422/2: import scipy.integrate as integrate
422/3:
def myFunction(x):
    return numpy.sin(x)
422/4: myFunction(1.0)
422/5: integrate.quad(myFunction , 0.0 , numpy.math.pi)
422/6:
def myFunctionWithExtraParameters(x , a):
    return numpy.sin(x) + a
422/7: integrate.quad(myFunctionWithExtraParameters , 0.0 , numpy.math.pi , args = (1))
422/8:
def normal01(x):
    return (1.0 / numpy.sqrt(2.0 * numpy.pi)) * numpy.exp(-0.5 * x**2)
422/9: integrate.quad(normal01 , -1.0 , 1.0)
422/10: integrate.quad(normal01 , -1.0 , 1.0)[0]
422/11: integrate.quad(normal01 , -3.0 , 3.0)
422/12: integrate.quad(normal01 , -numpy.inf , numpy.inf)
423/1: import numpy
423/2: array = numpy.asarray([[1 , 2 , 3],[4 , 5 , 6],[7 , 8 , 9]])
423/3: numpy.savetxt("array.csv" , array , delimiter = ",")
423/4: readarray = numpy.genfromtxt("array.csv" , delimiter = ",")
423/5: readarray
423/6: readarray.astype("int")
423/7: array
424/1: import numpy
424/2: array = numpy.asarray([[1 , 2 , 3],[4 , 5 , 6],[7 , 8 , 9]])
424/3: array
424/4:
with open("myarray.csv" , "w") as f:
    for row in array:
        f.write(str(row))
424/5:
with open("myarray.csv" , "w") as f:
    for row in array:
        for el in row:
            f.write(el)
        f.write("\n")
424/6:
with open("myarray.csv" , "w") as f:
    for row in array:
        for el in row:
            f.write(str(el))
        f.write("\n")
424/7:
with open("myarray.csv" , "w") as f:
    for row in array:
        for el in row:
            f.write(str(el) + " , ")
        f.write("\n")
424/8:
with open("myarray.csv" , "w") as f:
    for row in array:
        i = 0
        for el in row:
            if(i < len(row)):
                f.write(str(el) + " , ")
            else:
                f.write(str(el))
        f.write("\n")
424/9:
with open("myarray.csv" , "w") as f:
    for row in array:
        i = 0
        for el in row:
            if(i < len(row) - 1):
                f.write(str(el) + " , ")
            else:
                f.write(str(el))
        f.write("\n")
424/10:
with open("myarray.csv" , "w") as f:
    for row in array:
        i = 0
        for el in row:
            if(i < len(row) - 1):
                f.write(str(el) + " , ")
            else:
                f.write(str(el))
            i += 1
        f.write("\n")
424/11: clear
425/1: ?print
425/2: import numpy
425/3: array = numpy.asarray([[1 , 2 , 3],[4 , 5 , 6],[7 , 8 , 9]])
425/4: array?
425/5: array?
425/6: %quickref
425/7: %edit
425/8: f(123)
425/9: !ls
425/10: !ls
425/11: !pwd
426/1: aaa , = (1 , 2 , 3)
426/2: aaa , = (1 , 2)
426/3: aaa , = (1)
426/4: aaa = (1)
426/5: (aaa) = (1)
426/6: aaa
426/7: (aaa , 2) = (1)
426/8: (aaa , 2) = (1 , 2)
427/1: import matplotlib.pyplot as plt
427/2: import numpy
427/3: x = numpy.linspace(0.0 , 2.0 * numpy.math.pi , 100)
427/4: y1 = numpy.sin(x)
427/5: plt.plot(x , y1 , "-.")
427/6: plt.show
427/7: plt.show()
427/8: y2 = numpy.cos(x)
427/9: plt.plot(x , y1 , x , y2)
428/1: "SAFS".lower()
429/1: import cv2
429/2: ?cv2.filter2D
429/3: ?cv2.filter2D
429/4: ?cv2.BORDER_REFLECT
429/5: ?cv2.imread
430/1: import ROOT
430/2: f1 = ROOT.TF1("f2","[0]*sin([1]*x)/x",0.,10.)
430/3: f1.SetParameter(0,1);
430/4: f1.SetParameter(1,1);
430/5: f1.Draw();
431/1: import ROOT
432/1: import ROOT
432/2: import numpy
432/3: root_file = ROOT.TFile("./measurements.root")
432/4: root_file
432/5: root_file.Browse()
432/6: b = ROOT.TBrowser()
432/7: root_file.Browse(b)
434/1: import ROOT
434/2: measurments = ROOT.TFile("measurements.root")
434/3: measurments
434/4: tree = ROOT.TTree(measurments)
434/5: ?ROOT.TTree
434/6: measurments.Print()
434/7: measurments.Inspect()
434/8: measurments.Dump()
434/9: tree = measurments.Get('FCS_ParametrizationInput')
434/10: tree
434/11: tree.GetListOfLeavs()
434/12: leaves = tree.GetListOfLeaves()
434/13: f = ROOT.TFile("measurements.root",'read')
434/14: tree = f.Get('FCS_ParametrizationInput')
434/15: leaves = tree.GetListOfLeaves()
434/16: tree.GetName()
435/1: import ROOT
435/2: infile = ROOT.TFile("measurements.root" , "READ")
435/3: infile.ls()
435/4: tree = infile.GET("SPTrkNtuple")
435/5: tree = infile.Get("SPTrkNtuple")
435/6: tree
435/7: tree.Show(0)
435/8: N = tree.GetEntries()
435/9: N
435/10: tree.Print()
435/11:
for b in tree.GetListOfBranches():
    print("branch:" , b.GetName())
435/12: tree.GetEntry(0)
435/13: tree.Print()
435/14: tree.spX
435/15: tree.spY
435/16: N
435/17: tree.spY[0]
435/18: tree.spY[1]
435/19: import numpy
435/20: tree.spY[1]
435/21: tree.spY[0]
435/22: tree.spZ[0]
435/23: tree.spX[0]
435/24: tree.GetEntry(1)
435/25: tree.spZ[0]
435/26: tree.GetEntry(0)
435/27: tree.GetEntry(1)
435/28: tree.GetEntry(2)
435/29: tree.GetEntry(3)
435/30: tree.GetEntry(5)
435/31: tree.GetEntry(4)
435/32: ?tree.GetEntry
435/33: tree.GetEntry(0)
435/34: tree.spZ
435/35: list(tree.spZ)
435/36: tree.AsMatrix()
435/37: tree.spX.AsMatrix()
435/38: numpy.asarray(tree.spX)
435/39: arr = numpy.asarray(tree.spX)
435/40: arr.dtype
435/41: tree.spx
435/42: tree.spX[0]
435/43: arr[0]
435/44: len(tree.spX)
435/45: len(tree.spY)
435/46: len(tree.sp)
435/47: len(tree.spZ)
435/48: len(tree.trkZ)
435/49: tree.spSize
435/50: len(tree.spSize)
435/51: list(tree.spSize)
435/52: list(tree.spUsed)
435/53: tree.spX[0]
435/54: tree.spX[124]
435/55: tree.spX[125]
435/56: tree.spX[135]
435/57: tree.spX[134]
435/58:
for i in range(135):
    print(tree.spX[i] , tree.spY[i] , tree.spZ[i])
435/59:
with open("measurments_dump" , "w") as f:
    for i in range(135):
        f.write(str(tree.spX[i]) + " " + str(tree.spY[i]) + " " + str(tree.spZ[i]))
435/60: ls
435/61:
with open("measurments_dump" , "w") as f:
    for i in range(135):
        f.write(str(tree.spX[i]) + " " + str(tree.spY[i]) + " " + str(tree.spZ[i]))
435/62:
with open("measurments_dump" , "w") as f:
    for i in range(135):
        f.write(str(tree.spX[i]) + " " + str(tree.spY[i]) + " " + str(tree.spZ[i]) + "\n")
436/1: import pygame
437/1: import pygame
437/2: import sys , pygame
437/3: pygame.init()
437/4: import numpy
437/5: delta = 0.001
437/6: numpy.tri(10 , 10 , 0 , dtype = numpy.float64)
437/7: numpy.tri(10 , 10 , dtype = numpy.float64)
437/8: numpy.tri(10 , 10 , 1, dtype = numpy.float64)
437/9: ?numpy.diag
437/10: numpy.arrange(9)
437/11: numpy.arange(9)
437/12: numpy.ones(shape = (10,))
437/13: numpy.diag(numpy.ones(shape = (10,)))
437/14: numpy.diag(numpy.ones(shape = (10,)) / (delta^2))
437/15: numpy.diag(numpy.ones(shape = (10,)) / (delta**2))
437/16: numpy.diag(numpy.ones(shape = (10,)) / (delta**2) , 1)
437/17: numpy.diag(numpy.ones(shape = (10,)) , 1)
437/18: numpy.diag(numpy.ones(shape = (10,)) , -1)
437/19: numpy.diag(numpy.ones(shape = (10,)) , -0)
437/20: length = 1
437/21: n = 100
437/22: delta = length / n
437/23: delta
437/24: numpy.diag(numpy.ones(shape = (10,)) , 0) * (1 / (delta * delta))
437/25: numpy.diag(numpy.ones(shape = (10,)) , 0) * (1 / (delta * delta))
437/26: numpy.diag(numpy.ones(shape = (10,)) , 0) * (2.0 / (delta * delta))
437/27: numpy.diag(numpy.ones(shape = (10,)) , 0) * (2.0 / (delta * delta)) + numpy.diag(numpy.ones(shape = (10,)) , -1) * (1.0 / (delta * delta))
437/28: numpy.diag(numpy.ones(shape = (10,)) , 0) * (2.0 / (delta * delta))
437/29: diag = numpy.diag(numpy.ones(shape = (10,)) , 0) * (2.0 / (delta * delta))
437/30: up = numpy.diag(numpy.ones(shape = (10-1,)) , 0) * (2.0 / (delta * delta))
437/31: up = numpy.diag(numpy.ones(shape = (10-1,)) , 1) * (2.0 / (delta * delta))
437/32: down = numpy.diag(numpy.ones(shape = (10-1,)) , -1) * (2.0 / (delta * delta))
437/33: diag + up + down
437/34: diag = numpy.diag(numpy.ones(shape = (n,)) , 0) * (-2.0 / (delta * delta)) + numpy.diag(numpy.ones(shape = (n-1,) , 1)) * (1.0 / (delta * delta)) + numpy.diag(numpy.ones(shape = (n - 1,) , -1)) * (1.0 / (delta * delta))
437/35: diag = numpy.diag(numpy.ones(shape = (n,)) , 0) * (-2.0 / (delta * delta)) + numpy.diag(numpy.ones(shape = (n-1,)) , 1) * (1.0 / (delta * delta)) + numpy.diag(numpy.ones(shape = (n - 1,) , -1)) * (1.0 / (delta * delta))
437/36: diag = numpy.diag(numpy.ones(shape = (n,)) , 0) * (-2.0 / (delta * delta)) + numpy.diag(numpy.ones(shape = (n-1,)) , 1) * (1.0 / (delta * delta)) + numpy.diag(numpy.ones(shape = (n - 1,)) , -1) * (1.0 / (delta * delta))
437/37: diag
437/38: diag.shape
437/39: diag[1;;]
437/40: diag[1;]
437/41: diag[1:]
437/42: diag[0 , -1]
437/43: diag[0 , -1] = 1.0 / (delta * delta)
437/44: diag
437/45: diag[-1 , 0] = 1.0 / (delta * delta)
437/46: diag[0 , :]
437/47: diag[-1 , :]
437/48: eig = numpy.linalg.eig(diag)
437/49: eig
437/50: eig[0]
437/51: eig[1][0]
438/1: import root
438/2: import ROOT
438/3: data = ROOT.TFile("./measurements.root")
438/4: data
438/5: data.show(1)
438/6: data.Show(1)
438/7: data.ls()
438/8: ?data.cd
438/9: data.cd("SPTrkNtuple")
438/10: data.ls()
438/11: data.Dump()
438/12: data.Print()
438/13: data.Read()
438/14: ?data.Rea
438/15: ?data.Read
438/16: ?data.read
438/17: tree = ROOT.TTree(data)
438/18: ?ROOT.TTree
438/19: data = ROOT.TTree("measurements.root")
438/20: infile = ROOT.TFile("measurements.root" , "READ")
438/21: infile.ls()
438/22: tree = infile.Get("SPTrkNtuple")
438/23: tree.Print()
438/24: tree.Show(0)
438/25: tree.Show(1)
438/26: tree.Show(2000)
438/27: tree.Show(2000).spX
438/28: tree[2000]
438/29: tree.Show(2)
438/30: tree.Print()
438/31: tree.Scan("run:evt")
438/32: tree.Scan("run:spX")
438/33: array = tree.AsMatrix()
438/34: tree.Branch
438/35: tree.Branch("spX")
438/36: tree.spX
438/37: tree.spX[0]
438/38: tree.spX[1]
438/39: tree.spX[2000]
438/40: tree.spX[3000]
438/41: tree.spX[3000000]
438/42: ROOT.ROOT.EnableImplicitMT()
438/43: arr = [[tree.spX , tree.spY , tree.spZ] for event in tree]
438/44: arr
438/45: len(arr)
438/46: arr[2]
438/47: arr[2][0]
438/48: len(arr[2][0])
438/49: import numpy
438/50: numpy.asarray(arr , dtype = numpy.float64)
439/1: import numpy , ROOT
439/2: infile = ROOT.TFile("measurements.root" , "READ")
439/3: tree = infile.Get("SPTrkNtuple")
439/4: arr = [[tree.spX , tree.spY , tree.spZ] for event in tree]
439/5: arr[0]
439/6: event = numpy.asarray(arr[0])
439/7: event.shape
439/8: event[1 , 10]
439/9: event[2 , 10]
439/10: event[3 , 10]
439/11: event[0 , 10]
439/12: event[: , 98393]
439/13: tree.Print()
439/14: tree.Branch(7)
439/15: tree.show(2)
439/16: tree.Show(2)
439/17: tree.Show(9)
439/18: tree.Show(111)
439/19: arrnew = [tree.trkZ for event in tree]
439/20: len(arrnew)
439/21: arrnew[0]
439/22: len(arrnew[0])
439/23: len(arrnew[1])
439/24: arrnew[1]
439/25: numpy.asarray(arrnew[1])
439/26: numpy.asarray(arrnew[1]).shape()
439/27: numpy.asarray(arrnew[1]).shape
439/28: for event in tree
439/29:
for event in tree:
    print(event)
439/30:
for event in tree:
    print(event.spX)
440/1: import neovim
441/1: def headline(text : str) -> str
441/2:
def headline(text : str) -> str:
    return str
441/3: headline(123)
441/4:
def headline(text : str) -> str:
    return text
441/5: headline(123)
441/6: headline("123")
441/7:
def headline(text: str) -> str:
    return text
441/8: headline("123")
441/9: headline(123)
442/1: type("123")
442/2:
class a:
    def __init__(self):
        self.x = 123
442/3: new = a()
442/4: type(new)
443/1: import neovim
443/2: import os
443/3: nvim = neovim.attach('socket', path=os.environ['NVIM_LISTEN_ADDRESS'])
443/4: nvim.current.buffer.name
443/5: %run ./pasteImage.py
443/6: m = Main(nvim)
443/7: m.doItPython([])
443/8: m.doItPython([])
443/9: m.doItPython([])
443/10: ?m.doItPython
443/11: ?nvim.command
443/12: ?nvim.call
443/13: ?nvim.eval
443/14: ?nvim
443/15: nvim.eval("call setline(\'.\' , \'123\')")
443/16: nvim.eval("setline(\'.\' , \'123\')")
443/17: nvim.eval("setline(\'.\' , \'123\')")
443/18: nvim.eval("setline(\'.\' , \'123123123123\')")
443/19: nvim.eval("setline(\'.\' , \'123123123123\')")
443/20: nvim.eval("setline(\'.\' , \'123123123123\')")
444/1: import os
444/2: os.getcwd()
444/3: os.getcwd()
445/1: import neovim
446/1: text = "Mieszkam w Krakowie na ulicy Chmieleniec."
446/2: text.reverse()
446/3: list(text)
446/4: list(text).reverse()
446/5:
def reverseString(string):
    lst = list(string)
    lst.reverse()
    return "".join(lst)
446/6: reverseString("Mieszkam w Krakowie na ulicy Chmieleniec.")
446/7: ?str.replace
446/8: text = "Mieszkam w Krakowie na ulicy Chmieleniec."
446/9:
def reverseString(string):
    string = string.lower()
    lst = list(string)
    lst.reverse()
    return "".join(lst)
446/10: reverseString(text)
446/11:
def reverseString(string):
    string = string.lower()
    string.replace("sz" , "ZS")
    string.replace("cz" , "ZC")
    string.replace("rz" , "ZR")
    lst = list(string)
    lst.reverse()
    return "".join(lst)
446/12: reverseString(text)
446/13: text
446/14:
def reverseString(string):
    string = string.lower()
    string.replace("sz" , "ZS")
    string.replace("cz" , "ZC")
    string.replace("rz" , "ZR")
    print(string)
    lst = list(string)
    lst.reverse()
    return "".join(lst)
446/15: reverseString(text)
446/16:
def reverseString(string):
    string = string.lower()
    string = string.replace("sz" , "ZS")
    string = string.replace("cz" , "ZC")
    string = string.replace("rz" , "ZR")
    print(string)
    lst = list(string)
    lst.reverse()
    return "".join(lst)
446/17: reverseString(text)
446/18:
def reverseString(string):
    string = string.lower()
    string = string.replace("sz" , "ZS")
    string = string.replace("cz" , "ZC")
    string = string.replace("rz" , "ZR")
    string = string.replace("ch" , "HC")
    print(string)
    lst = list(string)
    lst.reverse()
    return "".join(lst)
446/19:
def reverseString(string):
    string = string.lower()
    string = string.replace("sz" , "ZS")
    string = string.replace("cz" , "ZC")
    string = string.replace("rz" , "ZR")
    string = string.replace("ch" , "HC")
    lst = list(string)
    lst.reverse()
    return "".join(lst)
446/20: reverseString(text)
446/21: text = "Mie-szkam w Kra-ko-wie na u-li-cy Chmie-le-niec."
446/22: reverseString(text)
446/23: :q
447/1: text = "Mie-szkam w Kra-ko-wie na u-li-cy Chmie-le-niec."
447/2:
def reverseString(string):
    string = string.lower()
    string = string.replace("sz" , "ZS")
    string = string.replace("cz" , "ZC")
    string = string.replace("rz" , "ZR")
    string = string.replace("ch" , "HC")
    lst = list(string)
    lst.reverse()
    return "".join(lst)
447/3: reverseString(text)
447/4: reverseString("Li-two, oj-czy-zno mo-ja, ty je-steś jak zdro-wie")
447/5: reverseString("Li-two, oj-czy-zno mo-ja, ty je-steś jak zdro-wie. Ile cię ce-nić trze-ba ten tyl-ko się do-wie, kto cię stra-cił.")
447/6: reverseString("Odda-my na-sze-go pie-ska w do-bre rę-ce.")
447/7: reverseString("Spo-tka-my się w bia-łej loży.")
448/1: import os
448/2: os.path.join("/home/kacper" , "Desktop")
449/1: import subprocess
449/2: subprocess.run("xclip -selection clipboard -t image/html -o > \"`date '+%Y-%m-%d_%T'`.html\"" , shell = True)
449/3: subprocess.run("xclip -selection clipboard -t image/png -o > \"`date '+%Y-%m-%d_%T'`.png\"" , shell = True)
449/4: subprocess.run("xclip -selection clipboard -t image/png -o > \"`date '+%Y-%m-%d_%T'`.png\"" , shell = True)
449/5: run = subprocess.run("xclip -selection clipboard -t image/png -o > \"`date '+%Y-%m-%d_%T'`.png\"" , shell = True)
449/6: run.returncode
449/7: ls
449/8: 1234%1000
449/9: 1234/1000
449/10: int(1234/1000)
449/11: int(2234/1000)
449/12: int(234/1000)
449/13: int(9234/1000)
449/14: int(234/100)
449/15: int(234/10)
449/16: int(234/10) %10
449/17: int(234/10) % 10
449/18: int(234/1) % 10
449/19: int(234/100) % 10
450/1: import itertools
450/2: gen = itertools.permutations(range(1,10))
450/3: gen[123]
450/4:
for el in gen:
    print(el)
451/1: import ROOT
452/1: import numpy , ROOT
452/2: infile = ROOT.TFile("measurements.root" , "READ")
452/3: infile.ls()
452/4: tree = infile.Get("SPTrkNtuple")
452/5: ?tree.GetTree
452/6: tree.Print()
452/7:
for event in tree:
    print(tree.run)
452/8: tree.Print()
452/9: ii = 0
452/10:
for event in tree:
    ii += 1
    print(tree.run)
452/11: print(ii)
452/12: tree.Print()
452/13:
for event in tree:
    print(tree.spX)
452/14: clear()
452/15:
for event in tree:
    print(len(tree.spX))
452/16: ii = 0
452/17: tree.print()
452/18: tree.Print()
452/19: tree[0]
452/20: arr = [[tree.spX , tree.spY , tree.spZ] for event in tree]
452/21: arr[123]
452/22: arr[123][0]
452/23: len(arr[123][0])
452/24: len(arr[123][1])
452/25: len(arr[123][2])
452/26:
for event in tree:
    print(event.run)
452/27: tree.Print()
452/28:
for event in tree:
    print(event.evt)
452/29: tree.Print()
452/30:
for event in tree:
    print(event.lb)
452/31: tree.Print()
452/32:
for event in tree:
    print(event.trKZ)
452/33:
for event in tree:
    print(event.trkZ)
452/34: spSize = [tree.spSize for event in tree]
452/35: spSize
452/36: spSize[0]
452/37: len(spSize[0])
452/38: tree.Print()
452/39: spUsed = [tree.spUsed for event in tree]
452/40: spUsed
452/41: len(spUsed[11])
452/42: tree.Print()
452/43:
for event in tree:
    print(tree.evt)
452/44: arr[111]
452/45: len(arr[111][0])
452/46: tree.Print()
452/47:
for event in tree:
    print(tree.lb)
452/48: tree.Print()
452/49: tree.Show()
452/50: browser = ROOT.TBrowser()
452/51: infile.ls()
452/52: tree1 = infile.Get("SPTrkNtuple;1")
452/53: tree1.show()
452/54: tree1.Show()
452/55: tree1.Print()
452/56: tree.Print()
452/57: tree1.Print()
452/58: tree = infile.Get("SPTrkNtuple")
452/59: tree.Print()
453/1: import ROOT
453/2: infile = ROOT.TFile("measurements.root" , "READ")
454/1: import ROOT
454/2: infile = ROOT.TFile("measurements.root" , "READ")
454/3: tree = infile.Get("SPTrkNtuple")
454/4: tree.Print()
455/1: from scipy.state import norm
455/2: import scipy.stats
455/3: ?scipy.stats.norm
455/4: scipy.stats.norm.ppf(0.01)
455/5: scipy.stats.norm.ppf(0.99)
455/6: ?scipy.stats.norm
455/7: ?scipy.stats.norm
455/8: ?scipy.stats.norm
455/9: ?scipy.stats.norm.rvs
455/10: ?plt.hist
455/11: import matplotlib as plt
455/12: ?plt.hist
455/13: import matplotlib.plot as plt
455/14: import matplotlib.pyplot as plt
455/15: ?plt.hist
455/16: import numpy
455/17: import scipy.stats as sts
455/18: a = sts.norm.rvs(size = 123)
455/19: b = sts.norm.rvs(size = 321)
455/20: numpy.concatenate((a , b))
456/1: import numpy
456/2: import matplotlib.pyplot as plt
456/3: import scipy.stats as sts
456/4: sts.norm.pdf(0.0)
456/5: a = sts.norm.ppf(0.01)
456/6: a
456/7: b = sts.norm.ppf(1.0 - 0.01)
456/8: b
456/9: numpy.linspace(0.1 , 0.8 , 111)
456/10: arg = numpy.linspace(a , b , 100)
456/11: arg
456/12: sts.norm.pdf(a)
456/13: sts.norm.pdf(b)
456/14: sts.norm.pdf(0.0)
456/15: plt.title("NORMAL DISTRIBUTION")
456/16: plt.xlabel("x")
456/17: plt.ylabel("f(x)")
456/18: vls = sts.norm.pdf(arg)
456/19: vls
456/20: plt.plot(arg , vls)
456/21: plt.show()
456/22: sts.norm.rvs()
456/23: sts.norm.rvs()
456/24: sts.norm.rvs()
456/25: sts.norm.rvs()
456/26: sts.norm.rvs()
456/27: sts.norm.rvs()
456/28: sts.norm.rvs()
456/29: sts.norm.rvs()
456/30: sts.norm.rvs()
456/31: sts.norm.rvs()
456/32: sts.norm.rvs(size = 10)
456/33: sts.norm.rvs(size = 10)
456/34: sts.norm.rvs(size = 10)
456/35: sts.norm.rvs(size = 10)
456/36: gen = sts.norm.rvs(size = 1000)
456/37: gen
456/38: plt.title("COMPARE")
456/39: plt.xlabel("x")
456/40: plt.plot(arg , vls , label = "PDF")
456/41: ?plt.hist
456/42: plt.hist(gen , density = True , label = "HISTOGRAM")
456/43: plt.legend()
456/44: plt.show()
456/45: import scipy.integrate as integrate
456/46: integrate.quad(sts.norm.pdf , -1.0 , 1.0)
456/47: sts.norm.ppt(0.01)
456/48: sts.norm.ppf(0.01)
456/49: sts.norm.cdf(1.0) - sts.norm.cdf(-1.0)
456/50: vals1 = sts.norm.rvs(size = 3210)
456/51: vals2 = sts.norm.rvs(size = 1230)
456/52: vals1.shape
456/53: vals2.shape
456/54: vals = numpy.concatenate((vals1 , vals2))
456/55: vals.shape
456/56: numpy.mean(vals)
456/57: numpy.std(vals)
457/1: import ROOT
458/1: a = [[1 , 2] , [3 , 4]]
458/2: a[1,1]
458/3: a[1;1]
458/4: a[1;;1]
458/5: a[1:1]
458/6: a[1:2]
458/7: a[1:2]
458/8: numpy.array([1. , 2. , 3.])
458/9: import numpy
458/10: numpy.array([1. , 2. , 3.])
458/11: numpy.array([[1. , 2. , 3.] , [3. , 2. , 1.]]) - numpy.array([10. , 10. , 10.])
458/12:
def mf(x):
    return x[1]
458/13: mf(numpy.array([[1. , 2. , 3.] , [3. , 2. , 1.]]))
458/14: from scipy.spatial.transform import Rotation as R
458/15: r = R.from_quat([0, 0, np.sin(np.pi/4), np.cos(np.pi/4)])
458/16: r = R.from_quat([0, 0, numpy.sin(np.pi/4), numpy.cos(np.pi/4)])
458/17: r = R.from_quat([0, 0, numpy.sin(numpy.pi/4), numpy.cos(numpy.pi/4)])
458/18: r
458/19: ?r.apply
458/20: from matplotlib.colors import LogNorm
458/21: import matplotlib.pyplot as plt
458/22: import numpy as np
458/23: x = np.random.randn(100000)
458/24: y = np.random.randn(100000) + 5
458/25: plt.hist2d(x, y, bins=40, norm=LogNorm())
458/26: plt.colorbar()
458/27: plt.show()
458/28: plt.hist2d(x, y)
458/29: plt.show()
458/30: :q
459/1: import scipy.spatial.transform assst
459/2: import scipy.spatial.transform as sst
459/3: rot = sst.Rotation.from_rotvec(3.14 * [0. , 0. , 1.])
459/4: import numpy
459/5: rot = sst.Rotation.from_rotvec(numpy.pi * numpy.array([0. , 0. , 1.]))
459/6: rot
459/7: rot.apply([0. , 0. , 1.])
459/8: rot.apply([0. , 1. , 1.])
459/9: rot.apply([1. , 1. , 1.])
459/10: ?rot = sst.Rotation.from_mrp
459/11: ?sst.Rotation.from_mrp
459/12: ?sst.Rotation.from_euler
459/13: rot.as_matrix()
459/14: tst = numpy.array([[1. , 2. , 3.] , [3. , 2. , 1.]])
459/15: zdir = numpy.zeros(tst.shape , dtype = numpy.float64)
459/16: zdir
459/17: zdir[: , 2] = arr[: , 2]
459/18: zdir[: , 2] = tst[: , 2]
459/19: zdir
459/20: sst.Rotation.from_rotvec(zdir)
459/21: (sst.Rotation.from_rotvec(zdir)).apply(tst)
459/22: sst.Rotation.from_rotvec([0. , 0. , 3.]).apply([1 , 2 , 3])
459/23: sst.Rotation.from_rotvec([0. , 0. , 1.]).apply([3 , 2 , 1])
459/24: input("?")
459/25: bool("T")
459/26:
while True:
    print(1)
459/27: cont = input("Continue? [n/Y]")
460/1: for i in range(10)
460/2:
for i in range(10):
    print(float(i))
460/3: abs(123.2)
460/4: abs(-123.2)
461/1: import cv2
461/2: import numpy
461/3: image = cv2.imread("./sample_image.png")
461/4: ?cv2.imread
462/1: import numpy
462/2: import cv2
462/3: image = cv2.imread("./sample_image.png")
462/4: cv2.imshow(image)
462/5: cv2.imshow('image' , image)
462/6: cv2.destroyAllWindows()
462/7: image.shape
462/8: cv2.imshow('image' , image)
462/9: cv2.imshow('image' , image)
462/10: cv2.destroyAllWindows()
463/1: import numpy
463/2: import cv2
463/3: image = cv2.imread("./sample_image.png")
463/4: cv2.imshow('image' , image)
463/5: cv2.waitKey(0)
463/6: cv2.destroyAllWindows()
463/7: ?cv2.waitKey
464/1: import numpy
464/2: ?numpy.diag
466/1: import numpy
466/2: import cv2
466/3: ls
466/4: image = cv2.imread("./sample_image.png")
466/5: type(image)
466/6: image.dtype
466/7: image.shape
466/8: cv2.imshow("image" , image)
466/9: cv2.waitKey(0)
466/10: cv2.destroyAllWindows()
466/11: gray = cv2.cvtColor(image , cv2.COLOR_BGR2GRAY)
466/12: type(gray)
466/13: gray.dtype
466/14: gray.shape
466/15: gray = 255 - gray
466/16: type(gray)
466/17: gray.dtype
466/18: gray.shape
466/19: cv2.imshow('image' , gray)
466/20: cv2.waitKey(0)
466/21: cv2.destroyAllWindows()
466/22: border = 5
466/23: gray[0:border , :] = 0
466/24: gray[gray.shape[0] - border : gray.shape[0] , :] = 0
466/25: gray[: , 0:border] = 0
466/26: gray[: , gray.shape[1] - border : gray.shape[1]] = 0
466/27: cv2.imshow('image' , gray)
466/28: cv2.waitKey(0)
466/29: cv2.destroyAllWindows()
466/30: gray = gray.astype("float64")
466/31: gray.shape
466/32: gray.dtype
466/33: kernelSize = 300
466/34: blur_kernel = numpy.ones((kernelSize , kernelSize) , dtype = numpy.float64)
466/35: blur_kernel.shape
466/36: blur_kernel.dtype
466/37: blur_kernel = blur_kernel / numpy.sum(blur_kernel.flatten())
466/38: blured_gray = cv2.filter2D(gray , -1 , blur_kernel)
466/39: cv2.imshow('image' , blured_gray.astype("uint8"))
466/40: cv2.waitKey(0)
466/41: cv2.destroyAllWindows()
466/42: ((gray - blured_gray) * (gray - blured_gray)).shape
466/43: (((gray - blured_gray) * (gray - blured_gray))).flatten().shape
466/44: 720 * 1280
466/45: numpy.mean((((gray - blured_gray) * (gray - blured_gray))).flatten())
466/46: numpy.sqrt(numpy.mean((((gray - blured_gray) * (gray - blured_gray))).flatten()))
466/47: stdv = numpy.sqrt(numpy.mean((((gray - blured_gray) * (gray - blured_gray))).flatten()))
466/48: hls = cv2.cvtColor(image , cv2.COLOR_BGR2HLS)
466/49: hls.shape
466/50: l_res = 255.0 * numpy.ones(shape = gray.shape , dtype = numpy.float64)
466/51: l_res.shape
466/52: l_res.dtype
466/53: ?numpy.where
466/54: l_res = numpy.where((gray - blured_gray) > stdv , hls[: , : , 1] , l_res)
466/55: l_res.shape
466/56: h_res = hls[: , : , 0]
466/57: s_res = hls[: , : , 2]
466/58: l_res = l_res.astype("uint8")
466/59: h_res.dtype
466/60: result = cv2.cvtColor(cv2.merge((h_res , l_res , s_res)) , cv2.COLOR_HLS2BGR)
466/61: result.shape
466/62: result.dtype
466/63: cv2.imshow('image' , result)
466/64: cv2.waitKey(0)
466/65: cv2.destroyAllWindows()
467/1: import ROOT
467/2: infile = ROOT.TFile("./HitsSave.root" , "READ")
467/3: infile.ls
467/4: infile.ls()
467/5: tree = infile.Get("Hits")
467/6: tree
467/7: tree.Print()
467/8: event = 111
467/9: ii = 0
467/10:
for event in tree:
    print(ii , len(event.spX))
    ii += 1
467/11:
ii = 0
for event in tree:
    print(ii , len(event.spX) len(event.spY) , len(event.spZ))
    ii += 1
467/12:
ii = 0
for event in tree:
    print(ii , len(event.spX) , len(event.spY) , len(event.spZ))
    ii += 1
467/13:
ii = 0
for event in tree:
    print(ii , len(tree.spX) , len(tree.spY) , len(tree.spZ))
    ii += 1
467/14:
ii = 0
for event in tree:
    print(ii , len(event.spX) , len(event.spY) , len(event.spZ))
    ii += 1
467/15: tree.Print()
467/16:
ii = 0
for event in tree:
    print(ii , len(event.spX) , len(event.spY) , len(event.spZ) , len(event.trkPhi))
    ii += 1
467/17: tree.Print()
467/18:
ii = 0
for event in tree:
    print(ii , len(event.spX) , len(event.spY) , len(event.spZ) , len(event.trkPhi) , len(event.trkPt))
    ii += 1
467/19: tree.Print()
467/20:
ii = 0
for event in tree:
    print(ii , len(event.spX) , len(event.spY) , len(event.spZ) , len(event.trkPhi) , len(event.trkQ))
    ii += 1
467/21:
ii = 0
for event in tree:
    print(ii , list(len(event.trkQ)))
    ii += 1
467/22:
ii = 0
for event in tree:
    print(ii , list(event.trkQ))
    ii += 1
467/23:
ii = 0
for event in tree:
    print(ii , event.trkQ)
    ii += 1
467/24: tree.Print()
467/25:
ii = 0
for event in tree:
    print(ii , event.trkZ0)
    ii += 1
468/1: import ROOT
468/2: infile = ROOT.TFile("./HitsSave.root" , "READ")
468/3: print(infile.ls())
468/4: tree = infile.Get("Hits")
468/5: tree1 = infile.Get("Hits;1")
468/6: tree.Print()
468/7: tree.ls()
468/8: tree1
468/9: tree1.ls()
468/10:
for element in tree1:
    print(element)
468/11: infile = ROOT.TFile("./HitsSave.root" , "READ")
468/12: tree = infile.Get("Hits")
468/13: tree.ls()
468/14: tree.Print()
468/15: infile = ROOT.TFile("./HitsSave.root" , "READ")
468/16: tree = infile.Get("Hits;1")
468/17: tree.ls()
468/18: tree.Print()
468/19: infile = ROOT.TFile("./HitsSave.root" , "READ")
468/20: tree = infile.Get("Hits;1")
468/21: infile = ROOT.TFile("./HitsSave.root" , "READ")
468/22: tree = infile.Get("Hits")
468/23: tree.Print()
468/24: len(tree)
468/25: eventNum = 1211
468/26: ii = 0
468/27:
for event in tree:
     print(ii , len(event.spX) , len(event.spY) , len(event.spZ))
468/28:
for event in tree:
     print(ii , len(event.spX) , len(event.spY) , len(event.spZ))
     ii += 1
468/29:
ii = 0
for event in tree:
     print(ii , len(event.spX) , len(event.spY) , len(event.spZ))
     ii += 1
468/30: tree.Print()
468/31:
ii = 0
for event in tree:
     print(ii , len(event.spX) , len(event.spY) , len(event.spZ) , len(event.trkPhi) , len(event.trkPt) , len(event.trkD0))
     ii += 1
468/32: tree.Print()
468/33:
ii = 0
for event in tree:
     print(ii , len(event.spX) , len(event.spY) , len(event.spZ) , len(event.trkPhi) , len(event.trkPt) , len(event.trkD0) , len(event.trkZ0))
     ii += 1
468/34: tree.Print()
468/35:
ii = 0
for event in tree:
     print(ii , len(event.spX) , len(event.spY) , len(event.spZ) , len(event.trkPhi) , len(event.trkPt) , len(event.trkD0) , len(event.trkZ0) , len(event.trkQ))
     ii += 1
468/36:
ii = 0
for event in tree:
    if(ii == 909):
        print(ii , len(event.spX) , len(event.spY) , len(event.spZ) , len(event.trkPhi) , len(event.trkPt) , len(event.trkD0) , len(event.trkZ0) , len(event.trkQ))
    ii += 1
468/37: arr = None
468/38: pts = None
468/39: helix = None
468/40: import numpy
468/41:
ii = 0
for event in tree:
    if(ii == 909):
        print(ii , len(event.spX) , len(event.spY) , len(event.spZ) , len(event.trkPhi) , len(event.trkPt) , len(event.trkD0) , len(event.trkZ0) , len(event.trkQ))
        pts = numpy.asarray([event.spX , event.spY , event.spZ])
    ii += 1
468/42: pts
468/43:
ii = 0
for event in tree:
    if(ii == 909):
        print(ii , len(event.spX) , len(event.spY) , len(event.spZ) , len(event.trkPhi) , len(event.trkPt) , len(event.trkD0) , len(event.trkZ0) , len(event.trkQ))
        pts = numpy.asarray([event.spX , event.spY , event.spZ])
        helix = numpy.asarray([event.trkPhi , event.trkPt , event.trkD0 , event.trkZ0])
    ii += 1
468/44: helix
468/45: import matplotlib.pyplot as plt
468/46: fig = plt.figure()
468/47: ax = fig.add_subplot(111 , projection = "3d")
468/48: ax.set_xlabel("X")
468/49: ax.set_ylabel("Y")
468/50: ax.set_zlabel("Z")
468/51: ax.scatter(pts[: , 0] , pts[: , 1] , pts[: , 2])
468/52: plt.show()
468/53: pts
468/54: fig = plt.figure()
468/55: ax = fig.add_subplot(111 , projection = "3d")
468/56: ax.set_xlabel("X")
468/57: ax.set_ylabel("Y")
468/58: ax.set_zlabel("Z")
468/59: ax.scatter(pts[0] , pts[1] , pts[2])
468/60: plt.show()
468/61: :q
469/1: import ROOT
469/2: infile = ROOT.TFile("./HitsSave.root" , "READ")
469/3: tree = infile.Get("Hits")
469/4: tree.ls()
469/5: tree.Print()
469/6:
for event in tree:
    print(event.trkPt)
469/7: tree.Print()
470/1: print("This is a string of characters!")
470/2: ?print
471/1: import fancy_module
472/1: import fancy_module
472/2: addtwo(1 , 2)
472/3: fancy_module.addtwo(1 , 2)
473/1: myint = 7
473/2: print(myint)
473/3: type(myint)
473/4: myfloat = 7.0
473/5: print(myfloat)
473/6: myfloat
473/7: type(myfloat)
473/8: str(myint)
473/9: str(myfloat)
473/10: float("7.0")
473/11: float("7.0") + 1.0
473/12: int("123")
473/13: int("123") + 1
473/14: myString = "Hello World!"
473/15: type(myString)
473/16: myOtherString = " This is Kacper!"
473/17: print(myString + myOtherString)
473/18: myString + myOtherString
473/19: type(myString + myOtherString)
473/20: ?str
473/21: a , b = 3 , 4
473/22: a
473/23: b
473/24: import fancy_module
473/25: from fancy_module import addtwo
473/26: addtwo(1,2)
473/27: import fancy_module
473/28: fancy_module.addtwo(1 , 2)
474/1: False
475/1: import re
475/2: ?re.findall
475/3: re.findall(r'$. ' , "echo $1 $2")
475/4: re.findall(r'\$. ' , "echo $1 $2")
475/5: re.findall(r'\$. ' , "echo $1  $2")
475/6: re.findall(r'\$.' , "echo $1  $2")
475/7: re.findall(r'\$\d' , "echo $1  $2")
475/8: set(re.findall(r'\$\d' , "echo $1  $2"))
475/9: set(re.findall(r'\$\d' , "echo $1  $1"))
475/10: import subprocess
475/11: subprocess.run(["ls"])
476/1:
def fun(x):
    return x
476/2: type(fun)
476/3: ?isinstance
476/4: isinstance(fun , function)
476/5: isinstance(fun , f:qunction)
477/1: list = [0 , 1 , 2 , 2 , 2 , 2]
477/2: set(list)
477/3: list(set(list))
477/4: li = [0 , 1 , 2 , 2 , 2 , 2]
477/5: list(set(li))
478/1: li = [0 , 1 , 2 , 2 , 2 , 2]
478/2: list(set(li))
479/1: [0 , 1 , 2 , 3]
479/2: str([0 , 1 , 2])
479/3: myFancyList = [0 , 1 , 2 , 3]
479/4: myFancyList = [0 , 123.321 , 2 , "123"]
479/5: myFancyList.append("This is a new element")
479/6: myFancyList
479/7: myFancyList[0]
479/8: myFancyList[1]
479/9: myFancyList[3]
479/10: myFancyList[-1]
479/11: myFancyList
479/12: myFancyList[-2]
479/13: myFancyList[-3]
479/14: myFancyList[100]
479/15: len(myFancyList)
480/1: "123".split('')
480/2: list("123")
479/16: [0] + [1 , 2 , 3]
479/17: list("A quick brown fox jumpes over a lazy dog.")
479/18: set(list("A quick brown fox jumpes over a lazy dog."))
479/19: list(set(list("A quick brown fox jumpes over a lazy dog.")))
479/20: [0] + [1 , 2 , 3]
479/21: 1+ 23
479/22: 23 % 4
479/23: 23 ** 4
479/24: 23 ** 2
479/25: "A quick brown fox " + "jumpes over a lazy dog"
479/26: "-" * 10
479/27: "A" * 10
479/28: "AB" * 10
479/29: "~" * 10 + "A quick brown fox"
479/30: "123" * "abc"
479/31: [1 , 2 , 3] * 3
479/32: [0 , 1 , 2 , 3] * 2
481/1: import sys
481/2: ?sys.stdin.flush
481/3: ?sys.stdin.close
481/4: ?sys.stdin.flush
482/1: import sys
482/2: sys.stdin.isatty()
482/3: ?sys.stdin.isatty()
482/4: ?sys.stdin.isatt
482/5: ?sys.stdin.isatty
482/6: ?sys.stdin.closed
482/7: sys.stdin.detach
482/8: ?sys.stdin.detach
484/1: import ast
485/1: dct = {"a" : 1 , "b" : 2}
485/2: dct.a
485/3: dct["a"]
486/1: :q
487/1: import urllib.request
487/2: url = "https://datahub.io/core/natural-gas/r/monthly.csv"
487/3: urllib.request(url , "./")
487/4: urllib.request.urlretrieve(url , "./")
487/5: urllib.request.urlretrieve(url , "./data.csv")
488/1: import tempfile
488/2: ?tempfile.mkdtemp
489/1: import scipy
491/1: import pyHook
492/1: import pymouse
493/1: "A.B.C".split(".")
493/2: pathfrags = "A.B.C".split(".")
493/3: pathfrags
493/4:
for maxf in range(1 , len(pathfrags) + 1):
    print(".".join(pathfrags[:maxf]))
494/1: from calendar import Calendar , monthrange
494/2: Calendar().itermonthdays(2021 , 1)
494/3: list(Calendar().itermonthdays(2021 , 1))
494/4: list(Calendar().itermonthdays(2021 , 2))
494/5: list(Calendar().itermonthdays(2021 , 3))
494/6: list(Calendar().itermonthdays(2021 , 4))
494/7: !cal
494/8: !cal 2
494/9: !cal 2021
494/10: :q
495/1: from calendar import Calendar
495/2: ?Calendar
495/3: from calendar import Calendar , monthrange
495/4: list(Calendar().itermonthdays(2021 , 4))
495/5: len(Calendar().itermonthdays(2021 , 4))
495/6: list(Calendar().itermonthdays(2021 , 4));:q
496/1: import numpy
496/2: ?numpy.zeros
497/1: import numpy
497/2: ?numpy.any
498/1: "-" * (10)
498/2: "-" * (-10)
498/3: "-" * (0)
499/1: 10 % 2
501/1: import cProfile
501/2: import re
501/3: cProfile.run('re.compile("foo|bar")')
501/4:
def fun(num):
    result = 1.0
    for i in range(num * num * num):
        result = result * 1.0
    return result
501/5: fun(100)
501/6:
def fun(num):
    result = 1.0
    for i in range(num * num * num):
        result = (result + 1) * 2 - result - 2
    return result
501/7: fun(10)
501/8: fun(100)
501/9:
def nuf(num):
    result = 0.0
    for i in range(num):
        result += fun(i)
501/10: nuf(100)
501/11: cProfile.run('nuf(100)')
502/1: :q
503/1: :%edit
503/2:
def fun(num):
    result = 1.0
    for i in range(num * num * num):
        result = (result + 1) * 2 - result - 2
    return result
503/3:
def fun(num):
    result = 1.0
    for i in range(num * num * num):
        result = (result + 1) * 2 - result - 2
    return result
    %edit
503/4:
def fun(num):
    result = 1.0
    for i in range(num * num * num):
        result = (result + 1) * 2 - result - 2
    return result
503/5: %edit _4
503/6: %edit 4
503/7:
def nuf(num):
    result = 0.0
    for i in range(num):
        result += fun(i)
    return result
503/8: nuf(100)
503/9: %edit 7
504/1: import mod
504/2: mod.nuf(100)
504/3: import cProfile
504/4: cProfile.run('mod.nuf(100)')
504/5: cProfile.run('mod.nuf(100)' , "mod_nuf_cProfile")
504/6: ls
504/7: import pstats
504/8: p = pstats.Stats("mod_nuf_cProfile")
504/9: p
504/10: p.strip_dirs()
504/11: p.strip_dirs().sort_stats(-1)
504/12: p.strip_dirs().sort_stats(-1).print_stats()
504/13: from pstats import SortKey
504/14: p.sort_stats(SortKey.NAME)
504/15: p.print_stats()
504/16: p.print_callers()
505/1: import cv2
505/2: ls
505/3: ?cv2.imread
506/1: import cv2
506/2: ?cv2.rotate
506/3: cv2.ROTATE_90_CLOCKWISE
506/4: cv2.ROTATE_90_COUNTERCLOCKWISE
506/5: ?cv2.warp
506/6: cv2.warpPerspective
506/7: ?cv2.warpPerspective
506/8: xrandr
507/1: :q
508/1: import makesvg
508/2: makesvg.svgData
508/3: makesvg.svgData()
508/4: makesvg.svgData().pre
508/5: import makesvg
508/6: makesvg.svgData().pre
509/1: import makesvg
509/2: makesvg.svgData().pre
509/3: makesvg.svgData()._pre
510/1: makesvg.svgData().pre
510/2: import makesvg
510/3: makesvg.svgData()._pre
510/4: makesvg.svgData().__pre
510/5: makesvg.svgData.mro
512/1: import example1
512/2: import manim
512/3: manim.ThreeDScene
513/1: import tempfile
513/2: import os
513/3:
datafile = os.path.join(tempfile.mkdtemp() , "set_5_data.csv")
print("datafile : " , datafile)
513/4: import urllib.request
513/5: url = "https://gist.githubusercontent.com/nstokoe/7d4717e96c21b8ad04ec91f361b000cb/raw/bf95a2e30fceb9f2ae990eac8379fc7d844a0196/weight-height.csv"
513/6: urllib.request.urlretrieve(url , datafile)
513/7: import pandas
513/8: data = pandas.read_csv(datafile)
513/9: print("type(data) : " , type(data))
513/10: datanp = data["Height"].to_numpy()
513/11: import matplotlib.pyplot as plt
513/12: from scipy import stats
513/13: npp = stats.probplot(datanp , plot = plt)
513/14: npp
513/15: plt.show()
514/1: import matplotlib.pyplot as plt
514/2: from scipy import stats
514/3: ?stats.norm
514/4: x = stats.norm(loc = 10 , scale = 5)
514/5: x
514/6: x = stats.norm.rvs(loc = 10 , scale = 5 , size = 100)
514/7: x
514/8: x = stats.norm.rvs(loc = 10 , scale = 5 , size = 10000)
514/9: plt.hist(x , density = True)
514/10: plt.show()
514/11: npp = stats.probplot(x , plot = plt)
514/12: npp
514/13: plt.show()
514/14: x = stats.norm.rvs(size = 10000)
514/15: npp
514/16: plt.show()
514/17: npp = stats.probplot(x , plot = plt)
514/18: npp
514/19: plt.show()
515/1: from manim import *
515/2: ?Circle
515/3: c = Circle()
515/4: ?c.move_to
518/1: import tempfile
518/2: import os
518/3: tempfile.mkdtemp()
518/4: datafile = os.path.join(tempfile.mkdtemp() , "set_6_data.csv")
518/5: datafile
518/6: import urllib.request
518/7: url = "https://gist.githubusercontent.com/nstokoe/7d4717e96c21b8ad04ec91f361b000cb/raw/bf95a2e30fceb9f2ae990eac8379fc7d844a0196/weight-height.csv"
518/8: url
518/9: urllib.request.urlretrieve(url , datafile)
518/10: import pandas
518/11: data = pandas.read_csv(datafile)
518/12: dat
518/13: data
518/14: type(data)
518/15: datanp = date["Height"]
518/16: datanp = data["Height"]
518/17: datanp = data["Height"]
518/18: type(datanp)
518/19: datanp
518/20: datanp = data["Height"].t
518/21: datanp = data["Height"].to_numpy()
518/22: type(datanp)
518/23: datanp
518/24: datanp.dtype
518/25: datanp.shape
518/26: import matplotlib.pyplot as plt
518/27: plt.title("height")
518/28: plt.xlabel("height")
518/29: plt.ylabel("PDF")
518/30: plt.hist(datanp , density = True)
518/31: plt.show()
518/32: from scipy import stats
518/33: npp = stats.probplot(datanp , plot = plt)
518/34: npp
518/35: plt.show()
518/36: sw = stats.shapiro(datanp)
518/37: sw
518/38: sw.statistic
518/39: sw.pvalue
518/40: datanorm = stats.norm.rvs(size = 1000)
518/41: swnorm = stats.shapiro(datanorm)
518/42: swnorm
518/43: swnorm.statistic
518/44: swnorm.pvalue
519/1: set('aaaaaaaaaaaaaa')
519/2: ?count
519/3: [1 , 2 , 3 , 4].count(3)
519/4: [1 , 2 , 3 , 4].count(4)
520/1: import pygame
521/1: import pygame
521/2: ?pygame.time.Clock.tick
521/3: ?pygame.time.Clock().tick
521/4: clock = pygame.time.Clock()
521/5: ?clock.tick
522/1: import pygame
523/1: map(int , "640x480".split("x"))
523/2: width , height = map(int , "640x480".split("x"))
523/3: width
523/4: height
524/1: [].append(1)
524/2: a = []
524/3: a.append(1)
524/4: a
524/5: 11%10
525/1: import cProfile
526/1: import pstats
526/2: ?pstats
527/1: import pstats
527/2: p = pstats.Stats("./cloneAndReplace_profile_functions_unlocked.py.pstats")
527/3: p.print_stats()
527/4: p.strip_dirs().sort_stats(-1).print_stats()
528/1: p.strip_dirs().sort_stats(-1).print_stats()
529/1: [1 , 2, 3].pop()
529/2: a = [1 , 2 , 3]
529/3: a.pop()
529/4: a.pop()
529/5: a.pop()
529/6: a.pop()
530/1: [0 , 1 , 2 , 3][0:-1]
531/1: from scipy import stats
532/1: 1/0
532/2: NaN
532/3: nan
533/1: [print('123') for _ in range(10)]
535/1: from datetime import date
535/2: import holidays
535/3: pl_holidays = holidays.Poland()
535/4: pl_holidays
535/5: us_holidays = holidays.UnitedStates()
535/6: us_holidays
535/7: date(2015, 1, 1) in us_holidays
535/8: date(2015, 1, 2) in us_holidays
536/1: from calendar import Calendar , monthrange
536/2: list(Calendar().itermonthdates())
536/3: list(Calendar().itermonthdates(2021 , 4))
536/4: list(Calendar().itermonthdays(2021 , 4))
536/5: list(Calendar().itermonthdays2(2021 , 4))
536/6: list(Calendar().itermonthdays2(2021 , 0))
536/7: list(Calendar().itermonthdays2(2021 , 1))
536/8: list(Calendar().itermonthdays(2021 , 1))
536/9: list(Calendar().itermonthdates(2021 , 1))
536/10: list(Calendar().itermonthdays(2021 , 4))
536/11: q
537/1: abs(-1)
538/1: import cairo
538/2:
with cairo.SVGSurface("example.svg", 200, 200) as surface:
    context = cairo.Context(surface)
    x, y, x1, y1 = 0.1, 0.5, 0.4, 0.9
    x2, y2, x3, y3 = 0.6, 0.1, 0.9, 0.5
    context.scale(200, 200)
    context.set_line_width(0.04)
    context.move_to(x, y)
    context.curve_to(x1, y1, x2, y2, x3, y3)
    context.stroke()
    context.set_source_rgba(1, 0.2, 0.2, 0.6)
    context.set_line_width(0.02)
    context.move_to(x, y)
    context.line_to(x1, y1)
    context.move_to(x2, y2)
    context.line_to(x3, y3)
    context.stroke()
538/3: ls
539/1: import cairo
539/2:
with cairo.SVGSurface("example.svg", 200, 200) as surface:
    context = cairo.Context(surface)
    x, y, x1, y1 = 0.1, 0.5, 0.4, 0.9
    x2, y2, x3, y3 = 0.6, 0.1, 0.9, 0.5
    context.scale(200, 200)
    context.set_line_width(0.04)
    context.move_to(x, y)
    context.curve_to(x1, y1, x2, y2, x3, y3)
    context.stroke()
    context.set_source_rgba(1, 0.2, 0.2, 0.6)
    context.set_line_width(0.02)
    context.move_to(x, y)
    context.line_to(x1, y1)
    context.move_to(x2, y2)
    context.line_to(x3, y3)
    context.stroke()
540/1:
class temp:
    def __init__(self):
        self._temp = 0
    def mod(self):
        self._temp = 1
540/2:
class temp:
    def __init__(self):
        self._temp = 0
    def mod(self):
        new = temp()
        temp._temp = 1
        return new
    def getVal(self):
        return self._temp
540/3: temp().getVal()
540/4: temp().mod()
540/5: temp().mod().getVal()
540/6: a = temp()
540/7: a.getVal()
540/8: a._temp
540/9: b = a.mod()
540/10: b.getVal()
540/11:
class temp:
    def __init__(self):
        self._temp = 0
    def mod(self):
        new = temp()
        new._temp = 1
        return new
    def getVal(self):
        return self._temp
540/12: a = temp()
540/13: a.getVal()
540/14: b = a.mod()
540/15: b.getVal()
542/1: from sklearn.cluster import KMeans
542/2: import sklearn.cluster
543/1: import cv2
543/2: ?cv2.Canny
544/1: import numpy
544/2: a = numpy.array([1.5 , 2.1 , 3.4] , dtype = numpy.float64)
544/3: a
544/4: a.astype(numpy.uint8)
544/5: (a + 0.5).astype(numpy.uint8)
545/1: import cv2
545/2: ?cv2.Canny
546/1: import cv2
546/2: ?cv2.threshold
547/1: import functools
547/2: from functools import *
547/3:
@cache
def factorial(n):
    return n * factorial(n-1) if n else 1
547/4: factorial(10)
547/5: factorial(5)
547/6: factorial(12)
547/7: factorial(12)
547/8: type(factorial(13))
548/1:
if None:
    print(1)
548/2:
if(not None):
    print(1)
548/3: None == True
548/4: None is True
548/5: None is None
548/6: 1 if None else 2
549/1:
if(not None):
    print(123)
549/2:
if(None):
    print(123)
549/3:
if(123):
    print(123)
549/4:
if("123123123"):
    print(123)
549/5: 123 == None
549/6: "12312321" == None
549/7: :w
550/1: from functools import lru_cache
550/2: ?lru_cache
551/1: a = 123
551/2: type(a)
551/3: id(a)
551/4: hash(id(a))
551/5: hash(str(id(a)))
551/6: hash(str(id(a)))
551/7: hash(str(id(a)) + "123")
551/8: hash(str(id(a)) + "123")
551/9: hash(str(id(a)) + "123")
551/10: hash(id(a))
551/11: type(hash(id(a)))
551/12: type(a)
552/1: type(type(5))
553/1: import numpy
553/2: import numpy as np
553/3: import matplotlib.pyplot as plt
553/4: n = 5
553/5: z = np.zeros((n , 4))
553/6: z
553/7: x = np.linspace(0 , 2 , n)
553/8: x
553/9: y = np.random.random((n , 4))
553/10: y
553/11: plt.boxplot(y)
553/12: plt.show()
553/13: n = 50
553/14: y = np.random.random((n , 4))
553/15: plt.boxplot(y)
553/16: plt.show()
553/17: y
553/18: plt.show()
553/19: plt.show()
553/20: y = np.random.random((n , 4))
553/21: plt.boxplot(y)
553/22: plt.show()
553/23: y
553/24: y[: , 0]
553/25: np.mean(y[: , 0])
553/26: np.mean(y[: , 1])
553/27: np.mean(y[: , 2])
554/1: from functools import lru_cache
555/1:
class A:
    def __init__(self , x):
        self.x = x
555/2: A(123)
555/3: a = A(123)
555/4: a.x
555/5: a.y = 321
555/6: a.y
556/1:
class AAA:
    def __init__(self):
        self.a = 123
556/2: hash(AAA())
556/3: hash(AAA())
556/4:
class AAA:
    def __init__(self):
        pass
556/5: hash(AAA())
556/6: hash(AAA())
556/7: hash(AAA())
556/8: hash(AAA())
556/9: hash(AAA())
556/10: hash(AAA())
556/11: hash(AAA())
556/12: hash([1 , 2 , 3])
557/1: [1 , 2 , 3]
557/2: tuple([1 , 2 , 3])
557/3: dict = {1  : "a" , 2 : "b" , 3 : "c"}
557/4: dict
557/5: dict[1]
557/6: del dict[1]
557/7: dict
557/8: import collections
557/9: collections.OrderedDict
557/10: a = collections.OrderedDict()
557/11: a[1] = "a"
557/12: a[2] = "b"
557/13: a[3] = "x"
557/14: a
557/15: iter(a)
557/16: a[iter(a)]
557/17: ?next
557/18: next(iter(a))
557/19: del a[next(iter(a))]
557/20: next(iter(a))
557/21: a = {}
557/22: a[1] = "a"
557/23: a[2] = "b"
557/24: a[3] = "x"
557/25: next(iter(a))
557/26: a
557/27: a[3] = "c"
557/28: a
557/29: a[2] = "B"
557/30: a
557/31: del a[2]
557/32: a
557/33: a[2] = "b"
557/34: a
557/35: a[1.1] = "123"
557/36: a
557/37: del a[next(iter(a))]
557/38: a
557/39: for ii in range(1 , 10)
557/40:
for ii in range(1 , 10):
    print(ii)
558/1: fact(10)
558/2: factorial(10)
558/3: from math import factorial
558/4: factorial(9)
559/1: from collections.abc import Hashable
561/1: from NewDecorator import AccumulatorCache
561/2:
def same(x):
    return x
562/1: from NewDecorator import AccumulatorCache
562/2:
@AccumulatorCache()
def same(x):
    return x
562/3: from NewDecorator import AccumulatorCache
562/4:
@AccumulatorCache()
def same(x):
    return x
563/1: from NewDecorator import AccumulatorCache
563/2:
@AccumulatorCache()
def same(x):
    return x
563/3: type(same)
563/4: print(same)
563/5: same(1)
564/1: from NewDecorator import AccumulatorCache
564/2:
@AccumulatorCache()
def same(x):
    return x
564/3: same(1)
564/4: same(1)
564/5: print(same)
564/6: same(1)
564/7: print(same)
564/8: same(2)
564/9: same(3)
564/10: same(3)
564/11: print(same)
565/1: from NewDecorator import AccumulatorCache
565/2:
@AccumulatorCache()
def same(x):
    return x
565/3: same(1)
565/4: same(1)
565/5: print(same)
565/6: same(1)
565/7: print(same)
565/8: same(2)
565/9: print(same)
565/10: same(2)
565/11: print(same)
565/12: print(same.__name__)
565/13: print(same.__doc__)
566/1: %load_ext autoreload
566/2: %autoreload 2
566/3: from NewDecorator import AccumulatorCache
566/4:
@AccumulatorCache()
def same(x):
    return x
566/5: print(same.__name__)
566/6:
@AccumulatorCache()
def same(x):
    return x
566/7: print(same.__name__)
566/8:
@AccumulatorCache()
def same(x):
    return x
566/9: print(same.__name__)
566/10:
@AccumulatorCache
def same(x):
    return x
566/11: same(123)
566/12:
def fun():
    return 1
566/13:
def fun(x = 123 , y = 321):
    return 2
566/14: fun()
567/1: a = [(1 , 2) , (2 , 3)]
567/2: tuple(a)
567/3: hash(tuple(a))
567/4: hash(tuple(a))
567/5: a = [(1 , 2) , (2 , 4)]
567/6: hash(tuple(a))
567/7: a = {1 : 2 , 2 : 4}
567/8: [(k , v) for k , v in dict.items()]
567/9: [(k , v) for k , v in a.items()]
567/10: ((k , v) for k , v in a.items())
567/11: tuple([(k , v) for k , v in a.items()])
567/12: hash(tuple([(k , v) for k , v in a.items()]))
567/13: a = {2 : 4 , 1 : 2}
567/14: hash(tuple([(k , v) for k , v in a.items()]))
568/1: hash(123)
568/2: hash(678558763972044497)
568/3: hash(-678558763972044497)
568/4: hash(((1, 2), (2, 3)))
568/5: hash((1 , 2))
568/6: hash((2 , 3))
568/7: hash((-3550055125485641917 , 8409376899596376432))
568/8: hash(2 , 3)
569/1: from collections import Counter
569/2: ?Counter
569/3: ?frozenset
569/4: a = {2 : 4 , 1 : 2}
569/5: b = {1 : 2 , 2 : 4}
569/6: frozenset([(k , v) for k , v in a.items()])
569/7: hash(frozenset([(k , v) for k , v in a.items()]))
569/8: hash(frozenset([(k , v) for k , v in b.items()]))
569/9:
for k , v in b.items():
    print(k , v)
569/10:
for i in range(10):
    print(i)
    if(i == 6):
        break
569/11: %load_ext autoreload
569/12: %autoreload 2
569/13: from NewDecorator import AccumulatorCache
569/14: from NewDecorator import AccumulatorCache:q
570/1: %load_ext autoreload
570/2: %autoreload 2
570/3: from NewDecorator import AccumulatorCache:q
570/4: from NewDecorator import AccumulatorCache
570/5: from NewDecorator import AccumulatorCache
570/6:
@AccumulatorCache()
def addKey(x , k = 1):
    return x + k
570/7:
@AccumulatorCache()
def addKey(x , k1 = 10 , k2 = 100):
    return x + k1 + k2
570/8: print(addKey)
570/9: addKey(0 , k1 = 1 , k2 = 2)
570/10:
@AccumulatorCache()
def addKey(x , k1 = 10 , k2 = 100):
    return x + k1 + k2
570/11: addKey(0 , k1 = 1 , k2 = 2)
570/12: print(addKey)
570/13: addKey(0 , k2 = 1 , k1 = 2)
570/14: print(addKey)
570/15: addKey(0 , k1 = 1 , k2 = 2)
570/16: print(addKey)
570/17:
@AccumulatorCache()
def addKey(x , k1 = 10 , k2 = 100):
    return x + k1 + k2
570/18: print(addKey)
570/19: addKey(0 , k1 = 1 , k2 = 2)
570/20: print(addKey)
570/21: addKey(0 , k1 = 1 , k2 = 2)
570/22: print(addKey)
570/23: addKey(0 , k2 = 2 , k1 = 1)
570/24: print(addKey)
570/25: addKey.__name__
570/26: from NewDecorator import AccumulatorCache
570/27:
@AccumulatorCache()
def addKey(x , k1 = 10 , k2 = 100):
    return x + k1 + k2
570/28: addKey(0 , k2 = 2 , k1 = 1)
570/29: addKey(0 , k2 = 2 , k1 = 1)
570/30: addKey(0 , k2 = 2 , k1 = 1)
570/31: print(addKey)
570/32: ?AccumulatorCache
570/33:
@AccumulatorCache()
def addKey(x , k1 = 10 , k2 = 100):
    return x + k1 + k2
570/34: addKey(0 , k1 = 1 , k2 = 2)
570/35: print(addKey)
570/36: addKey(0 , k1 = 1 , k2 = 2)
570/37: print(addKey)
570/38: addKey(0 , k2 = 2 , k1 = 1)
570/39: print(addKey)
570/40: from NewDecorator import AccumulatorCache , AccumulatorDecorator
570/41: ?AccumulatorDecorator
570/42: ?AccumulatorDecorator
570/43: ?tuple
570/44: ?tuple
570/45: ?AccumulatorDecorator
570/46: ?AccumulatorDecorator
570/47: ?AccumulatorDecorator.suspendCaching()
570/48: ?AccumulatorDecorator.suspendCaching
570/49: ?AccumulatorDecorator
570/50:
@AccumulatorCache()
def addKey(x , k1 = 10 , k2 = 100):
    return x + k1 + k2
570/51: addKey(0 , k2 = 2 , k1 = 1)
570/52: addKey(0 , k1 = 1 , k2 = 2)
570/53: print(addKey)
570/54: ?AccumulatorDecorator
570/55: addKey([0] , k1 = [1] , k2 = [2])
570/56: addKey
570/57: print(addKey)
570/58:
@AccumulatorCache()
def addKey(x , k1 = 10 , k2 = 100):
    return x + k1 + k2
570/59: addKey([0] , k1 = [1] , k2 = [2])
570/60: print(addKey)
570/61: addKey([0] , k1 = [1] , k2 = [2])
570/62: print(addKey)
570/63: None == None
570/64: None != None
570/65: None != None
570/66: a = 1
570/67: {1:a}[1] = 2
570/68: a
570/69: {1:a}[1]
570/70: {1:a}[1] = 2
570/71: ddd = {1:a}
570/72: ddd
570/73: ddd[1]
570/74: ddd[1] = 123
570/75: ddd
570/76: a
570/77:
@AccumulatorCache()
def addKey(x , k1 = 10 , k2 = 100):
    return x + k1 + k2
570/78: addKey(0 , k1 = 1 , k2 = 2)
570/79: addKey(0 , k2 = 2 , k1 = 1)
570/80: print(addKey)
570/81: addKey.getInfo()
570/82: addKey.getInfo()["hits"]
570/83:
class tamper:
    def __init__(x):
        self.x = x
570/84: tamper(123)
570/85:
class tamper:
    def __init__(self , x):
        self.x = x
    def __str__(self):
        return str(x)
570/86: tamper(123)
570/87: print(tamper(123))
570/88:
class tamper:
    def __init__(self , x):
        self.x = x
    def __str__(self):
        return str(self.x)
570/89: print(tamper(123))
570/90:
@AccumulatorCache()
def checkVerify(x):
    return tamper(x)
570/91:
@AccumulatorCache(verify = True)
def checkVerify(x):
    return tamper(x)
570/92:
@AccumulatorCache(verify = True)
def checkVerify(x):
    return tamper(x)
570/93:
@AccumulatorCache(verifyResult = True)
def checkVerify(x):
    return tamper(x)
570/94:
@AccumulatorCache(verify = True)
def checkVerify(x):
    return tamper(x)
570/95: ?AccumulatorCache
570/96:
@AccumulatorCache(verifyResult = True)
def checkVerify(x):
    return tamper(x)
570/97:
@AccumulatorCache(verify = True)
def checkVerify(x):
    return tamper(x)
570/98:
@AccumulatorCache(verifyResult = True)
def checkVerify(x):
    return tamper(x)
570/99: r1 = checkVerify(1)
570/100: r1
570/101: print(r1)
570/102: print(checkVerify)
570/103: r1 = checkVerify(1)
570/104: print(checkVerify)
570/105: print(checkVerify); print(r1);
570/106: print(checkVerify); print(r1);
570/107: r1 = checkVerify(1)
570/108: print(checkVerify); print(r1);
570/109: r1.x = 321
570/110: checkVerify(1)
570/111: print(checkVerify)
570/112: rr = checkVerify(1)
570/113: print(rr)
570/114:
@AccumulatorCache(verifyResult = True)
def checkVerify(x):
    return tamper(x)
570/115: r1 = checkVerify(1)
570/116: r1 = checkVerify(1)
570/117:
@AccumulatorCache(verifyResult = True)
def checkVerify(x):
    return tamper(x)
570/118: r1 = checkVerify(1)
570/119: r2 = checkVerify(1)
570/120: r1
570/121: r2
570/122: r2.x = 321
570/123: r3 = checkVerify(1)
570/124:
class tamper:
    def __init__(self , x):
        self.x = x
    def __str__(self):
        return str(self.x)
    def __hash__(self):
        return hash(x)
570/125:
@AccumulatorCache(verifyResult = True)
def checkVerify(x):
    return tamper(x)
570/126: r1 = checkVerify(1)
570/127:
class tamper:
    def __init__(self , x):
        self.x = x
    def __str__(self):
        return str(self.x)
    def __hash__(self):
        return hash(self.x)
570/128:
@AccumulatorCache(verifyResult = True)
def checkVerify(x):
    return tamper(x)
570/129: r1 = checkVerify(1)
570/130: r2 = checkVerify(1)
570/131: r2.x = 321
570/132: r3 = checkVerify(1)
570/133: print(r3)
570/134: hash(frozenset())
570/135: range(256)
570/136: list(range(256))
570/137: list(range(256))[128:]
570/138: len(list(range(256))[128:])
570/139: list(range(128,138))
570/140: fib(10)
570/141: import math
571/1: 10!
571/2: import math
571/3: math.factorial(10)
571/4: r3.x
571/5: r3
571/6: :q
572/1: 1 is None
572/2: a = 123
572/3: a is None
572/4: a = None
572/5: a is None
572/6: id(a)
573/1:
class temp:
    def __init__(self):
        self.x = 2
    def __hash__(self):
        return None
573/2: a = temp()
573/3: hash(a)
573/4: import random
573/5: ?random.getrandbits
573/6: hsh = random.getrandbits(128)
573/7: hsh
573/8: type(hsh)
573/9: hash((1))
573/10: hash((1 , 2 , 3))
573/11: hash((1 , 2 , 3 , 4))
573/12: hsh = random.getrandbits(256)
573/13: hsh
574/1: tuple([1 , 2 , 3] , 4)
574/2: tuple(([1 , 2 , 3] , 4))
574/3: hash(tuple(([1 , 2 , 3] , 4)))
575/1: from collections import Hashable
575/2: from collections.abs import Hashable
575/3: from collections.abc import Hashable
575/4: class temp
575/5:
class temp:
    def __init__(self , val):
        self.val = val
575/6: a = temp(123)
575/7: a.val
575/8: hash(a)
575/9: isinstance(a , Hashable)
575/10: a = temp([1 , 2 , 3])
575/11: isinstance(a , Hashable)
575/12: hash(a)
575/13: a = temp([1 , 2 , 4])
575/14: hash(a)
575/15: a = temp([1 , 2 , [1 , 2]])
575/16: isinstance(a , Hashable)
575/17: hash(a)
577/1: from functools import lru_cache
578/1:
def fff(a = None , b = 1 , c = 2):
    if(a):
        print("aaa")
578/2: f(123)
578/3: fff(123)
578/4:
def fff(a = None , b = 1 , c = 2):
    if(a):
        print("a" : a)
578/5:
def fff(a = None , b = 1 , c = 2):
    if(a):
        print("a" , a)
578/6: fff(123)
578/7: fff()
578/8:
def fff(a = None , b = 1 , c = 2):
    if(a):
        print("a" , a)
    else:
        print(a , b , c)
578/9: fff()
578/10: fff(123)
578/11: from functools import lru_cache
578/12:
@lru_cache()
def sss(x)
578/13:
@lru_cache()
def sss(x):
    return x
578/14: a = sss(1)
578/15: b = sss(2)
578/16: c = sss(2)
578/17: sss.cache_info()
579/1: from functools import lru_cache
579/2:
class C:
    def __init__(self , a):
        self.a = a
579/3:
class C:
    def __init__(self , a):
        self.a = a
    def __hash__(self):
        return 1
579/4: d = {}
579/5: a = C(1)
579/6: b = C(1)
579/7: hash(a)
579/8: hash(b)
579/9: d[a] = "a"
579/10: d[b] = "b"
579/11: d
579/12:
@lru_cache()
def fff(x):
    return x.a
579/13: a = C(1)
579/14: b = C(2)
579/15: a = C(1)
579/16: b = C(1)
579/17: c = C(2)
579/18: av = fff(a)
579/19: bv = fff(b)
579/20: cv = fff(c)
579/21: av
579/22: bv
579/23: cv
579/24: fff.cache_info()
579/25: :q
580/1: import qrcode
580/2: import cv2
581/1: import cv2
581/2: cap = cv2.VideoCapture(0)
581/3: font = cv2.FONT_HERSHEY_PLAIN
581/4:
while True:
    _ , frame = cap.read()
582/1: import warnings
582/2: ?warnings
582/3: raise DepricationWarning("naksjdnasdj")
582/4: from exceptions import DepricationWarning
582/5: from extensions import *
583/1: from extensions import *
584/1: raise DeprecationWarning("123")
584/2:
class A:
    def __init__(self):
        self.a = 123
    def returnIDSELF(self):
        return id(self)
584/3: a = A()
584/4: b = A()
584/5: a.returnIDSELF()
584/6: b.returnIDSELF()
584/7: a.returnIDSELF()
584/8: b.returnIDSELF()
585/1: from ctypes import *
585/2: print(cdll.kernel32)
585/3: print(cdll)
586/1:
class temp:
    def __init__(self):
        pass
    def athHash():
        return 1
586/2: a = temp()
586/3: hasattr(a , athHash)
586/4: hasattr(a , "athHash")
586/5: hasattr(a , "athHashas")
586/6: hasattr(a , "athHash")
586/7: a = [0 , 1 , 2 , 3]
586/8: x for x in a
586/9: [x for x in a]
586/10: (x for x in a)
586/11: tuple((x for x in a))
586/12: tuple(x for x in a)
587/1: class aaa
587/2: exti
588/1: class temp
588/2:
class temp:
    def __init__(self):
        pass
    def getID(self):
        return id(self)
588/3: a = temp()
588/4: a.getID()
588/5: a.getID()
589/1: class notHashable()
589/2:
class notHashable:
    def __init__(self):
        self.x = "123"
589/3: a = notHashable()
589/4: hash(a)
589/5: hash("123")
589/6:
class notHashable:
    def __init__(self):
        self.x = [123]
589/7: a = notHashable()
589/8: hash("123")
589/9: hash(a)
589/10: hash(a)
589/11: hash(a)
589/12: hash([123])
589/13: :q
590/1: import re
590/2: re.findall('ai' , "The rain in Spain")
590/3: ?re.match
590/4: re.match('A0 \d+' , "A0 123")
590/5: not (re.match('A0 \d+' , "A0 123") == None)
590/6: not (re.match('A0 \d+' , "A0 123g") == None)
590/7: not (re.match('A0 \d+$' , "A0 123g") == None)
590/8: not (re.match('A0 \d+$' , "A0 123") == None)
590/9: not (re.match('A0 (\d+|\d+\.\d+)$' , "A0 123") == None)
590/10: not (re.match('A0 (\d+|\d+\.\d+)$' , "A0 123.123") == None)
590/11: not (re.match('A0 (\d+|\d+\.\d+)$' , "A0 0.123") == None)
590/12: not (re.match('A0 (\d+|\d+\.\d+)$' , "A0 0.1") == None)
590/13: not (re.match('A0 (\d+|\d+\.\d+)$' , "A0 0.") == None)
590/14: not (re.match('A0 (\d+|\d+\.\d*)$' , "A0 0.") == None)
590/15: print(0.0)
590/16: float("0.0")
590/17: float("0.")
590/18: pattern = re.compile('A0 (\d+|\d+\.\d*)$' , "A0 0.")
590/19: pattern = re.compile('A0 (\d+|\d+\.\d*)$')
590/20: pattern.match("A0 0.0")
590/21:
if(pattern.match("A0 0.0")):
    print("OK")
590/22:
if(pattern.match("A0 0")):
    print("OK")
590/23: import numpy
590/24: ?numpy.zeros
590/25: ?numpy.float64
590/26: a = [0 , 1 , 2 , 3]
590/27: a.pop()
590/28: a
590/29: ?a.pop
590/30: ?lst.pop
590/31: ?list.pop
590/32: list.append(123)
590/33: a.append(123)
590/34: a
590/35: a = [0 , 1 , 2 , 3]
590/36: a.pop(0)
590/37: a
590/38: a.append(4)
590/39: a
590/40: import matplotlib.pyplot as plt
591/1: ?frozenset
591/2: ?set
591/3: ?tuple
591/4: type(())
591/5: hash(tuple(tuple() , frozenset()))
591/6: hash(tuple(tuple(1) , frozenset(1)))
591/7: hash(tuple(tuple(1) , frozenset((1 ,2  , 3))))
592/1:
def fun(*args , **kwargs):
    print(1)
592/2: fun(123)
592/3:
def fun(*args , **kwargs):
    hsh = hash(tuple((tuple(hash(a) for a in args) , frozenset((hash(k) , hash(v)) for k , v in kwargs.items()))))
    print(hsh)
592/4: fun(123)
592/5: fun(123)
592/6: fun(123 , k = 123)
592/7: fun(123 , k = 124)
592/8: fun(123 , k = 124)
592/9: fun(123 , v = 124)
592/10: fun()
592/11: fun()
592/12: fun(123 , v = 124 , k = 321)
592/13: fun(123 , k = 321 , v = 124)
592/14: fun(123 , k = 321)
593/1: a = {1:2 , 2:3}
593/2: hash(a)
594/1: from solid import *
594/2: from solid.utils import *
594/3:
d = difference()(
    cube(10),
    sphere(15)
)
594/4: print(scad_render(d))
595/1: from solid import *
596/1: import solid
596/2: import solid.utils
596/3: ?solid.hole
597/1: import studio
598/1: import OpenGLL
598/2: import OpenGL
598/3: ?OpenGL.GL
598/4: from OpenGL.GL import *
598/5: from OpenGL.GLU import *
598/6:
vertices= (
    (1, -1, -1),
    (1, 1, -1),
    (-1, 1, -1),
    (-1, -1, -1),
    (1, -1, 1),
    (1, 1, 1),
    (-1, -1, 1),
    (-1, 1, 1)
    )
598/7:
edges = (
    (0,1),
    (0,3),
    (0,4),
    (2,1),
    (2,3),
    (2,7),
    (6,3),
    (6,4),
    (6,7),
    (5,1),
    (5,4),
    (5,7)
    )
598/8: import pygame
598/9: from is import environ
598/10: from os import environ
598/11: environ['PYGAME_HIDE_SUPPORT_PROMPT'] = '1'
598/12: import pygame
598/13:
import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *
598/14:
def Cube():
    glBegin(GL_LINES)
    for edge in edges:
        for vertex in edge:
            glVertex3fv(vertices[vertex])
    glEnd()
598/15:
def main():
    pygame.init()
    display = (800,600)
    pygame.display.set_mode(display, DOUBLEBUF|OPENGL)
599/1: eit
602/1: import cv2
603/1: import numpy
603/2: import cv2
604/1: import cv2
605/1: import cv2
607/1: import cv2
608/1: import cv2
609/1: import cadquery
609/2: cadquery.Workplane('XY').box(1,2,3).toSvg()
611/1: import ROOT
611/2: import matplotlib.pyplot as plt
611/3: from matplotlib.patches import Circle
611/4: import mpl_toolkits.mplot3d.art3d as art3d
611/5: import scipy.spatial.transform as sst
612/1: import ROOT
612/2: eit
613/1: import ROOT
614/1: import ROOT
615/1: import os
615/2: import numpy
616/1: import ROOT
617/1: import ROOT
618/1: import ROOT
619/1: import os
619/2: ?os.path.join
619/3: os.path.join('a' , 'b')
620/1: import ROOT
621/1: from hyphen import Hyphenator
621/2: h = Hyphenator('pl_PL')
621/3: h.syllables("zagłębie")
622/1: import cv2
622/2:
cap = cv2.VideoCapture(0)
width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
print(width, height)
622/3:
import pandas as pd
import cv2


url = "https://en.wikipedia.org/wiki/List_of_common_resolutions"
table = pd.read_html(url)[0]
table.columns = table.columns.droplevel()

cap = cv2.VideoCapture(0)
resolutions = {}

for index, row in table[["W", "H"]].iterrows():
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, row["W"])
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, row["H"])
    width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
    height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
    resolutions[str(width)+"x"+str(height)] = "OK"

print(resolutions)
623/1:
import pandas as pd
import cv2


url = "https://en.wikipedia.org/wiki/List_of_common_resolutions"
table = pd.read_html(url)[0]
table.columns = table.columns.droplevel()

cap = cv2.VideoCapture(0)
resolutions = {}

for index, row in table[["W", "H"]].iterrows():
    print(row["W"] , row["H"])
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, row["W"])
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, row["H"])
    width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
    height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
    resolutions[str(width)+"x"+str(height)] = "OK"

print(resolutions)
623/2:
import pandas as pd
import cv2


url = "https://en.wikipedia.org/wiki/List_of_common_resolutions"
table = pd.read_html(url)[0]
table.columns = table.columns.droplevel()

cap = cv2.VideoCapture(0)
resolutions = {}

for index, row in table[["W", "H"]].iterrows():
    print(row["W"] , row["H"])
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, row["W"])
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, row["H"])
    width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
    height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
    resolutions[str(width)+"x"+str(height)] = "OK"

print(resolutions):q
624/1: hash(False)
624/2: hash(True)
625/1: "#@   ".strip()
625/2: "123" - "3"
625/3: "01234"[[-2:]]
625/4: "01234"[-2:]
625/5: "01234"[:-2]
626/1: import datetime
626/2: import configparser
626/3:
def func():
    pass
626/4: print(func.__dict__)
626/5: func.temp = 1
626/6: print(func.__dict__)
626/7:
class TempClass:
    a = 1
    def temp_function(self):
        pass
626/8: print(TempClass.__dict__)
626/9:
class TempClass:
    a = 1
    __instance = None
    def temp_function(self):
        pass
626/10: print(TempClass.__dict__)
626/11: import simpleCal
627/1: import betterCal
627/2: a = betterCal.calConfiguration(123)
627/3: id(a)
627/4: b = betterCal.calConfiguration(123)
627/5: id(b)
627/6:
class temp:
    pass
627/7: a = temp()
627/8: a.x = 123
627/9: a.x
627/10: type(a.x)
627/11: type(a.x = 321)
628/1: import betterCal
629/1: import betterCal
629/2: a = betterCal.calConfiguration()
630/1: import betterCal
630/2: a = betterCal.calConfiguration("123")
630/3: a.path
630/4: id(a)
630/5: if(a.path)
630/6: id(a.path)
630/7: b = betterCal.calConfiguration("123")
630/8: id(b)
630/9: b.path
630/10: id(b.path)
630/11: b.xyz = 3211
630/12: b.xyz
630/13: b.path = 132
630/14: b.path
631/1: from betterCal import calConfiguration
632/1: from betterCal import calConfiguration
632/2: data = calConfiguration("betterCal.config")
632/3: data.resolution
632/4: data1 = calConfiguration("betterCal.config")
632/5: data1.resolution
633/1: from betterCal import calConfiguration
633/2: data = calConfiguration("betterCal.config")
633/3: data.delta
634/1: from betterCal import calConfiguration
634/2: data = calConfiguration("betterCal.config")
634/3: data.delt
634/4: data.delta
634/5: data.zone
635/1: from betterCal import calConfiguration
635/2: data = calConfiguration()
635/3: data.zone
635/4: data.resolution
635/5: data.delta
635/6: import datetime
635/7: datetime.datetime.now()
635/8: ?datetime.datetime
635/9: now = datetime.datetime.now()
635/10: now.ctime()
635/11: now.toordinal()
635/12: ?now.toordinal()
635/13: ?now.toordinal
635/14: ?now.timestamp
635/15: now.timestamp
635/16: now.timestamp()
635/17: now
635/18: stamp = now.timestamp()
635/19: datetime.datetime.fromordinal(stamp)
635/20: ?now.fromtimestamp
635/21: datetime.datetime.fromtimestamp(stamp)
636/1: %load_ext autoreload
636/2: %autoreload 2
636/3: import betterCal
636/4: data = calConfiguration()
636/5: date = betterCal.calConfiguration()
636/6: date.delta
636/7: conf = betterCal.calConfiguration()
636/8: conf.delta
636/9: conf.data
636/10: conf.zone
636/11: import datetime
636/12: now = datetime.datetime.now()
636/13: stamp = now.timestamp()
636/14: betterCal.getDate(stamp)
636/15: betterCal.getDate(stamp)
636/16: betterCal.getDate(stamp)
636/17: betterCal.getDate(stamp)
636/18: now
636/19: datetime.datetime(year = 2021 , month = 9 , day = 7)
636/20: datetime.datetime(year = 2021 , month = 9 , day = 7 , hour = 16 , minute = 3)
636/21: datetime.datetime(year = 2021 , month = 9 , day = 7 , hour = 16 , minute = 3 , tz = 1)
636/22: datetime.datetime(year = 2021 , month = 9 , day = 7 , hour = 16 , minute = 3 , tzone = 1)
636/23: ?datetime.datetime
636/24: datetime.datetime(year = 2021 , month = 9 , day = 7 , hour = 16 , minute = 3 , tzinfo = 1)
636/25: datetime.tzinfo
636/26: ?datetime.tzinfo
636/27: betterCal.fromDate()
636/28: betterCal.fromDate(2021 , 9 , 3 , 4 , 5)
636/29: betterCal.fromDate(2021 , 9 , 3 , 4 , 5).minute
636/30: betterCal.fromDate(2021 , 9 , 3 , 4 , 5).hour
636/31: betterCal.fromDate(2021 , 9 , 3 , 4 , 5)
636/32: betterCal.fromDate(2021 , 9 , 3 , 4 , 5)
636/33: betterCal.toDate(betterCal.fromDate(2021 , 9 , 3 , 4 , 5))
636/34: now.day
636/35: now.weekday
636/36: now.weekday()
636/37:
class temp:
    a = 123
    def __init__(self):
        self.b = 321
    def doSomething(self):
        print(self.a)
636/38: a = temp()
636/39: a.doSomething()
636/40:
class temp:
    a = 123
    def __init__(self):
        self.b = 321
    def doSomething(self):
        print(self.a)
        print(self.__dict__)
636/41: a = temp()
636/42: a.doSomething()
636/43: import re
636/44: re.compile("Y\d\d\d\d")
636/45: pattern = re.compile("Y\d\d\d\d")
636/46: pattern.match("Y2021")
636/47: pattern.match("Y202g")
636/48:
if(pattern.match("Y202g")):
    print(123)
636/49:
if(pattern.match("Y202g")):
    print(123)
636/50:
if(pattern.match("Y2021")):
    print(123)
636/51: a = lambda x : x+1
636/52: a(123)
636/53: "Y2021"[1:]
636/54: fun = betterCal.getFunction
636/55: fun
636/56: fun = betterCal.getFunction("Y2021")
636/57: fun
636/58: from betterCal import *
636/59: currentYear = getFunction("Y2021")
636/60: currentYear(fromDate(now))
636/61: currentYear(fromDate(2021 , 1 , 2 , 3 , 4))
636/62: currentYear(fromDate(2020 , 1 , 2 , 3 , 4))
636/63: currentYear = getFunction("w2")
636/64: week = getFunction("w2")
636/65: week(fromDate(2020 , 1 , 2 , 3 , 4))
636/66: week(fromDate(2020 , 1 , 3 , 3 , 4))
636/67: week(fromDate(2020 , 1 , 4 , 3 , 4))
636/68: week(fromDate(2020 , 1 , 5 , 3 , 4))
636/69: week(fromDate(2020 , 1 , 6 , 3 , 4))
636/70: week(fromDate(2020 , 1 , 7 , 3 , 4))
636/71: now.isocalendar()
636/72: now.isocalendar().week
636/73: re.compile("&)").match("&)")
636/74: re.compile("&\)").match("&)")
636/75: updateStack("Y2021 M3")
636/76: from betterCal import *
636/77: updateStack("Y2021 M3")
636/78: updateStack("Y2021 M03")
636/79: updateStack("Y2021 M03")
636/80: isInEvent
636/81: from betterCal import *
636/82: isInEvent("Y2021 M03")
636/83: f = isInEvent("Y2021 M03")
636/84: f(datetime.datetime(2021 , 03 , 01))
636/85: f(datetime.datetime(2021 , 3 , 01))
636/86: f(datetime.datetime(2021 , 3 , 1))
636/87: f(datetime.datetime(2021 , 3 , 1))
636/88: f = isInEvent("Y2021 M03")
636/89: f(datetime.datetime(2021 , 3 , 1))
636/90: f(datetime.datetime(2021 , 3 , 2))
636/91: f(datetime.datetime(2021 , 4 , 2))
636/92: f = isInEvent("Y2021 M03")
636/93: f = isInEvent("Y2021 M03")
636/94: f(datetime.datetime(2021 , 4 , 2))
636/95: f(datetime.datetime(2021 , 3 , 2))
636/96: f(datetime.datetime(2021 , 1 , 2))
636/97: f(datetime.datetime(2021 , 3 , 2))
636/98: f(datetime.datetime(2022 , 3 , 2))
636/99: a = []
636/100: a.append(123)
636/101: a
636/102:
for j in range(2 , 3):
    print(j)
636/103:
for j in range(2 , 3):
    print(j)
636/104:
for j in range(2 , 5):
    print(j)
636/105:
for j in range(5 , 2):
    print(j)
636/106:
for j in range(5 , 2):
    print(j)
636/107: ii = 10
636/108:
while(ii >= 0):
    print(ii)
    if(ii == 2):
        break
636/109:
while(ii >= 0):
    print(ii)
    if(ii == 2):
        break
    ii -= 1
636/110: ii = 10
636/111:
while(ii >= 0):
    print(ii)
    if(ii == 2):
        break
    ii -= 1
636/112: ii
636/113: [0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ,8][2 + 1 , 6]
636/114: [0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ,8][2 + 1 : 6]
636/115: [0] + [1] + [2]
637/1: from betterCal import *
637/2: f = isInEvent("Y2021 M05")
637/3: f
637/4: from datetime import datetime
637/5: f(datetime(2021 , 5 , 11))
637/6: %load_ext autoreload
637/7: %autoreload 2
637/8: from datetime import datetime
637/9: f(datetime(2021 , 5 , 11))
637/10: f = isInEvent("Y2021 M05")
637/11: f(datetime(2021 , 5 , 11))
637/12: f = isInEvent("( Y2021 M05 &)")
637/13: f(datetime(2021 , 5 , 11))
637/14: f = isInEvent("( Y2021 M05 &)")
637/15: f(datetime(2021 , 5 , 11))
637/16: f = isInEvent("( Y2021 M05 &)")
637/17: f(datetime(2021 , 5 , 11))
637/18: [0 , 1 ,2  , 3 , 4 , 5][2:3]
637/19: [0 , 1 ,2  , 3 , 4 , 5][2:4]
637/20: f = isInEvent("( Y2021 M05 &)")
637/21: f(datetime(2021 , 5 , 11))
637/22: f = isInEvent("( Y2021 M05 &)")
637/23: f(datetime(2021 , 5 , 11))
637/24: f = isInEvent("( Y2021 M05 &)")
637/25: f(datetime(2021 , 5 , 11))
637/26: f(datetime(2021 , 4 , 11))
637/27: f = isInEvent("( Y2021 M05 &)")
637/28: f(datetime(2021 , 5 , 11))
637/29: f(datetime(2022 , 5 , 11))
637/30: f = isInEvent("( Y2021 M05 &)")
637/31: f(datetime(2022 , 5 , 11))
637/32: f = isInEvent("( Y2021 M05 &)")
637/33: f(datetime(2022 , 5 , 11))
637/34: f = isInEvent("( Y2021 M05 &)")
637/35: f = isInEvent("( Y2021 M05 &)")
637/36: f(datetime(2021 , 5 , 11))
637/37: f = isInEvent("( Y2021 M05 &)")
637/38: f(datetime(2021 , 5 , 11))
637/39: f = isInEvent("( Y2021 M05 &)")
637/40: f(datetime(2021 , 5 , 11))
637/41: f(datetime(2021 , 5 , 11))
637/42: f(datetime(2021 , 5 , 11))
637/43: f(datetime(2021 , 5 , 11))
637/44: f = isInEvent("( Y2021 M05 &)")
637/45: f(datetime(2021 , 5 , 11))
637/46: import re
637/47: re.compile("\(").match("(")
637/48: f = isInEvent("( Y2021 M05 &)")
637/49: f(datetime(2021 , 5 , 11))
637/50: f = isInEvent("( Y2021 M05 &)")
637/51: f(datetime(2021 , 5 , 11))
637/52: f = isInEvent("( Y2021 M05 &)")
637/53: f(datetime(2021 , 5 , 11))
637/54: f = isInEvent("( Y2021 M05 &)")
637/55: f(datetime(2021 , 5 , 11))
637/56: f = isInEvent("( Y2021 M05 &)")
637/57: f(datetime(2021 , 5 , 11))
637/58: f(datetime(2021 , 6 , 11))
637/59: f = isInEvent("( Y2021 M05 &)")
637/60: f(datetime(2021 , 6 , 11))
637/61: f(datetime(2021 , 6 , 11))
637/62: f = isInEvent("( Y2021 M05 &)")
637/63: f(datetime(2021 , 6 , 11))
637/64: f(datetime(2021 , 6 , 11))
637/65: f(datetime(2021 , 6 , 11))
637/66: f(datetime(2021 , 6 , 11))
637/67: f(datetime(2021 , 6 , 11))
637/68: f = isInEvent("( Y2021 M05 &)")
637/69: f(datetime(2021 , 6 , 11))
637/70: f = isInEvent("( Y2021 M05 |)")
637/71: f(datetime(2021 , 6 , 11))
637/72: f = isInEvent("( Y2021 M05 &)")
637/73: f(datetime(2021 , 6 , 11))
637/74: f = isInEvent("( Y2021 M05 &)")
637/75: f(datetime(2021 , 6 , 11))
637/76: f = isInEvent("( Y2021 M05 &)")
637/77: f = isInEvent("( Y2021 M05 &)")
637/78: f(datetime(2021 , 6 , 11))
637/79: f = isInEvent("( Y2021 M05 &)")
637/80: f(datetime(2021 , 6 , 11))
637/81: f(datetime(2021 , 6 , 11))
637/82: f = isInEvent("( Y2021 M05 &)")
637/83: f(datetime(2021 , 6 , 11))
637/84: f = isInEvent("(( Y2021 M05 &) D12 |)")
637/85: f(datetime(2021 , 6 , 11))
637/86: f = isInEvent("(( Y2021 M05 &) D12 |)")
637/87: f(datetime(2021 , 6 , 11))
637/88: f = isInEvent("( ( Y2021 M05 &) D12 |)")
637/89: f(datetime(2021 , 6 , 11))
637/90: f(datetime(2021 , 6 , 12))
637/91: f(datetime(2021 , 5 , 12))
637/92: f(datetime(2022 , 5 , 12))
637/93: f(datetime(2022 , 5 , 11))
637/94: f = isInEvent("(( Y2021 M05 &) D12 |)")
637/95: f(datetime(2022 , 5 , 12))
637/96: f = isInEvent("(( Y2021 M05 &) D12 |)")
637/97: f(datetime(2022 , 5 , 12))
637/98: f = isInEvent("( ( Y2021 M05 &) D12 |)")
637/99: f(datetime(2022 , 5 , 12))
637/100: f = isInEvent("( ( Y2021 M05 &) D12 |)")
637/101: f(datetime(2022 , 5 , 12))
637/102: f(datetime(2022 , 5 , 1))
638/1: import re
638/2: re.compile("after\d\d\d\d-\d\d-\d\d").match("after2021-01-21")
638/3: re.compile(">\d\d\d\d-\d\d-\d\d").match(">2021-01-21")
638/4: re.compile("<\d\d\d\d-\d\d-\d\d").match("<2021-01-21")
638/5: re.compile("<\d\d\d\d-\d\d-\d\d").match("<=2021-01-21")
638/6: re.compile("<=\d\d\d\d-\d\d-\d\d").match("<=2021-01-21")
638/7: import datetime
638/8: datetime.datetime("2021-01-03")
638/9: ?datetime.strptime
638/10: ?datetime.datetime.strptime
638/11: datetime.datetime.strptime("2021-01-02" , '%Y-%m-%d')
638/12: datetime.datetime.strptime(">2021-01-02" , '>%Y-%m-%d')
638/13: %load_ext autoreload
638/14: %autoreload 2
638/15: import betterCal
638/16: f = betterCal.getFunction(">2021-01-04")
638/17: f
638/18: import datetime
638/19: f(datetime.datetime(2021 , 03 , 04))
638/20: f(datetime.datetime(2021 , 3 , 4))
638/21: f(datetime.datetime(2020 , 3 , 4))
638/22: f = betterCal.getFunction("<2021-01-04")
638/23: f(datetime.datetime(2020 , 3 , 4))
638/24: f = betterCal.getFunction("<2021-01-04")
638/25: f(datetime.datetime(2020 , 3 , 4))
638/26: f(datetime.datetime(2021 , 3 , 4))
638/27: datetime.datetime(2021 , 3 , 4)
638/28: datetime.datetime(2021 , 3 , 4) >= datetime.datetime(2021 , 3 , 4)
638/29: datetime.datetime(2021 , 3 , 4) <= datetime.datetime(2021 , 3 , 4)
638/30: datetime.datetime(2021 , 3 , 4) < datetime.datetime(2021 , 3 , 4)
638/31: datetime.datetime(2021 , 3 , 4) = datetime.datetime(2021 , 3 , 4)
638/32: datetime.datetime(2021 , 3 , 4) == datetime.datetime(2021 , 3 , 4)
638/33: f = betterCal.isInEvent("( >=2021-02-02 <=2021-03-03 &)")
638/34: f(datetime.datetime(2021 , 2 , 3))
638/35: f(datetime.datetime(2021 , 2 , 2))
638/36: f(datetime.datetime(2021 , 2 , 1))
638/37: f(datetime.datetime(2021 , 3 , 1))
638/38: f(datetime.datetime(2021 , 3 , 2))
638/39: f(datetime.datetime(2021 , 3 , 3))
638/40: f(datetime.datetime(2021 , 3 , 4))
638/41: f(datetime.datetime(2021 , 3 , 5))
639/1: None
639/2: :type None
639/3: type(None)
639/4: %load_ext autoreload
639/5: %autoreload 2
639/6: import betterCal
639/7: import datetime
639/8: f = betterCal.isInEvent("<=2021-03-03")
639/9: f = betterCal.getInEventFunction("<=2021-03-03")
639/10: f(datetime.datetime(2021 , 1 , 1))
639/11: f(datetime.datetime(2021 , 2 , 1))
639/12: f(datetime.datetime(2021 , 3 , 1))
639/13: f(datetime.datetime(2021 , 3 , 2))
639/14: f(datetime.datetime(2021 , 3 , 3))
639/15: f(datetime.datetime(2021 , 3 , 4))
639/16: f = betterCal.getInEventFunction("w2")
639/17: f(datetime.datetime(2021 , 3 , 1))
639/18: f(datetime.datetime(2021 , 3 , 2))
639/19: f(datetime.datetime(2021 , 3 , 3))
639/20: f(datetime.datetime(2021 , 3 , 4))
639/21: f(datetime.datetime(2021 , 3 , 5))
639/22: f(datetime.datetime(2021 , 3 , 6))
639/23: f(datetime.datetime(2021 , 3 , 7))
639/24: f(datetime.datetime(2021 , 3 , 8))
639/25: f(datetime.datetime(2021 , 3 , 9))
639/26: f(datetime.datetime(2021 , 3 , 10))
639/27: betterCal.parseFile("mycal")
639/28: "01234"[1:]
639/29: "01234"[1:]
639/30: "01234"[1:]
639/31: "01234"[1:]
639/32: str(None)
639/33: str("123")
639/34: betterCal.parseFile("mycal")
639/35: betterCal.parseFile("mycal")
639/36: betterCal.parseFile("mycal")
639/37: betterCal.parseFile("mycal")
639/38: betterCal.parseFile("mycal")
639/39: betterCal.parseFile("mycal")
639/40: betterCal.parseFile("mycal")
639/41: "0123"[0:2]
639/42: betterCal.parseFile("mycal")
639/43: betterCal.parseFile("mycal")
639/44: betterCal.parseFile("mycal")
639/45: betterCal.parseFile("mycal")
639/46: betterCal.parseFile("mycal")
639/47: betterCal.parseFile("mycal")
639/48: betterCal.parseFile("mycal")
639/49: betterCal.parseFile("mycal")
639/50: betterCal.parseFile("mycal")
639/51: f = betterCal.getInEventFunction("asldkamsldk")
639/52: f
639/53: f(datetime.datetime(2021 , 3 , 10))
639/54: type(True)
639/55: isinstance(True , bool)
639/56: betterCal.parseFile("mycal")
639/57: f = betterCal.parseFile("mycal")
639/58: f[0]
639/59: f[0][0]
639/60: f[0][0](datetime.datetime(2021 , 2 , 4))
639/61: f = betterCal.parseFile("mycal")
639/62: f[0][0](datetime.datetime(2021 , 2 , 4))
639/63: f[0][0](datetime.datetime(2021 , 2 , 4))
639/64: f = betterCal.parseFile("mycal")
639/65: f[0][0](datetime.datetime(2021 , 2 , 4))
639/66: f = betterCal.parseFile("mycal")
639/67: f[0][0](datetime.datetime(2022 , 2 , 4))
639/68: f[0][0](datetime.datetime(2021 , 2 , 4))
639/69: f = betterCal.parseFile("mycal")
639/70: f[0][0](datetime.datetime(2021 , 2 , 4))
639/71: f = betterCal.parseFile("mycal")
639/72: f = betterCal.parseFile("mycal")
639/73: f = betterCal.parseFile("mycal")
639/74: f = betterCal.parseFile("mycal")
639/75: f = betterCal.parseFile("mycal")
639/76: f = betterCal.parseFile("mycal")
639/77: f = betterCal.parseFile("mycal")
639/78: f = betterCal.parseFile("mycal")
639/79: f = betterCal.parseFile("mycal")
639/80: f = betterCal.parseFile("mycal")
640/1: %load_ext autoreload
640/2: %autoreload 2
640/3: import betterCal
640/4: import datetime
640/5: datetime.datetime.timedelta(minutes = 1)
640/6: datetime.timedelta(minutes = 1)
640/7: datetime.datetime.strptime("13" , '%H')
640/8: datetime.datetime.strptime("13" , '%H')
640/9: ?datetime.time
640/10: ?datetime.time(23 , 59)
640/11: datetime.time(23 , 59)
640/12: datetime.time(23 , 59) > datetime.time(11 , 11)
640/13: datetime.time(23 , 59) > datetime.time(24 , 00)
640/14: datetime.time(22 , 59) > datetime.time(23 , 00)
640/15: datetime.time.strftime("23:25" , '%H:%M')
640/16: ?datetime.time.strftime
640/17: datetime.time.strftime("23:25" , '%h:%m')
640/18: datetime.time.strptime("23:25" , '%H:%M')
640/19: datetime.time(datetime.datetime(2021 , 3 , 4 , 5 , 6 , 7))
640/20: import time
640/21: time.strptime("23:45" , '%H:%M')
640/22: datetime.datetime(hour = 21)
640/23: datetime.datetime(hours = 21)
640/24: datetime.datetime(2021 , 3 , 4 , 5 , 6 , 7)
640/25: datetime.datetime(2021 , 3 , 4 , 5 , 6 , 7).hours
640/26: datetime.datetime(2021 , 3 , 4 , 5 , 6 , 7).hour
640/27: ">12:23"[2:4]
640/28: ">12:23"[1:4]
640/29: ">12:23"[1:3]
640/30: ">12:23"[4:]
640/31: datetime.datetime(2021 , 3 , 4 , 5 , 6 , 7).minute
640/32: ">=12:23"[2:4]
640/33: ">=12:23"[5:]
640/34: int("00")
640/35: int("03")
640/36: betterCal.parseFile("mycal")
640/37: fs = betterCal.parseFile("mycal")
640/38: fs[1][0]
640/39: fs[1][0](datetime.datetime.now)
640/40: datetime.datetime.now
640/41: datetime.datetime.now()
640/42: fs[1][0](datetime.datetime.now())
640/43: fs[1][0](datetime.datetime.now)
640/44: fs = betterCal.parseFile("mycal")
640/45: fs
640/46: str(None)
640/47: fs = betterCal.parseFile("mycal")
640/48: str(None)
640/49: fs
640/50: fs
640/51: fs = betterCal.parseFile("mycal")
640/52: fs = betterCal.parseFile("mycal")
640/53: fs = betterCal.parseFile("mycal")
640/54: fs = betterCal.parseFile("mycal")
640/55: fs = betterCal.parseFile("mycal")
640/56: fs = betterCal.parseFile("mycal")
640/57: fs = betterCal.parseFile("mycal")
640/58: fs = betterCal.parseFile("mycal")
640/59: fs = betterCal.parseFile("mycal")
640/60: fs = betterCal.parseFile("mycal")
640/61: fs
640/62: fs = betterCal.parseFile("mycal")
640/63: fs
640/64: fs = betterCal.parseFile("mycal")
640/65: fs
640/66: fs[1][0](datetime.datetime.now())
640/67: fs = betterCal.parseFile("mycal")
640/68: fs[2][0](datetime.datetime.now())
641/1: %load_ext autoreload
641/2: %autoreload 2
641/3: import betterCal
641/4: import datetime
641/5: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/6: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/7: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/8: evs = betterCal.parseFile("mycal")
641/9: evs
641/10: evs[1][0]
641/11: evs[1][0](datetime.datetime.strptime("2021-09-09 18:35:00"))
641/12: evs[1][0](datetime.datetime(2021 , 9 , 9 , 18 , 35))
641/13: evs[1][0](datetime.datetime(2021 , 9 , 9 , 12 , 35))
641/14: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/15: betterCal.getEvents("tempcal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/16: betterCal.getEvents("tempcal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/17: betterCal.getEvents("tempcal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/18: betterCal.getEvents("tempcal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/19: betterCal.getEvents("tempcal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/20: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/21: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/22: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/23: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/24: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/25: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/26: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/27: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/28: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/29: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/30: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/31: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/32: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/33: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/34: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/35: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/36: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/37: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/38: betterCal.getEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/39: betterCal.printEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/40: betterCal.printEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59))
641/41: betterCal.printEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59) , withDetails = True)
641/42: betterCal.printEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59) , withDetails = True)
641/43: betterCal.printEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59) , withDetails = True)
641/44: betterCal.printEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59) , withDetails = True)
641/45: betterCal.printEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59) , withDetails = True)
641/46: betterCal.printEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59) , withDetails = True)
641/47: betterCal.printEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59) , withDetails = True)
643/1: %load_ext autoreload
643/2: %autoreload 2
643/3: def fff(123 , kwa = 123)
643/4:
def fff(a , kwa = 123):
    (a , kwa)
643/5: f = fff
643/6: f(123)
643/7:
def fff(a , kwa = 123):
    return (a , kwa)
643/8: f = fff
643/9: f(123)
643/10: f(321)
643/11: type(f)
645/1: %load_ext autoreload
645/2: %autoreload 2
645/3: import datetime
645/4: import betterCal
645/5: betterCal.printEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59) , withDetails = True)
645/6: betterCal.printEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0) , datetime.datetime(2021 , 9 , 9 , 23 , 59) , withDetails = True)
645/7: datetime.datetime.now()
645/8: betterCal.printDayEvents("mycal" , datetime.datetime(2021 , 9 , 0 , 0 , 0))
645/9: betterCal.printDayEvents("mycal" , datetime.datetime(2021 , 9 , 0 , 0 , 0))
645/10: betterCal.printDayEvents("mycal" , datetime.datetime(2021 , 9 , 1 , 0 , 0))
645/11: betterCal.printDayEvents("mycal" , datetime.datetime(2021 , 9 , 9 , 0 , 0))
645/12: betterCal.printDayEvents("mycal" , datetime.datetime(2021 , 9 , 10 , 0 , 0))
645/13: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/14: print(u'\u2500')
645/15: print(u'\u2588')
645/16: print(u'\u2588' + 'a')
645/17: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/18: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/19: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/20: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/21: !nvim betterCal.config
645/22: !nvim betterCal.config
645/23: !nvim betterCal.config
645/24: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/25: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/26: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/27: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/28: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/29: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/30: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/31: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/32: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/33: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/34: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/35: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/36: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/37: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/38: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/39: !nvim betterCal.config
645/40: !nvim betterCal.config
645/41: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/42: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/43: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/44: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/45: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/46: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/47: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/48: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/49: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/50: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/51: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/52: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/53: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/54: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/55: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/56: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/57: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/58: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/59: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/60: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/61: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/62: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/63: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/64: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/65: betterCal.printDayEvents("mycal" , datetime.datetime.now())
645/66: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/67: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/68: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/69: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/70: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/71: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/72: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/73: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/74: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/75: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/76: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/77: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/78: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/79: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/80: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/81: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/82: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/83: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/84: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/85: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/86: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/87: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
645/88: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
646/1: %load_ext autoreload
646/2: %autoreload 2
646/3: import betterCal
646/4: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
646/5: import datetime
646/6: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
646/7: !nvim mycal
646/8: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
646/9: !nvim mycal
646/10: betterCal.printDayEvents("mycal" , datetime.datetime.now() , withDetails = True)
646/11: betterCal.printDayEvents("cal" , datetime.datetime.now() , withDetails = True)
646/12: betterCal.printDayEvents("cal" , datetime.datetime.now() , withDetails = True)
646/13: betterCal.printDayEvents("cal" , datetime.datetime.now() , withDetails = True)
646/14: betterCal.printDayEvents("cal" , datetime.datetime.now() , withDetails = True)
647/1: %load_ext autoreload
647/2: %autoreload 2
647/3: import betterCal
647/4: import "betterCal"
648/1: %load_ext autoreload
648/2: %autoreload 2
648/3: !nvim betterCalendar
649/1: %load_ext autoreload
649/2: %autoreload 2
649/3: import betterCalendar
649/4: import datetime
649/5: now = datetime.datetime.now()
649/6: now.weekday()
649/7: now.weekday() + 1
649/8: now
650/1: a = {}
650/2: a.append(1)
650/3: a += "1"
650/4: a.update("1")
650/5: a = set()
650/6: a
650/7: a.add("1")
650/8: a
650/9: str(a)
650/10:
for e in a:
    print(e)
650/11: import datetime
650/12: datetime.datetime(2021 , 03 , 03 , 0 , 0)
650/13: datetime.datetime(2021 , 3 , 3 , 0 , 0)
650/14: datetime.datetime(2021 , 3 , 3 , 0 , 0) + datetime.timedelta(days = 1)
651/1: a = set()
651/2: a.add("123")
651/3: a
652/1: st = set([0 , 1 , 2 , 3 , 4 , 5])
652/2:
for el in st:
    print(el)
652/3:
for el in st:
    print(el)
652/4:
for el in st:
    print(el)
652/5:
for el in st:
    print(el)
652/6:
for el in st:
    print(el)
652/7:
for el in st:
    print(el)
652/8:
for el in st:
    print(el)
652/9:
for el in st:
    print(el)
652/10:
for el in st:
    print(el)
652/11:
for el in st:
    print(el)
652/12:
for el in st:
    print(el)
652/13:
for el in st:
    print(el)
652/14: st
653/1:
def fun(a , kw = 123):
    print(a , kw)
653/2: fun(321)
653/3: fun(321 123123)
653/4: fun(321 , 1231312)
653/5:
def printall(func):
    def inner(*args, **kwargs):
        print 'Arguments for args: {}'.format(args)
        print 'Arguments for kwargs: {}'.format(kwargs)
        return func(*args, **kwargs)
    return inner
653/6:
def printall(func):
    def inner(*args, **kwargs):
        print('Arguments for args: {}'.format(args))
        print('Arguments for kwargs: {}'.format(kwargs))
        return func(*args, **kwargs)
    return inner
653/7:
@printall
def fun(a , kw = 123):
    print(a , kw)
653/8: fun(123)
653/9:
@printall
def fun(a , kw = 123):
    return (a , kw)
653/10: fun(123)
653/11: fun(123 , 321)
654/1: for line in "aaaa"
654/2:
for line in "aaaa":
    print(line)
655/1: test_set = set("geeKs")
655/2:
for v in test_set:
    print(v)
655/3: test_set = set("geeKs")
655/4:
for v in test_set:
    print(v)
655/5: :q
656/1: test_set = set("geeKs")
656/2:
for v in test_set:
    print(v)
657/1: weekdays = {0 : "MON" , 1 : "TUE" , 2 : "WED" , "3" : "THU" , 4 : "FRI" , 5 : "SAT" , 6 : "SUN"}
657/2: weekdays[3]
657/3: weekdays.keys
657/4: weekdays.keys()
658/1: import os
658/2: ?os.listdir
658/3: ?std.endswith
658/4: "asdsad.txt".endswith(".txt")
658/5: str.endswith
658/6: import os
658/7: os.getcwd()
658/8: "asdsdASD".lower()
659/1: imput("enter tag")
659/2: input("enter tag or command")
659/3: set([1 , 2 , 1 , 1])
659/4: "sada  ".strip()
659/5: import os
659/6: os.listdir("/etc/")
659/7: os.path.join("/home/kacper/" , "Documents")
660/1: import subprocess
660/2: ?subprocess.run
660/3: ?subprocess.CompletedProcess
660/4: "asdads".split()
661/1: import os
661/2: os.path.isdir("/home/kacper")
662/1: import typing
663/1: ["aaa" , "bbb"].remove("bbb")
663/2: print(["aaa" , "bbb"].remove("bbb"))
663/3: lst = ["aaa" , "bbb"]
663/4: lst.remove("bbb")
663/5: lst
664/1: import matplotlib.pyplot as plt
664/2: plt.plot([1 , 2 , 3 , 4])
664/3: plt.ylabel('this is a plot')
664/4: plt.show()
665/1: import numpy
665/2: import cv2
665/3: cap = cv2.VideoCapture(0)
665/4: cap
665/5: cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
665/6: cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)
665/7: cv2.namedWindow('frame' , cv2.WINDOW_GUI_NORMAL)
665/8: ret , frame = cap.read()
665/9: cv2.imshow('frame' , frame)
665/10: frame
665/11: cv2.imshow('frame' , frame)
665/12: cv2.imshow('frame' , frame)
665/13: ret , frame = cap.read()
665/14: cv2.imshow('frame' , frame)
665/15:
while True:
    ret , frame = cap.read()
    cv2.cvtColor(frame , cv2.COLOR_BGR2GRAY)
    cv2.imshow('frame',warped)
665/16:
while True:
    ret , frame = cap.read()
    cv2.cvtColor(frame , cv2.COLOR_BGR2GRAY)
    cv2.imshow('frame',frame)
665/17: cap.release()
665/18: cv2.destroyAllWindows()
665/19: cv2.namedWindow('frame' , cv2.WINDOW_GUI_NORMAL)
665/20:
while True:
    ret , frame = cap.read()
    cv2.cvtColor(frame , cv2.COLOR_BGR2GRAY)
    cv2.imshow('frame',frame)
665/21:
while True:
    ret , frame = cap.read()
    cv2.imshow('frame',frame)
666/1:
def silnia(n):
    if(n == 1):
        return 1
    else:
        return n * silnia(n - 1)
666/2: silnia(4)
666/3: silnia(1000)
667/1: import functools
667/2:
def func(x , y, z):
    return x + y + z
667/3: p_func = functools.partial(func , 10)
667/4: p_func(1 , 2)
667/5: p_func
668/1: import numpy
668/2: ?numpu.zeros
668/3: ?numpyy.zeros
668/4: ?numpy.zeros
668/5: :quit
669/1: lst.pop
669/2: ?list.pop
669/3: a = [0 , 1 , 2]
669/4: a.pop(0)
669/5: a.pop(0)
669/6: a.pop(0)
669/7: a
670/1: av = []
670/2: av == None
670/3: av = None
670/4: av == None
671/1: import numpy
671/2: numpy.zeros(2)
671/3: numpy.zeros(2) == None
672/1: import numpy
672/2: ?numpy.where
673/1: from aaa import _aaa__secret
673/2: dir(aaa)
673/3: from inspect import getmembers , isfunction
673/4: import foo
673/5: import aaa
673/6: import aaa
673/7: ?getmembers
673/8: getmembers(aaa)
673/9: getmembers(aaa , isfunction)
673/10: aaa.__secret()
673/11: ls
674/1: from manim import *
674/2:
class PointMovingOnShapes(Scene):
    def construct(self):
        square = Square(color=BLUE) # Create a square
        square.flip(RIGHT) # Flip the square to the right
        square.rotate(-3 * TAU / 8) # Rotate the square -3/8 * 2*PI 

         # Play the animation of a square growing from the center
        self.play(GrowFromCenter(square))
675/1: import manimpango
675/2: manimpango.list_fonts()
675/3: from manim import *
675/4: ?Group
675/5: ?Group.arrange
675/6: ?FadeIn
675/7: RED
675/8: DOWN
675/9: ORIGIN
675/10: ?np.random
675/11: np.random
675/12: ?np.random
675/13: ?np.random.rand
675/14: np.random.rand(3)
675/15: np.random.rand(3)
675/16: np.random.rand(3)
675/17: LEFT
675/18:
for x in np.random.rand(10):
    print(x)
675/19: array([0 , 0 , 0])
675/20: np.array([0 , 0 , 0])
675/21: ?FadeIn
676/1: import matplotlib.pyplot as plt
676/2: plt.plot([1 , 2 , 3 , 4])
676/3: plt.ylabel("kolejne liczby")
676/4: plt.show()
676/5: plt.plot([1 , 2 , 3 , 4] , [1 , 4 , 9 , 16])
676/6: plt.show()
676/7: plt.plot([1 , 2 , 3 , 4] , [1 , 4 , 9 , 16] , 'ro')
676/8: plt.show()
676/9: plt.plot([1 , 2 , 3 , 4] , [1 , 4 , 9 , 16] , 'ro')
676/10: plt.axis([0 , 6 , 0 , 20])
676/11: plt.show()
676/12: plt.plot([1 , 2 , 3 , 4] , [1 , 4 , 9 , 16] , 'ro')
676/13: plt.show()
676/14: import numpy as np
676/15: t = np.arrange(0. , 5. , 0.2)
676/16: t = np.arange(0. , 5. , 0.2)
676/17: t
676/18: plt.plot(t , t , 'r--')
676/19: plt.show()
676/20: t**2
676/21: plt.plot(t , t , 'r--' , t , t**2 , 'bs')
676/22: plt.show()
676/23: plt.plot(t , t , 'r--' , t , t**2 , 'bs' , t , t**3 , 'g^')
676/24: plt.show()
676/25: t**3
676/26: t**2
676/27: tNormal = [0 , 1 , 2 , 3]
676/28: tNormal**2
676/29: t**2
676/30:
def f(t):
    return np.exp(-t) * np.cos(2 * np.pi * t)
676/31: f(1)
676/32: t1 = np.arange(0.0 , 5.0 , 0.1)
676/33: t1
676/34: t2 = np.arrange(0.0 , 5.0 , 0.02)
676/35: t2 = np.arange(0.0 , 5.0 , 0.02)
676/36: t2 = np.arange(0.0 , 5.0 , 0.02)
676/37: t2
676/38: plt.figure()
676/39: plt.subplot(211)
676/40: f(t1)
676/41: t1
676/42: tNormal
676/43: f(tNormal)
676/44: f(t1)
676/45: plt.plot(t1 , f(t1) , 'bo' , t2 , f(t2) , 'k')
676/46: plt.subplot(212)
676/47: plt.plot(t2 , np.cos(2 * np.pi * t2) , 'r--')
676/48: plt.show()
676/49: plt.show()
676/50: plt.subplot(211)
676/51: plt.figure()
676/52: plt.subplot(211)
676/53: plt.plot(t1 , f(t1) , 'bo' , t2 , f(t2) , 'k')
676/54: plt.subplot(212)
676/55: plt.plot(t2 , np.cos(2 * np.pi * t2) , 'r--')
676/56: plt.show()
676/57: plt.plot(t1 , f(t1) , 'bo' , t2 , f(t2) , 'k')
676/58: plt.show()
676/59: plt.xlabel("czas [s]")
676/60: plt.ylabel("amplituda [m]")
676/61: plt.plot(t1 , f(t1) , 'bo' , t2 , f(t2) , 'k')
676/62: plt.show()
676/63: plt.xlabel("czas [s]")
676/64: plt.ylabel("amplituda [m]")
676/65: plt.text(2.0 , 0.8 , r'$\mu = 100 , \sigma = 15$')
676/66: plt.show()
676/67: plt.show()
676/68: plt.xlabel("czas [s]")
676/69: plt.ylabel("amplituda [m]")
676/70: plt.text(2.0 , 0.8 , r'$\mu = 100 , \sigma = 15$')
676/71: plt.plot(t1 , f(t1) , 'bo' , t2 , f(t2) , 'k')
676/72: plt.show()
676/73: plt.xlabel("czas [s]")
676/74: plt.ylabel("amplituda [m]")
676/75: plt.text(2.0 , 0.8 , r'$\frac{1}{1 + \frac{1}{2}}$')
676/76: plt.plot(t1 , f(t1) , 'bo' , t2 , f(t2) , 'k')
676/77: plt.show()
677/1: from manim import *
677/2: ?FunctionGraph
677/3: ?move_to
677/4: ?Circle.move_to
678/1: import pyglet
678/2: width = 500
678/3: height = 500
678/4: title = "Geeks for Geeks"
678/5: window = pyglet.window.Window(width , height , title)
678/6: !ls
678/7: vidPath = "2201830969_245622493_1349379006.mp4"
678/8: player = pyglet.media.StreamingSource()
678/9: MediaLoad = pyglet.media.load(vidPath)
678/10: player.queue(MediaLoad)
678/11: player.queue(MediaLoad)
678/12: player.play(MediaLoad)
680/1: print(1.7e308)
680/2: print(1.71e308)
680/3: print(1.8e308)
680/4: print(1.79e308)
680/5: print(1.82e308)
681/1: x = 0.0
681/2: 1.0/16.0
681/3: dx = 1.0 / 128.0
681/4: dx
681/5: n = float(128)
681/6: x = 0.0
681/7:
for i in range(128):
    x += dx
681/8: x
681/9:
def iterate(n):
    dx = 1.0 / float(n)
    x = 0
    for i in range(n):
        x +=  dx
    return x
681/10: iterate(128)
681/11: iterate(1024)
681/12: iterate(10)
681/13: iterate(10)
681/14: iterate(1024)
681/15: iterate(1023)
681/16: iterate(1022)
681/17: iterate(1025)
681/18: :q
682/1: import numpy as np
682/2: np.float16(1.0)
682/3: :t np.float16(1.0)
682/4: type(np.float16(1.0))
683/1: import numpy as np
684/1: import numpy as np
684/2: np.finfo(np.float16).eps
684/3: np.finfo(np.float32).eps
684/4: np.finfo(np.float64).eps
684/5: prc = np.float16
684/6: prc(123)
684/7: :q
685/1: import numpy as mp
686/1: import numpy as np
686/2: np.finfo(np.float16).eps
687/1: range(-4 , 4)
687/2: list(range(-4 , 4))
687/3: list(range(-4 , 5))
687/4: 2^2
687/5: 2.0^2
687/6: 2.0^2.0
687/7: import numpy as np
687/8: ?np.power
687/9: list(range(-16 , 1))
688/1: import numpy as np
688/2: fp = numpy.float16
688/3: fp = np.float16
689/1: import numpy as np
689/2: fp = np.float16
689/3: x = fp(1) / fp(5)
689/4: x
689/5: x = fp(1) / fp(3)
689/6: x
689/7:
def poly(x):
    return x*(fp(9)/fp(8) + x*(fp(-17)/fp(24) + x*(fp(15)/fp(8) + x*(x + fp(-137)/fp(60))))) + fp(-1)/fp(120)
689/8: poly(x)
689/9: poly(x) - x
690/1: import argparse
690/2: ?str.find
690/3: "ABBBBBC".find("")
690/4: "ABBBBBC".find("B")
690/5: "ABBBBBC".find("sdfsd")
691/1: import cv2
691/2: cap = cv2.VideoCapture(args.camera)
691/3: cap = cv2.VideoCapture(0)
691/4: cap
691/5: cv2.namedWindow('frame' , cv2.WINDOW_GUI_NORMAL)
691/6: ret, frame = cap.read()
691/7: ret
691/8: frame
691/9: cv2.imshow('frame',frame)
691/10: cv2.imshow('frame',frame)
691/11: cv2.imshow('frame',frame)
691/12: cv2.imshow('frame',frame)
691/13: cv2.imshow('frame',frame)
691/14: cv2.imshow('frame',frame)
691/15: cv2.imshow('frame',frame)
691/16: cv2.imshow('frame',frame)
691/17: cap.release()
691/18: cv2.destroyAllWindows()
691/19: cap = cv2.VideoCapture(0)
691/20: ret, frame = cap.read()
691/21: cv2.imshow("frame" , frame)
691/22: cv2.waitKey()
691/23: cap.release()
691/24: cv2.destroyAllWindows()
691/25: import numpy as np
691/26: np.array([1 , 2 , 3])
691/27: arr = np.array([1 , 2 , 3])
691/28: arr.shape
691/29: arr.dtype
691/30: arr1 = np.array([[1 , 2 , 3] , [4 , 5 , 6]])
691/31: arr1.shape
691/32: arr.dtype
691/33: arr1.dtype
691/34: arr1.ctypes
691/35: arr1.flatten()
691/36: arr1.ndim
691/37: arr1.nbytes
691/38: arr.nbytes
691/39: arr1.tobytes()
691/40: arr1.view()
691/41: np.empty(30)
691/42: np.empty(30)
691/43: np.empty(2)
691/44: np.empty(2).dtype
692/1: import logging
692/2: ?logging
692/3: msg = logging.getLogger("some log")
692/4: msg.debug("1231231231")
692/5: msg
692/6: ?msg.log
692/7: msg
692/8: type(msg)
693/1: import logging
693/2: logging.debug("This is a debug message")
694/1:
def iterate(m):
    dx = 1.0 / float(m)
    x = 0
    for i in range(m):
        x += dx
    return x
694/2:
for i in range(100):
    print(i + 1 , abs(iterate(i + 1) - 1.0))
695/1: import numpy as np
695/2: np.float_16(1231)
695/3: np.float16(123)
695/4: type(np.float16(123))
695/5: np.float32(123)
695/6: type(np.float32(123))
695/7: 123.0
695/8: np.float64(123)
695/9: type(np.float64(123))
696/1: import numpy as np
696/2: fp = np.float32
696/3: es = np.finfo(fp).eps
696/4: es
698/1: import cv2
698/2: cap = cv2.VideoCapture(0)
698/3: cap
698/4: ret , frame = cap.read()
698/5: cv2.imshow("frame" , frame)
698/6: cv2.waitKey()
698/7: cap.release()
698/8: cv2.destroyAllWindows()
698/9: frame
698/10: type(frame)
699/1: import numpy as np
699/2: a = np.array([1 , 2 , 3 , 4])
699/3: a
699/4: b = np.array([[1,2,3] , [4 , 5 , 6]])
699/5: b
699/6: a
699/7: a.dtype
699/8: a.ndim
699/9: a.shape
699/10: b.dtype
699/11: a.ndim
699/12: b.ndim
699/13: b.shape
699/14: c = np.array([[1,2,3] , [4 , 5 , 6] , [7 , 2]])
699/15: ?np.zeros
699/16: np.zeros(2)
699/17: np.zeros(2).dtype
699/18: np.zeros((2 , 3))
699/19: np.zeros((2 , 3) , dtype = "int64")
699/20: ?np.ones
699/21: np.ones(2)
699/22: np.ones(2).dtype
699/23: np.ones((10 , 10))
699/24: np.ones((10 , 10) , dtype = np.float16)
699/25: one = np.ones((10 , 10) , dtype = np.float16)
699/26: 2.0 * one
699/27: np.empty(11)
699/28: emt = np.empty(11)
699/29: emt[1]
699/30: emt[1] = 123
699/31: emp
699/32: emt
699/33: np.arange(4)
699/34: np.arange(2 , 9 , 2)
699/35: np.linspace(0 , 10 , num = 100)
699/36: ls
699/37: clear
699/38: np.array([3 , 2 , 1 , 10])
699/39: a = np.array([3 , 2 , 1 , 10])
699/40: np.sort(a)
699/41: b = np.array([1 , 2 , 3 , 4])
699/42: np.concatenate((a , b))
699/43: x = np.array([[1 , 2] , [3 , 4]])
699/44: y = np.array([[1 , 2]])
699/45: np.concatenate((x , y) , axis = 0)
699/46: a = np.array([3 , 2 , 1 , 10])
699/47: a/ndim
699/48: a.ndim
699/49: a.shape
699/50: b = a.reshape(2 , 2)
699/51: b
699/52: a
699/53: b.shape
699/54: b
699/55: px = [[1 , 2] , [3 , 4]]
699/56: px
699/57: px[0]
699/58: px[0][1]
699/59: px[0,1]
699/60: b
699/61: b[0]
699/62: b[1]
699/63: b[0][1]
699/64: b[0 , 1]
699/65: b[0 , :]
699/66: b[0 , 0:1]
699/67: a
699/68: b
699/69:
def applySinus(a):
    return np.sin(a)
699/70: applySinus(b)
699/71: b
699/72: px
699/73: applySinus(px)
699/74: applySinus(px)
699/75:
def applySinusNormal(a):
    return sin(a)
699/76: applySinusNormal(px)
699/77: import math
699/78:
def applySinusNormal(a):
    return math.sin(a)
699/79: applySinusNormal(px)
699/80: applySinusNormal(b)
700/1: a = 0.5
700/2: a *= 0.5
700/3: a
701/1: 2 * 0.5
702/1: str(123)
703/1: a = lambda x : 2 * x
704/1: import numpy as np
704/2: ?np.linalg.norm
705/1:
class Temp:
    def __str__(self):
        return "aaa"
    def fff():
        return str(self) + "bbb"
    def __init__(self):
        self.a = 123
705/2: a = Temp()
705/3: a.fff
705/4: a.fff()
705/5:
class Temp:
    def __str__(self):
        return "aaa"
    def fff(self):
        return str(self) + "bbb"
    def __init__(self):
        self.a = 123
705/6: a = Temp()
705/7: a.fff()
706/1: import logging
706/2: log = logging.log()
706/3: logging.getLevelName()
706/4: logr = logging.getLogger()
706/5: logr
706/6: logr.getEffectiveLevel()
706/7: logging.basicConfig(level = logging.ERROR)
706/8: logr.getEffectiveLevel()
706/9: logging.basicConfig(level = logging.DEBUG)
706/10: logr.getEffectiveLevel()
706/11: logging.basicConfig(level = logging.DEBUG)
706/12: logr.getEffectiveLevel()
706/13: logging.basicConfig(level = logging.CRITICAL)
706/14: logr.getEffectiveLevel()
706/15: ?logr.getEffectiveLevel
706/16: logr = logging.getLogger()
706/17: logr.getEffectiveLevel()
706/18: logging.basicConfig(level = 2)
706/19: logr.getEffectiveLevel()
706/20: logging.getLogger().getEffectiveLevel()
707/1: import logging
707/2: logging.getLogger().getEffectiveLevel()
707/3: logger.DEBUG
707/4: logging.DEBUG
707/5: logging.ERROR
707/6: logging.CRITICAL
707/7: logging.FATAL
707/8: logging.INFO
707/9: logging.NOTSET
707/10: logging.WARN
707/11: logging.WARNING
707/12:
def logIfDebugOrHigher(i):
    if(logging.getLogger().getEffectiveLevel() >= logging.DEBUG):
        logging.debug("logIfDebugOrHigher " + str(i))
707/13: logIfDebugOrHigher(123)
707/14: str(logging)
708/1: import logging
708/2:
def logIfDebugOrHigher(i):
    if(logging.getLogger().getEffectiveLevel() >= logging.DEBUG):
        logging.debug("logIfDebugOrHigher " + str(i))
708/3:
logging.debug('This is a debug message')
logging.info('This is an info message')
logging.warning('This is a warning message')
logging.error('This is an error message')
logging.critical('This is a critical message')
708/4: logging.basicConfig(level = logging.DEBUG)
708/5:
logging.debug('This is a debug message')
logging.info('This is an info message')
logging.warning('This is a warning message')
logging.error('This is an error message')
logging.critical('This is a critical message')
708/6:
logging.debug('This is a debug message')
logging.info('This is an info message')
logging.warning('This is a warning message')
logging.error('This is an error message')
logging.critical('This is a critical message')
709/1: logging.basicConfig(level = logging.DEBUG)
709/2: import logging
709/3: logging.basicConfig(level = logging.DEBUG)
709/4:
logging.debug('This is a debug message')
logging.info('This is an info message')
logging.warning('This is a warning message')
logging.error('This is an error message')
logging.critical('This is a critical message')
709/5:
def logIfDebugOrHigher(i):
    if(logging.getLogger().getEffectiveLevel() >= logging.DEBUG):
        logging.debug("logIfDebugOrHigher " + str(i))
709/6: logIfDebugOrHigher
709/7: logIfDebugOrHigher(123)
709/8: logging.basicConfig(level = logging.ERROR)
709/9: logIfDebugOrHigher(123)
709/10: logging
709/11: logging.getLogger().getEffectiveLevel()
709/12: logging.getLogger().getEffectiveLevel()
709/13: logging.basicConfig(level = logging.ERROR)
709/14: logging.getLogger().getEffectiveLevel()
709/15: logging.getLogger().getEffectiveLevel()
709/16: logging.basicConfig(level = logging.DEBUG)
709/17: logging.getLogger().getEffectiveLevel()
709/18: logging.CRITICAL
710/1:
if(None):
    print(123)
710/2:
if(not None):
    print(123)
711/1: a = [True]
711/2:
def fun(x , mod):
    mod = not [mod[0]]
    return 2 * x
711/3: fun(123 , a)
711/4: a
711/5: fun(123 , a)
711/6: a
711/7:
def fun(x , mod):
    mod[0] = not mod[0]
    return 2 * x
711/8: a
711/9: fun(123 , a)
711/10: a
711/11: fun(123 , a)
711/12: a
711/13: hash(tuple(None , None))
711/14: hash(None)
712/1: tuple([1 , 2 , 3])
712/2: tuple(aH for aH in [0 , 1 , 2 , 3])
712/3: a = []
712/4: a.append((1 , 2))
712/5: a
712/6: ?frozenset
712/7: frozenset(kHvH for kHvH in [(1 , 2) , (3 , 4) , (5 , 6)])
713/1: 0 is None
713/2: (0 is None)
713/3: hsh = 0
713/4: hsh is None
714/1: import numpy as np
714/2: np.finfo(np.float32)
714/3: np.finfo(np.float32).eps
714/4: np.finfo(np.float64).eps
714/5: np.finfo(np.float16).eps
715/1: import logging
715/2: logging.DEBUG
715/3: logging.ERROR
715/4: log = logging.getLogger()
715/5: log.getEffectiveLevel()
715/6: log.DEBUG
716/1: ?list.pop
716/2: [0 , 1 , 2].pop()
716/3: [0 , 1 , 2].pop(0)
716/4: a = [0 , 1 , 2]
716/5: a.pop(0)
716/6: a
716/7: a = [0 , 1 , 2]
716/8: a[1;;]
716/9: a[1;]
716/10: a[1]
716/11: a[1;;]
716/12: a[1:]
716/13: [0 , 1 , 2 , 3][:1]
716/14: [0 , 1 , 2 , 3][:2]
716/15: [0 , 1 , 2 , 3][3:]
716/16: [0 , 1 , 2 , 3 , 4][3:]
716/17: "0123"[3:]
716/18: type({})
717/1: {"a" : 1 , "b" : 2}
717/2: {"a" : 1 , "b" : 2} + {"c" : 1}
718/1: dict([1 , 2])
720/1: "DadasdaasdaDA".lower()
720/2: None is None
721/1: [0 , 1 , 2 ,3 , 4][;;5]
721/2: [0 , 1 , 2 ,3 , 4][:5]
721/3: [0 , 1 , 2 ,3 , 4][:4]
721/4: [0 , 1 , 2 ,3 , 4][:5]
722/1: "Topolnicki" in "Kacper Topolnicki"
723/1: hash("123")
723/2: hash("123")
723/3: hash("123")
723/4: hash("123")
723/5: hash("12")
723/6: hash("123")
724/1: hash("123")
724/2: "123".hash()
724/3: "123".hash
724/4: "123".__hash__()
725/1: "123".__hash__()
725/2: import hashlib
725/3: hashlib.sha512("123")
725/4: hashlib.sha512("123").hexdigest()
725/5: int(hashlib.sha512("123").hexdigest() , 16)
725/6: int(hashlib.sha512("123").hexdigest(), 16)
725/7: int(hashlib.sha512("123".encode()).hexdigest(), 16)
725/8: hashlib.sha512("123".encode())
725/9: hashlib.sha512("123".encode()).hexdigest()
725/10: hashlib.sha512("121".encode()).hexdigest()
725/11: :q
726/1: a = [[1 , 2] , [3 , 4] , [5 , 6]]
726/2: a.reverse()
726/3: a
727/1: import numpy as np
727/2: arr = np.array([0.0 , 1.0 , 2.0 , 3.0])
727/3: len(arr)
727/4: arr = np.array([[0.0 , 1.0 , 2.0] , [3.0 , 4.0 , 5.0]])
727/5: arr
727/6: arr.shape
727/7: arr.shape[0]
727/8: " " * 10
727/9: arr.tostring()
728/1: from lu import *
728/2: ls
728/3: arr = np.array([[0.0 , 1.0 , 2.0] , [3.0 , 4.0 , 5.0]])
728/4: arr
728/5: nicePrint(arr)
729/1: %load_ext autoreload
729/2: %autoreload 2
729/3: from lu import *
729/4: arr = np.array([[0.0 , 1.0 , 2.0] , [3.0 , 4.0 , 5.0]])
729/5: nicePrint(arr)
729/6: nicePrint(arr)
729/7: nicePrint(arr)
729/8: nicePrint(arr , description = "A = ")
729/9: nicePrint(arr , description = "A = ")
729/10: addRow[1 , [1 , 2 , 3]]
729/11: addRow(1 , [1 , 2 , 3])
729/12: addRow(1 , [1 , 2 , 3])
729/13: addRow(1 , [1 , 2 , 3])
729/14: nicePrint(addRow(1 , [1 , 2 , 3]))
729/15: nicePrint(addRow(1 , [1 , 2 , 3]) , "add multiples of row 1 = ")
729/16: nicePrint(addRow(1 , [0 , 2 , 3]) , "add multiples of row 1 = ")
729/17: nicePrint(addRow(0 , [0 , 2 , 3]) , "add multiples of row 1 = ")
729/18: nicePrint(addRow(0 , [1 , 2 , 3]) , "add multiples of row 1 = ")
729/19: nicePrint(addRow(1 , [0 , 1 , -2]) , "add multiples of row 1 = ")
731/1: raw_input("123")
731/2: input()
731/3: input("enter")
732/1: import numpy as np
732/2: ?np.identity
732/3: np.identity(2)
733/1: import logginh
733/2: import logging
733/3: log = logging.getLogger()
733/4: a = {1 : 2 , 2 : 3}
733/5: print("Dict %s" , a)
733/6: print('Dict %s' , a)
733/7: print('Dict %s' % a)
733/8: log.debug('Dict %s' , a)
733/9: log
733/10: log.error('Dict %s' , a)
734/1: a = [1]
734/2: a.pop()
734/3: a
734/4: a.pop()
735/1: a = [1]
735/2: a.push(2)
735/3: a.append(2)
735/4: a
737/1: dct = {1 : "1" , 2 : "2"}
737/2:
for k , v in dct:
    print(k , v)
737/3:
for k in dct:
    print(k , dct[k])
738/1: import cv2
738/2: ?cv2.drawContours
739/1: import cv2
739/2: ?cv2.drawContours
740/1: import cv2
740/2: ?cv2.drawContours
740/3: cv2.FILLED
741/1: from poc import foo
741/2: aaa = foo(123)
741/3: aaa = foo()
741/4: aaa.history = "123"
741/5: aaa.history
742/1: import poc
742/2: import poc
743/1: import poc
743/2: a = poc.foo()
743/3: a.mut1()
743/4: poc.foo()
743/5: poc.foo().fum
743/6: poc.foo().mut1
744/1: %load_ext autoreload
744/2: %autoreload 2
744/3: import poc
744/4: a = poc.foo()
744/5: a.fum
744/6: a.mut1()
744/7: a = poc.foo()
744/8: a.mut1()
744/9: a.history
744/10: a.mut1(1)
744/11: a.history
744/12: ?a.mut1
744/13: a = poc.foo()
744/14: a = poc.foo()
744/15: a.fum
744/16: a.mut1()
744/17: a.mut1(123)
744/18: a.fum
744/19: a.history
744/20: a = poc.foo()
744/21: a = poc.foo()
744/22: a.mut1()
744/23: a.history
744/24: a.mut1(123)
744/25: a.history
744/26: a.fum
744/27: a.mut2(123)
744/28: a.history
744/29: a = poc.foo()
744/30: a = poc.foo()
744/31: a.history()
744/32: a.history
744/33: {'a' : 1 , 'b' : 2}
744/34: {'a' : 1 , 'b' : 2} == {'a' : 1 , 'b' : 2}
744/35: a = poc.foo()
744/36: b = poc.foo()
744/37: a == b
744/38: a.fum
744/39: b.fum
744/40: a.__eq__
744/41: a.mut1
744/42: b = poc.foo()
744/43: b = poc.foo()
744/44: a = poc.foo()
744/45: b = poc.foo()
744/46: ?a.mut1
744/47: a = poc.foo()
744/48: a = poc.foo()
744/49: a = poc.foo()
744/50: a = poc.foo()
744/51: a.mut1()
744/52: a.mut1(123)
744/53: a.history
744/54:
def fun(f = None , *args):
    for a in args:
        print(a)
744/55:
def fun(f = None , *args):
    for a in args:
        print(a)
744/56: fun(1 , 2 , 3)
744/57:
def fun(f = None , *args):
    print(f is None)
    for a in args:
        print(a)
744/58: fun(1 , 2 , 3)
744/59:
def fun(f = None , globalVars = []):
    print(f is None)
    for a in args:
        print(a)
744/60:
def fun(f = None , globalVars = []):
    print(f is None)
    for a in args:
        print(a)
744/61: fun(1 , 2 , 3)
744/62: fun(1)
744/63:
def fun(f = None , globalVars = []):
    print(f is None)
    for a in globalVars:
        print(a)
744/64: fun(1)
744/65:
def fun(f = None , globalVars = []):
    print("f = " , f)
    for a in globalVars:
        print(a)
744/66: fun(1)
744/67: fun(1 , [123])
744/68: fun(1 , [123 , 124])
744/69: a = poc.foo()
744/70: a = poc.foo()
744/71: a.mut1(123)
744/72: a.history
744/73: a.mut2(123)
744/74: a.history
744/75: a = poc.foo()
744/76: a = poc.foo()
744/77: a.mut1(123)
744/78: a.mut3(123)
744/79: a.mut2(123)
744/80: a.history
744/81: a = poc.foo()
744/82: a = poc.foo()
744/83: a = poc.foo()
744/84: a.mut1(123)
744/85: a.mut2(125)
744/86: a.history
745/1: %load_ext autoreload
745/2: %autoreload 2
745/3: import poc
746/1: %load_ext autoreload
746/2: %autoreload 2
746/3: import poc
746/4: a = poc.foo()
746/5: a.mut1(123)
746/6: a.mut2(125)
746/7: a.history
746/8: a = poc.foo()
746/9: a.mut1(123)
746/10: a.mut1(123)
746/11: a = poc.foo()
746/12: a = poc.foo()
746/13: a.mut1(123)
746/14: a.mut2(125)
746/15: a.history
747/1: %load_ext autoreload
747/2: %autoreload 2
747/3: import poc
747/4: a = poc.foo()
747/5: a.history
747/6: a.mut1(123)
747/7: a.mut2(321)
747/8: a.fum
747/9: a.history
748/1: %load_ext autoreload
748/2: %autoreload 2
748/3: import poc
748/4: a = poc.foo()
748/5: a.fum
748/6: poc.someGlobalVariable
748/7: a.mut1(123)
748/8: a.fum
748/9: a.mut2(321)
748/10: a.fum
748/11: a.mut3(4321)
748/12: a.fum
748/13: a.history
749/1: %load_ext autoreload
749/2: %autoreload 2
749/3: import poc
749/4: import poc
749/5: a = poc.foo()
749/6: a.mut1(12)
749/7: a.mut2(21)
749/8: a.mut3(321)
749/9: a.fum
749/10: a.history
749/11: a = poc.foo()
749/12: a.mut1(12)
749/13: a.mut2(21)
749/14: a.mut3(321)
749/15: a.calculateHash()
749/16: a = poc.foo()
749/17: a.mut1(12)
749/18: a.mut2(21)
749/19: a.mut3(321)
749/20: a.calculateHash()
749/21: a = poc.foo()
749/22: a.mut1(12)
749/23: a.mut2(21)
749/24: a.mut3(321)
749/25: a.calculateHash()
750/1: %load_ext autoreload
750/2: %autoreload 2
750/3: import poc
752/1: import poc
752/2: a = poc.foo()
752/3: a.fum
752/4: a.mut1(12)
752/5: a.mut2(21)
752/6: a.mut3(321)
752/7: a.fum
752/8: a.history
752/9: a.calculateHash()
753/1:
class Temp:
    def __init__(self):
        self.aaa = 123
    def __getattr__(self , name):
        return 321
753/2: x = Temp()
753/3: x.aaa
753/4: Temp x = Temp()
753/5: x.__dict__
753/6:
class Temp(object):
    def __init__(self):
        self.aaa = 123
    def __getattr__(self , name):
        return 321
753/7: Temp x = Temp()
753/8: x = Temp()
753/9: x.__dict__
753/10: x.__dict__
753/11: x.y
753/12:
class Temp(object):
    def __init__(self):
        self.aaa = 123
    def __get__(self , instance , owner):
        return 321
753/13: x = Temp()
753/14: x.aaa
753/15:
class Temp(object):
    def __init__(self):
        self.aaa = 123
    def __getattribute__(self , name):
        return 321
753/16: x = Temp()
753/17: x.aaa
755/1: ls
756/1: import poc1
756/2: %load_ext autoreload
756/3: %autoreload 2
756/4: import poc1
756/5: x = poc1.KeepTrack()
756/6: x.aaa
756/7: x = poc1.Mutant()
756/8: x.aaa
756/9: x = poc1.Mutant()
756/11: x = poc1.Mutant()
756/13: x = poc1.KeepTrack()
757/1: %load_ext autoreload
757/2: %autoreload 2
757/3: x = poc1.KeepTrack()
757/4: import poc1
757/5: x = poc1.KeepTrack()
757/6: x
757/8: x = poc1.KeepTrack()
757/10: x = poc1.KeepTrack()
757/12: x = poc1.KeepTrack()
757/14: x = poc1.KeepTrack()
757/16: x = poc1.KeepTrack()
757/17: x.aaa
757/18: x = poc1.KeepTrack()
757/19: x.aaa
757/20: x = poc1.KeepTrack()
757/21: x.aaa
757/22: "aaa".upper()
757/23: x = poc1.KeepTrack()
757/24: x = poc1.KeepTrack()
757/25: x = poc1.KeepTrack()
757/26: x = poc1.KeepTrack()
757/27: ?isinstance
757/28: x = poc1.KeepTrack()
757/29: x = poc1.KeepTrack()
757/30: x.aaa
757/31: a.y
757/32: x.aaa
757/33: x.y
757/34: x = poc1.KeepTrack()
757/35: x._mutationHistory
757/36: x._mutationOutside
757/37: x = poc1.KeepTrack()
757/38: x = poc1.Mutant()
757/39: x.aaa
757/40: x._mutationHistory
757/41: x = poc1.Mutant()
757/42: x = poc1.Mutant()
757/43: x.mutationHistory
757/44: isinstance(x , Mutant)
757/45: isinstance(x , poc1.Mutant)
757/46: isinstance(x , poc1.KeepTrack)
757/47: isinstance(x , poc1.KeepTrack)
757/48: x = poc1.Mutant()
757/49: isinstance(x , poc1.KeepTrack)
757/50: x = poc1.Mutant()
757/51: x.mutationHistory
757/52: x = poc1.Mutant()
757/53: x = poc1.Mutant()
757/54: x = poc1.Mutant()
757/55: hasattr(x , 'aaa')
757/56: x = poc1.Mutant()
757/57: x = poc1.Mutant()
757/58: x = poc1.Mutant()
757/59: x = poc1.Mutant()
757/60: x = poc1.Mutant()
757/61: x = poc1.Mutant()
757/62: x = poc1.Mutant()
757/63: x = poc1.Mutant()
757/64: hash("231232")
757/65: hash("231232")
757/66: hash("231232")
757/67: x = poc1.Mutant()
757/68: x = poc1.Mutant()
757/69: x = poc1.Mutant()
758/1: %load_ext autoreload
758/2: %autoreload 2
758/3: import poc1
758/4: x = poc1.Mutant()
758/5: x = poc1.Mutant()
758/6: x = poc1.Mutant()
758/7: x = poc1.Mutant()
758/8: x = poc1.Mutant()
758/9: x = poc1.Mutant()
758/10: x = poc1.Mutant()
758/11: x = poc1.Mutant()
758/12: x = poc1.Mutant()
758/13: [0 , 1 , 2 , 3][1:]
758/14: x = poc1.Mutant()
758/15: x = poc1.Mutant()
758/16: "".join([])
758/17: "".join([])
758/18: "".join([])
758/19: x = poc1.Mutant()
758/20: x = poc1.Mutant()
758/21: x = poc1.Mutant()
758/22: x = poc1.Mutant()
758/23: x = poc1.Mutant()
758/24: a = (1,2)
758/25: a
758/26: x = poc1.Mutant()
758/27: x = poc1.Mutant()
758/28: x = poc1.Mutant()
758/29: x = poc1.Mutant()
758/30: x = poc1.Mutant()
759/1: %load_ext autoreload
759/2: %autoreload 2
759/3: import poc1
759/4: x = poc1.Mutant()
759/5: x
759/6: x = poc1.Mutant()
759/7: x = poc1.Mutant()
759/8: x._mutationHistory
759/9: x._startRecording
759/10: x._recordedMutation
759/11: x = poc1.Mutant()
759/12: x._startRecording
759/13: x = poc1.Mutant()
759/14: x = poc1.Mutant()
759/15: x = poc1.Mutant()
759/16: x._mutationHistory
759/17: x = poc1.Mutant()
759/18: x = poc1.Mutant()
759/19: x = poc1.Mutant()
759/20: x._mutationHistory
759/21: x.mut1()
759/22: x._mutationHistory
759/23: x = poc1.Mutant()
759/24: x = poc1.Mutant()
759/25: x = poc1.Mutant()
759/26: x = poc1.Mutant()
759/27: x._mutationHistory
759/28: x.mut1()
759/29: x = poc1.Mutant()
759/30: x = poc1.Mutant()
759/31: x._mutationHistory
759/32: x.mut1()
759/33: x._mutationHistory
759/34: x.mut1()
759/35: x._mutationHistory
759/36: x = poc1.Mutant()
759/37: x = poc1.Mutant()
759/38: x._mutationHistory
759/39: x.mut1()
759/40: x = poc1.Mutant()
759/41: x = poc1.Mutant()
759/42: x.mut1()
759/43: x._mutationHistory
759/44: x.mut1()
759/45: x._mutationHistory
759/46: x = poc1.Mutant()
759/47: x = poc1.Mutant()
759/48: x._mutationHistory
759/49: x.mut1()
759/50: x.mut1()
759/51: x.mut1()
759/52: x._mutationHistory
759/53: x.getMutationHash()
759/54: x = poc1.Mutant()
759/55: x = poc1.Mutant()
759/56: x = poc1.Mutant()
759/57: x = poc1.Mutant()
759/58: x = poc1.Mutant()
759/59: x.mut1()
759/60: x.mut1()
759/61: x.mut1()
759/62: x.getMutationHash()
759/63: x._mutationHistory
759/64: x = poc1.Mutant()
759/65: x = poc1.Mutant()
759/66: x.mut1()
759/67: x.mut2(1000)
759/68: x.mut1()
759/69: x.mut2(2000)
759/70: x.aaa
759/71: x._mutationHistory
759/72: x.getMutationHash()
759/73: x = poc1.Mutant()
759/74: x = poc1.Mutant()
759/75: x = poc1.Mutant()
759/76: x = poc1.Mutant()
759/77: x = poc1.Mutant()
759/78: x = poc1.Mutant()
759/79: x = poc1.Mutant()
759/80: x = poc1.Mutant()
759/81: x = poc1.Mutant()
759/82: x = poc1.Mutant()
759/83: x = poc1.Mutant()
759/84: x = poc1.Mutant()
759/85: x = poc1.Mutant()
759/86: x = poc1.Mutant()
759/87: x = poc1.Mutant()
759/88: x = poc1.Mutant()
759/89: x = poc1.Mutant()
759/90: x = poc1.Mutant()
759/91: x = poc1.Mutant()
759/92: x = poc1.Mutant()
759/93: x = poc1.Mutant()
759/94: x = poc1.Mutant()
759/95: x = poc1.Mutant()
759/96: x = poc1.Mutant()
759/97: x = poc1.Mutant()
759/98: x = poc1.Mutant()
759/99: x = poc1.Mutant()
759/100: x.mut1()
759/101: x.mut2()
759/102: x.mut2(3)
759/103: x._mutationHistory
759/104: x.mut2(3)
759/105: x._mutationHistory
759/106: x = poc1.Mutant()
759/107: x = poc1.Mutant()
759/108: x.mut3(3)
759/109: x._mutationHistory
759/110: x.mut3(3)
759/111: x._mutationHistory
759/112: poc1.cons = 321
759/113: x.mut3(3)
759/114: x._mutationHistory
759/115: x = poc1.Mutant()
759/116: x = poc1.Mutant()
759/117: x = poc1.Mutant()
759/118: x.mut3(3)
759/119: x.mut3(3)
759/120: x.mut3(3)
759/121: poc1.cons = 321
759/122: x.mut3(3)
759/123: x = poc1.Mutant()
759/124: x = poc1.Mutant()
759/125: x = poc1.Mutant()
759/126: x = poc1.Mutant()
759/127: x = poc1.Mutant()
760/1: %load_ext autoreload
760/2: %autoreload 2
760/3: import poc1
760/4: %autoreload 2
760/5: x = poc1.Mutant()
760/6: x = poc1.Mutant()
760/7: x.mut3(3)
760/8: poc1.cons = 1
760/9: x.mut3(3)
760/10: x = poc1.Mutant()
760/11: x.mut3(3)
760/12: poc1.cons = 1
760/13: x.mut3(3)
760/14: x = poc1.Mutant()
760/15: x.mut3(3)
761/1: %load_ext autoreload
761/2: %autoreload 2
761/3: import poc1
761/4: x = poc1.Mutant()
761/5: x.mut3(3)
761/6: poc1.cons = [1]
761/7: x.mut3(3)
761/8: aaa = [123]
761/9: bbb = [aaa , aaa]
761/10: bbb
761/11: aaa = [1]
761/12: bbb
761/13: x = poc1.Mutant()
761/14: x = poc1.Mutant()
761/15: a = lambda : 123
761/16: a()
761/17: a = lambda : 123
761/18: x = poc1.Mutant()
761/19: x.mut3(3)
761/20: poc1.cons = 9999
761/21: x.mut3(3)
761/22: x._mutationHistory
761/23: x = poc1.Mutant()
761/24: x.mut3(3)
761/25: poc1.cons = 11111
761/26: x.mut3(3)
761/27: x._mutationHistory
761/28: poc1.cons
761/29: poc1.cons
761/30: poc1.cons
761/31: poc1.cons
761/32: x = poc1.Mutant()
761/33: x.mut3(3)
761/34: poc1.cons = 999999
761/35: x.mut3(3)
761/36: x._mutationHistory
761/37: :quit
762/1: %load_ext autoreload
762/2: %autoreload 2
762/3: import poc1
763/1: %load_ext autoreload
763/2: %autoreload 2
763/3: import poc1
763/4: import poc1
763/5: x = poc1.Mutant()
763/6: x._commutators
763/7: x.mut1()
763/8: x._mutationHistory
763/9: x = poc1.Mutant()
763/10: x = poc1.Mutant()
763/11: x._commutators
763/12: x.mut1()
763/13: x._mutationHistory
763/14: x = poc1.Mutant()
763/15: x = poc1.Mutant()
763/16: x.mut1()
763/17: x.mut2(123)
763/18: x.mut3(333)
763/19: x._mutationHistory
763/20: x.getMutationHash
763/21: x.getMutationHash()
763/22: type(x._mutationHistory[0])
763/23: type(x._mutationHistory[0][0])
763/24: type(x._mutationHistory[0][1])
763/25: x = poc1.Mutant()
763/26: x.mut1()
763/27: x.mut2(2)
763/28: x.mut1()
763/29: y = poc1.Mutant()
763/30: y.mut2(2)
763/31: y.mut1()
763/32: y.mut1()
763/33: x.aaa
763/34: y.aaa
763/35: x._mutationHistory
763/36: y._mutationHistory
763/37: x.getMutationHash()
763/38: y.getMutationHash()
763/39: x = poc1.Mutant()
763/40: x._commutators
763/41: x = poc1.Mutant()
763/42: x = poc1.Mutant()
763/43: x._commutators
763/44: x._mut1()
763/45: x.mut1()
763/46: x.mut1()
763/47: x.mut2(2)
763/48: x._mutationHistory
763/49: y = poc1.Mutant()
763/50: y.mut2(2)
763/51: y.mut1()
763/52: y.mut1()
763/53: x.aaa
763/54: y.aaa
763/55: x._mutationHistory
763/56: y._mutationHistory
763/57: x.getMutationHash
763/58: x.getMutationHash()
763/59: y.getMutationHash()
765/1: ls
765/2: %load_ext autoreload
765/3: %autoreload 2
765/4: import poc1
765/5: x = poc1.Mutant()
766/1: %load_ext autoreload
766/2: %autoreload 2
766/3: import poc1
766/4: x = poc1.Mutant()
766/5: x = poc1.Mutant()
766/6: x = poc1.Mutant()
766/7: x = poc1.Mutant()
766/9: x = poc1.Mutant()
766/11: x = poc1.Mutant()
766/12: x = poc1.Mutant()
766/13: x = poc1.Mutant()
766/15: x = poc1.Mutant()
766/17: x = poc1.Mutant()
766/19: x = poc1.Mutant()
766/20: x = poc1.Mutant()
766/21: x.mut1()
766/22: x = poc1.Mutant()
766/23: x = poc1.Mutant()
766/24: x = poc1.Mutant()
766/25: x.mut1()
766/26: x.mut1()
766/27: x = poc1.Mutant()
766/28: x = poc1.Mutant()
766/29: x.mut1()
766/30: x = poc1.Mutant()
766/31: x.mut1()
766/32: x._mutationHistory
766/33: x = poc1.Mutant()
766/34: x = poc1.Mutant()
766/35: x.mut1()
766/36: x = poc1.Mutant()
766/37: x = poc1.Mutant()
766/38: x.mut1()
766/39: x = poc1.Mutant()
766/40: x = poc1.Mutant()
766/41: x.mut1()
766/42: x.mut1()
766/43: x = poc1.Mutant()
766/44: x.mut1()
766/45: x = poc1.Mutant()
766/46: x = poc1.Mutant()
766/47: x.mut1()
766/48: x.mut1()
766/49: x._mutationHistory
766/50: x = poc1.Mutant()
766/51: x = poc1.Mutant()
766/52: x.mut1()
766/53: x = poc1.Mutant()
766/54: x = poc1.Mutant()
766/55: x.mut1()
766/56: x = poc1.Mutant()
766/57: x = poc1.Mutant()
766/58: x.mut1()
766/59: x = poc1.Mutant()
766/60: x = poc1.Mutant()
766/61: x = poc1.Mutant()
766/62: x.mut1()
766/63: x = poc1.Mutant()
766/64: x = poc1.Mutant()
766/65: x = poc1.Mutant()
766/66: x = poc1.Mutant()
766/67: x.mut1()
766/68: x._mutationHistory
766/69: x = poc1.Mutant()
766/70: x = poc1.Mutant()
766/71: x._mutationHistory
767/1: %load_ext autoreload
767/2: %autoreload 2
767/3: import poc1
767/4: x = poc1.Mutant()
767/5: x = poc1.Mutant()
767/6: x.mut1()
767/7: x.mut2(2)
767/8: x.mut3(3)
767/9: x._mutationHistory
767/10: x.getMutationHash()
767/11: x = poc1.Mutant()
767/12: x.mut3(3)
767/13: x.mut2(2)
767/14: x.mut1()
767/15: x._mutationHistory
767/16: x.getMutationHash()
767/17: x = poc1.Mutant()
767/18: x = poc1.Mutant()
767/19: x = poc1.Mutant()
767/20: x = poc1.Mutant()
767/21: x = poc1.Mutant()
767/22: x.mut1()
767/23: x.mut2(2)
767/24: x.mut3(3)
767/25: x._mutationHistory
767/26: x.mut2(2)
767/27: x._mutationHistory
767/28: x.aaa
767/29: x = poc1.Mutant()
767/30: x.mut2(2)
767/31: x.aaa
767/32: x._mutationHistory
767/33: x = poc1.Mutant()
767/34: x = poc1.Mutant()
767/35: x = poc1.Mutant()
767/36: x = poc1.Mutant()
767/37: x.aaa
767/38: x = poc1.Mutant()
767/39: x = poc1.Mutant()
767/40: x = poc1.Mutant()
767/41: x.mut2(2)
767/42: x.mut3(3)
767/43: x.mut1()
767/44: x.getMutationHash()
767/45: x = poc1.Mutant()
767/46: x.mut1()
767/47: x.mut3(3)
767/48: x.mut2(2)
767/49: x.getMutationHash()
767/50: x = poc1.Mutant()
767/51: x.mut3(3)
767/52: x.mut2(2)
767/53: x.mut1()
767/54: x._mutationHistory
767/55: x = poc1.Mutant()
767/56: x = poc1.Mutant()
767/57: x._mutationHistory
767/58: x = poc1.Mutant()
767/59: x._mutationHistory
767/60: import copy
767/61: ?copy.deepcopy
767/62: x = poc1.Mutant()
767/63: x.mut1()
767/64: x.mut2(2)
767/65: x.mut3(3)
767/66: x._mutationHistory
767/67: x = poc1.Mutant()
767/68: x.mut3(3)
767/69: x.mut2(2)
767/70: x.mut1()
767/71: x.getMutationHash(verbose=True)
767/72: x = poc1.Mutant()
767/73: x.mut3(3)
767/74: x.mut1()
767/75: x.mut2(2)
767/76: x.getMutationHash(verbose=True)
767/77: eit
768/1: import example
768/2: from example import Mutant
768/3: x = Mutant()
768/4: x.mut1()
768/5: x.mut2()
768/6: x.mut2(2)
768/7: x.mut3(3)
768/8: x._mutationHistory
768/9: x.getMutationHash()
768/10: x = Mutant()
768/11: x.mut3(3)
768/12: x.mut2(2)
768/13: x.mut1()
768/14: x.getMutationHash()
768/15: x.getMutationHash(verbose=True)
768/16: ?Mutant.mro
768/17: Mutant.mro()
769/1: %load_ext autoreload
769/2: %autoreload 2
769/3: from example import *
769/4: test()
769/5: test()
769/6: x = Mutant()
769/7: x._mutationHistory
770/1: %load_ext autoreload
770/2: %autoreload 2
770/3: import Mutant
770/4: import example
770/5: example.fun()
770/6: example.text()
770/7: example.test
770/8: example.test()
770/9: x = example.Mutant()
770/10: x._mutationHistory
770/11: x = example.Mutant()
771/1: %load_ext autoreload
771/2: %autoreload 2
771/3: import example
771/4: x = example.Mutant()
771/5: x._mutationHistory
771/6: example.test()
771/7: x = example.Mutant()
771/8: x = example.Mutant()
771/10: x = example.Mutant()
771/12: x = example.Mutant()
771/14: x = example.Mutant()
771/16: x = example.Mutant()
771/17: x = example.Mutant()
771/18: x = example.Mutant()
771/19: x = example.Mutant()
771/21: x = example.Mutant()
771/23: x = example.Mutant()
771/24: x = example.Mutant()
771/25: x.mut1()
772/1: %load_ext autoreload
772/2: %autoreload 2
772/3: from example import Mutant
773/1: %load_ext autoreload
773/2: %autoreload 2
773/3: import example
773/4: x = example.Mutant()
773/5: x._mutationHistory
773/6: x.mut1()
773/7: x._mutationHistory
773/8: x = example.Mutant()
773/9: x.mut1()
773/10: x = example.Mutant()
773/11: x.mut1()
773/12: x.mut1()
773/13: x = example.Mutant()
773/14: x.mut1()
773/15: x.mut1()
773/16: x.mut1()
773/17: x.mut1()
774/1: %load_ext autoreload
774/2: %autoreload 2
774/3: import example
774/4: x = example.Mutant()
774/5: x.mut1()
774/6: x.mut1()
774/7: x.mut2(2)
774/8: x.mut1()
774/9: x._mutationHistory
774/10: x.aaa
774/11: x._mutationHistory
774/12: x = example.Mutant()
774/13: x.mut1()
774/14: x.mut1()
775/1: import example
775/2: x = example.Mutant()
775/3: x.mut1()
775/4: x.mut3()
775/5: x.mut3(3)
776/1: import example
776/2: x = example.Mutant()
776/3: x.mut1()
776/4: x._mutationHistory
776/5: x.mut2(2)
776/6: x._mutationHistory
776/7: x = example.Mutant()
776/8: x.mut2(2)
776/9: x.mut1()
776/10: x.aaa
776/11: x._mutationHistory
776/12: x.mut1()
777/1: import example
777/2: x = example.Mutant()
777/3: x.mut1()
777/4: x.mut2(2)
777/5: x._mutationHistory
777/6: x.getMutationHash(verbose=True)
777/7: x.aaa
777/8: x.getMutationHash(verbose=True)
777/9: x.mut2(2)
778/1: import example
778/2: import example
778/3: x = example.Mutant()
778/4: x.mut2(2)
779/1: import example
779/2: x = example.Mutant()
779/3: x.mut2(2)
779/4: x.mut1()
779/5: x._mutationHistory
779/6: x.aaa
779/7: x.mut1()
780/1: %load_ext autoreload
780/2: %autoreload 2
780/3: import example
780/4: x = example.Mutant()
780/5: x.mut1()
780/6: x.aaa
780/7: x.mut1()
780/8: x = example.Mutant()
780/9: x.mut1()
780/10: x.mut1()
780/11: %autoreload 2
780/12: import example
780/13: x = example.Mutant()
780/14: x.mut1()
781/1: import example
781/2: x = example.Mutant()
781/3: x.mut1()
782/1: import example
782/2: x = example.Mutant()
782/3: x.mut1()
782/4: x.aaa
782/5: x.mut1()
783/1: import example
783/2: x = example.Mutant()
783/3: x.mut1()
783/4: x._mutationHistory
783/5: x.aaa
783/6: x.mut1()
783/7: x._mutationHistory
783/8: x.aaa
783/9: x.mut2()
783/10: x.mut2(2)
783/11: x._mutationHistory
783/12: x.aaa
784/1: import example
784/2: x = example.Mutant()
784/3: x.mut2(2)
784/4: x.mut1()
784/5: x._mutationHistory
784/6: x.getMutationHash(verbose=True)
784/7: x.aaa
784/8: x.mut1()
784/9: x.aaa
785/1: import example
785/2: x = example.Mutant()
785/3: x.mut1()
785/4: import example
786/1: import example
787/1: import example
787/2: x = example.Mutant()
787/3: x.mut1()
787/4: x.mut2(3)
787/5: x.mut3(4)
787/6: x.aaa
787/7: x.mut1()
787/8: x.aaa
787/9: example.test()
787/10: :q
787/11: qu
787/12: x = example.Mutant()
787/13: x.mut1()
787/14: x.aaa
787/15: x.aaa
788/1: import example
788/2: x = example.Mutant()
789/1: import example
789/2: x = example.Mutant()
789/3: x.mut1()
789/4: x.mut2(2)
789/5: x.aaa
789/6: x.aaa
791/1: import example
791/2: x = example.Mutant()
791/3: x.mut1()
791/4: x.mut2(2)
791/5: x._mutationHistory
791/6: x.aaa
791/7: x.aaa
791/8: x.aaa
791/9: x.isMutationRecorder()
792/1: %load_ext autoreload
792/2: %autoreload 2
792/3: import example
792/4: x = example.Mutant()
792/5: x.isMutationRecorder()
792/6: x.isMutationRecorded()
792/7: x._mutationHistory()
792/8: x._mutationHistory
792/9: x = example.Mutant()
792/10: x.isMutationRecorded()
792/11: iexit
793/1: import example
793/2: x = example.Mutant()
794/1: import example
794/2: x = example.Mutant()
795/1: import example
795/2: x = example.Mutant()
796/1: import example
796/2: x = example.Mutant()
796/3: x.mut1()
796/4: x.aaa = 123
796/5: .aaa
796/6: x.aaa
796/7: x.isMutationRecorded()
797/1: import example
797/2: x = example.Mutant()
797/3: x.mut1()
797/4: x.mut2()
797/5: x.mut2(2)
797/6: x._mutationHistory
797/7: x.aaa
797/8: x.aaa
798/1: %load_ext autoreload
798/2: %autoreload 2
798/3: import example
798/4: x = example.Mutant()
798/5: x.mut2(2)
798/6: x.mut1()
798/7: x.mut3(2)
798/8: x._mutationHistory
798/9: x._recordedMutation
799/1: import example
799/2: x = example.Mutant()
799/3: x.mut3(2)
799/4: x.mut1()
799/5: x._mutationHistory
799/6: x = example.Mutant()
799/7: id(x)
799/8: x.mut1()
799/9: x.mut1()
799/10: id(x)
799/11: x._mutationHistory
799/12: x.isMutationRecorded()
799/13: x = Mutant()
799/14: x = Mutant()
800/1: %load_ext autoreload
800/2: %autoreload 2
800/3: import example
800/4: x = example.Mutant()
800/5: x.mut1()
801/1: import example
801/2: x = example.Mutant()
801/3: x.mut1()
801/4: x.mut2(2)
801/5: x._mutationHistory
801/6: import example
801/7: x = example.Mutant()
801/8: x.mut2(2)
802/1: import example
802/2: x = example.Mutant()
803/1: import example
803/2: x = example.Mutant()
803/3: x.mut1()
803/4: x.getMutationHash()
804/1: import example
804/2: x.getMutationHash()
804/3: x = example.Mutant()
804/4: x.mut1()
804/5: x._mutationHistory
804/6: x.mut1()
805/1: import example
805/2: x = example.Mutant()
805/3: x.mut1()
805/4: x._mutationHistory
806/1: import example
806/2: x = example.Mutant()
806/3: x.mut1()
806/4: x.mut1()
806/5: x._mutationHistory
807/1: import example
807/2: x = example.Mutant()
807/3: import example
807/4: x = example.Mutant()
808/1: import example
808/2: x = example.Mutant()
808/3: x.mut1()
808/4: x.mut1()
808/5: x.mut1()
808/6: x._mutationHistory
809/1: import example
810/1: import example
810/2: x = example.Mutant()
810/3: x.mut1()
810/4: x.mut2(2)
810/5: x.mut3(3)
810/6: x._mutationHistory
810/7: x.aaa
810/8: x.aaa
811/1: import example
811/2: x = example.Mutant()
811/3: x.mut1()
811/4: x.mut2(2)
811/5: x.mut3(3)
811/6: x._mutationHistory
812/1: %load_ext autoreload
812/2: %autoreload 2
812/3: import example
812/4: x = example.Mutant()
812/5: x.mut1()
812/6: x._mutationHistory
812/7: import copy
812/8: copy.deepcopy(None)
812/9: x = example.Mutant()
812/10: x.mut1()
813/1: import copy
814/1: import example
814/2: x = example.Mutant()
814/3: x.mut1()
814/4: x.mut2(2)
814/5: x.mut3(3)
814/6: x._mutationHistory
814/7: import copy
814/8: copy.deepcopy(x)
814/9: y = copy.deepcopy(x)
814/10: y._mutationHistory
814/11: y.mut1()
814/12: y._mutationHistory()
814/13: y._mutationHistory
814/14: id(y)
814/15: id(x)
815/1: import example
815/2: x = example.Mutant()
815/3: x.mut1()
815/4: x.mut2(2)
815/5: x.mut3(3)
815/6: x._mutationHistory()
815/7: x._mutationHistory
816/1: import example
816/2: x = example.Mutant()
816/3: x.mut1()
816/4: x.mut3(3)
816/5: x.mut2(2)
816/6: x._mutationHistory
817/1: import example
817/2: import example
817/3: x = example.Mutant()
817/4: x.mut2(2)
817/5: x.mut3(3)
817/6: x.mut1()
817/7: x.getMutationHash(verbose=True)
817/8: x._mutationHistory()
817/9: x._mutationHistory
818/1: import example
818/2: x = example.Mutant()
818/3: x.mut1()
818/4: x.mut3(3)
818/5: x.mut2(2)
818/6: x.getMutationHash()
819/1: import example
819/2: x = example.Mutant()
819/3: x.mut1()
819/4: x.mut(2)
819/5: x.mut2(2)
819/6: x._mutationHistory
819/7: x.aaa
820/1: import example
820/2: x = example.Mutant()
820/3: x.mut1()
820/4: x.mut2(2)
820/5: x.mut3(3)
820/6: x._mutationHistory
821/1: import example
821/2: x = example.Mutant()
821/3: x.mut1()
821/4: x.mut2(2)
821/5: x.mut3(3)
821/6: x._mutationHistory
821/7: x.aaa
822/1: x = example.Mutant()
822/2: import example
822/3: x = example.Mutant()
822/4: x.mut2(2)
822/5: x._mutationHistory
822/6: x.aaa
822/7: x.aaa
822/8: x._mutationHistory
822/9: id(self)
822/10: id(x)
822/11: hash("asd sad as ")
823/1: import example
823/2: x = example.Mutant()
823/3: x.aaa
824/1: import example
824/2: x = example.Mutant()
824/3: x.mut1()
824/4: x.mut2(2)
824/5: x.mut3(3)
824/6: x._mutationHistory
824/7: x = example.Mutant()
824/8: x.mut1()
824/9: x.mut2(2)
824/10: x.mut3(3)
824/11: x._mutationHistory
824/12: x.getMutationHash(verbose=True)
824/13: x = example.Mutant()
824/14: x.mut3(3)
824/15: x.mut2(2)
824/16: x.mut1()
824/17: x._mutationHistory
824/18: x.getMutationHash(verbose=True)
824/19: x.aaa
824/20: x._mutationHistory
825/1: import os
825/2: os.chexi
826/1: float("1.33538165e+03")
827/1: import sys
828/1: import os
828/2: ?os.path.relapath
828/3: ?os.path.realpath
830/1: from cv2.version import ci_build, headless
830/2: headless
830/3: ?headless
831/1: import sys
831/2: sys.platform
831/3: sys.platform.startswith("linux")
832/1: import os
832/2: import PySide2
832/3: dirname = os.path.dirname(PySide2.__file__)
832/4: dirname
832/5: plugin_path = os.path.join(dirname, 'plugins', 'platforms')
832/6: plugin_path
833/1: import os
833/2: os.environ
833/3: os.environ["QT_PLUGIN_PATH"]
834/1: import cv2
834/2: cv2.__file__
835/1:
class sub(object):
    def __init__(self):
        self.aaa = 1
835/2: sub()
835/3: a = sub()
835/4: a = sub().aaa
835/5: a
835/6: a = sub()
835/7: a.aaa
835/8:
class sup(object):
    def __init__(self):
        self.aaa = 1
835/9:
class sub(sup):
    def __init__(self):
        super().__init__()
835/10: a = sub()
835/11: a.aaa
835/12:
class sub(sup):
    def __init__(self , org = Nonei):
        if(org is None):
            super().__init__()
         else:
            super().__init__(org)
835/14:
class sub(sup):
    def __init__(self , org = Nonei):
        if(org is None):
            super().__init__()
        else:
            super().__init__(org)
835/15:
class sub(sup):
    def __init__(self , org = None):
        if(org is None):
            super().__init__()
        else:
            super().__init__(org)
835/16: a = sub()
835/17: a = sup()
835/18: a.aaa
835/19: b = sub()
835/20: b.aaa
835/21: b = sub(a)
836/1: import pickle
836/2: a = {1:2,3:4}
836/3: ?pickle.encode_long
836/4: ?pickle.pack
836/5: ?pickle.pack
836/6: cd ..
836/7: ls
837/1: import pickle
837/2:
def calculatePickleState(x):
    return pickle.dumps(x , 0).decode()
837/3: a = {1:2 , 3:4}
837/4: calculatePickleState(a)
837/5:
def calculatePickleState(x):
    return hash(pickle.dumps(x , 0))
837/6: calculatePickleState(a)
837/7:
class mut(object):
    def __init__(self):
        self.dict = {1 : [2] , 3: [4]}
837/8: a = mut()
837/9: a.dict
837/10: calculatePickleState(a)
837/11: a.dict[1]
837/12: a.dict[1] = [2 , 3 , 4]
837/13: a.dict
837/14: calculatePickleState(a)
837/15: a.dict[1] = [2]
837/16: calculatePickleState(a)
837/17:
def doNothing():
    return
837/18: doNothing()
837/19:
def doNothing():
    return
    print(123)
837/20: doNothing()
837/21: b = []
837/22: b.append(1)
837/23: import cv2
837/24: ?cv2.putText
837/25: import argumentparser
837/26: import argparse
838/1: [1 , 2 ,3].rotat:q
839/1: import cv2
839/2: ?cv2.imread
839/3: ?cv2.imread
840/1: import cv2
840/2: im = cv2.imread("info.png")
840/3: cv2.imshow(im)
840/4: cv2.imshow("fsf" , im)
840/5: cv2.destroyAllWindows()
840/6: im.shape
840/7: im[1,:]
841/1: import cv2
841/2: cv2.imshow("fsf" , im , 0)
841/3: im = cv2.imread("info.png" , 0)
841/4: im.shape
841/5: im[1,:]
841/6: im[2,:]
841/7: im[10,:]
841/8: im
841/9: import numpy
841/10: im = numpy.zeros(im.shape , dtype = im.dtype)
841/11: im = cv2.imread("info.png" , 0)
841/12: im == numpy.zeros(im.shape , dtype = im.dtype)
841/13: numpy.array_equal(im , numpy.zeros(im.shape , dtype = im.dtype))
842/1: import cv2
842/2: im = cv2.imread("info.png" , 0)
842/3: im = cv2.imread("info.png" , 0)
842/4: im[1]
842/5: im[200:500] = 0
842/6: im
842/7: im.shape
843/1:
class mut(object):
    def __init__(self):
        self.dict = {1 : [2] , 3: [4]}
843/2: a = mut()
843/3: a.bbb = 123
843/4: a.bbb
843/5: a.aaa
843/6: a.dict
843/7: eixt
844/1: from setuptools import setup
845/1: import pickle
845/2: a = None
845/3: hash(pickle.dumps(a , 0))
845/4: hash(pickle.dumps(a , 0))
846/1: import numpy
847/1: import from setuptools import setup
847/2: from setuptools import setup
847/3: ?setup
848/1: a = [1 , 2 , 3]
848/2: not 1 in a
848/3: not 10 in a
849/1: ord('0')
849/2: ord('1')
849/3: ord('9')
852/1: import cv2
852/2: cv2.version
852/3: cv2.version.opencv_version
853/1: import os
853/2: import PySilde2
853/3: import PySide2
853/4: dirname = os.path.dirname(PySide2.__file__)
853/5: os.path.join(dirname, 'plugins', 'platforms')
855/1: a = [0 , 1 , 2 , 3]
855/2: None in a
856/1: a = []
856/2: a.append(None)
856/3: a
857/1: ls
857/2: ls
857/3: import PyQt5
857/4: import PySide2
857/5: ipython
857/6: import os
857/7: from PyQt5.QtCore import QLibraryInfo
857/8: import cv2
857/9:
QLibraryInfo.location(
    QLibraryInfo.PluginsPath
)
858/1: import pathlib
858/2: pathlib.Path(__file__)
859/1: import betterCam
859/2: betterCam.betterCam.main()
859/3: from betterCam import betterCam
859/4: betterCam.main
860/1: from bettercam import betterCam
861/1: from bettercam import betterCam
862/1: import bcam
862/2: bcam.main()
863/1: import bcam
863/2: bcam.main
864/1: import bcam
864/2: bcam.main
865/1: import bcam
866/1: import bcam
866/2: import bcam.betterCamera
867/1: import bcam.betterCamera
867/2: bcam.betterCamera.main
868/1: import os
868/2: os.path.curdir()
868/3: os.path.curdir
868/4: os.getcwd()
869/1: type([0 , 1 , 2])
869/2: type((1.0 , 2.0))
869/3: isinstance((1.0 , 2.0) , tuple)
869/4:
class cl1:
    def __init__(self):
        self.val = cl2()
class cl2:
    def __init__(self):
        self.val = cl1()
869/5: cl1()
870/1: import os
870/2: os.listdir("../inne/")
870/3: import re
870/4: dmy = re.compile('.*\d\d\.\d\d.\d\d\d\d.*')
870/5: dmy.match('SpotkanieTomaszRafal_2021-04-19')
870/6: dmy.match('spotkanie_03-12-2021')
870/7: dmy = re.compile(r'.*\d\d\.\d\d.\d\d\d\d.*')
870/8: dmy.match('spotkanie_03-12-2021')
870/9: dmy = re.compile(r'.*\d\d-\d\d-\d\d\d\d.*')
870/10: dmy.match('spotkanie_03-12-2021')
870/11: dmy = re.compile(r'.*(\d\d)-(\d\d)-(\d\d\d\d).*')
870/12: dmy.match('spotkanie_03-12-2021').group(0)
870/13: dmy.match('spotkanie_03-12-2021').group(1)
870/14: dmy.match('spotkanie_03-12-2021').group(2)
870/15: dmy.match('spotkanie_03-12-2021').group(4)
870/16: dmy.match('spotkanie_03-12-2021').group(3)
870/17: %edit
870/18: getDate('spotkanie_03-12-2021')
870/19: %edit
870/20: %edit getDate
870/21: %edit getDate
870/22: getDate('spotkanie_03-12-2021')
870/23: %edit getDate
870/24: getDate('spotkanie_03-12-2021')
870/25: getDate('SpotkanieTomaszRafal_2021-04-19')
870/26: dirs = os.listdir("../inne/")
870/27: dirs
870/28: for file in dirs
870/29:
for file in dirs:
    print(os.listdir(os.path.join("../inne" , file)))
870/30:
for d in dirs:
    path = os.path.join("../inne" , d)
    files = os.listdir(path)
    if 'readme.md' in map(lambda s : s.lower() , files):
        print(files)
870/31:
for d in dirs:
    path = os.path.join("../inne" , d)
    files = os.listdir(path)
    if 'readme.md' in map(lambda s : s.lower() , files):
        print(getDate(d))
870/32:
for d in dirs:
    path = os.path.join("../inne" , d)
    files = os.listdir(path)
    if 'readme.md' in map(lambda s : s.lower() , files):
        print(getDate(d))
        readmeFile = None
        if('readme.md' in files):
            readmeFile = os.path.join("../inne" , d , 'readme.md')
        else:
            readmeFile = os.path.join("../inne" , d , 'README.md')
        print(readmeFile)
870/33:
result = ""
for d in dirs:
    path = os.path.join("../inne" , d)
    files = os.listdir(path)
    if 'readme.md' in map(lambda s : s.lower() , files):
        readmeFile = None
        if('readme.md' in files):
            readmeFile = os.path.join("../inne" , d , 'readme.md')
        else:
            readmeFile = os.path.join("../inne" , d , 'README.md')
        with open(readmeFile , "r") as f:
            date = getDate(d)
            result += '#bn# =' + str(date[0]) + "." + str(date[1]) + "." + str(date[2]) + "\n"
            result += '#ti# ' + d + "\n"
            result += f.read() + "\n"
            result += '#nb#'
870/34: result
870/35: print(result)
870/36:
dirs = os.listdir("../inne")
result = ""
for d in dirs:
    path = os.path.join("../inne" , d)
    files = os.listdir(path)
    if 'readme.md' in map(lambda s : s.lower() , files):
        readmeFile = None
        if('readme.md' in files):
            readmeFile = os.path.join("../inne" , d , 'readme.md')
        else:
            readmeFile = os.path.join("../inne" , d , 'README.md')
        with open(readmeFile , "r") as f:
            date = getDate(d)
            result += '#bn# =' + str(date[0]) + "." + str(date[1]) + "." + str(date[2]) + "\n"
            result += '#ti# ' + d + "\n"
            result += f.read() + "\n"
            result += '#nb#'
870/37:
dirs = os.listdir("../inne")
dirs.sort(key = lambda s : getDate(s)[0] * 40 + getDate(s)[1] * 40 * 40 + getDate(s)[2] * 40 * 40 * 100000)
result = ""
for d in dirs:
    path = os.path.join("../inne" , d)
    files = os.listdir(path)
    if 'readme.md' in map(lambda s : s.lower() , files):
        readmeFile = None
        if('readme.md' in files):
            readmeFile = os.path.join("../inne" , d , 'readme.md')
        else:
            readmeFile = os.path.join("../inne" , d , 'README.md')
        with open(readmeFile , "r") as f:
            date = getDate(d)
            result += '#bn# =' + str(date[0]) + "." + str(date[1]) + "." + str(date[2]) + "\n"
            result += '#ti# ' + d + "\n"
            result += f.read() + "\n"
            result += '#nb#'
870/38: print(result)
870/39:
dirs = os.listdir("../inne")
dirs.sort(key = lambda s : getDate(s)[0] * 40 + getDate(s)[1] * 40 * 40 + getDate(s)[2] * 40 * 40 * 100000)
result = ""
for d in dirs:
    path = os.path.join("../inne" , d)
    files = os.listdir(path)
    if 'readme.md' in map(lambda s : s.lower() , files):
        readmeFile = None
        if('readme.md' in files):
            readmeFile = os.path.join("../inne" , d , 'readme.md')
        else:
            readmeFile = os.path.join("../inne" , d , 'README.md')
        with open(readmeFile , "r") as f:
            date = getDate(d)
            result += '#bn# =' + str(date[0]) + "." + str(date[1]) + "." + str(date[2]) + "\n"
            result += '#ti# ' + d + "\n"
            result += f.read() + "\n"
            result += '#nb#\n'
870/40:
dirs = os.listdir("../inne")
dirs.sort(key = lambda s : getDate(s)[0] * 40 + getDate(s)[1] * 40 * 40 + getDate(s)[2] * 40 * 40 * 100000)
result = ""
for d in dirs:
    path = os.path.join("../inne" , d)
    files = os.listdir(path)
    if 'readme.md' in map(lambda s : s.lower() , files):
        readmeFile = None
        if('readme.md' in files):
            readmeFile = os.path.join("../inne" , d , 'readme.md')
        else:
            readmeFile = os.path.join("../inne" , d , 'README.md')
        with open(readmeFile , "r") as f:
            date = getDate(d)
            result += '#bn# =' + str(date[0]) + "." + str(date[1]) + "." + str(date[2]) + "\n"
            result += '#ti# ' + d + "\n"
            result += f.read() + "\n"
            result += '#nb#\n'
870/41: print(result)
870/42:
with open("../inne/spotkania.md" , "w") as f:
    f.write(result)
870/43:
with open("../inne/spotkania.md" , "w") as f:
    f.write(result)
871/1:
def doNothing():
    pass
871/2: doNothing()
872/1: import cv2
872/2: ?cv2.warpPerspective
872/3: ?cv2.warpPerspective
872/4: clear
872/5: ?cv2.warpPerspective
873/1: a = 1.0
873/2: b = 2.0
873/3: a is a
873/4: a is b
873/5: b is b
873/6: c = b
873/7: c is b
874/1: import pil
874/2: import PIL
876/1: import cv2
876/2: import numpy
876/3: exti
877/1: import cv2
878/1: import scipy
879/1: a = 1
879/2: hasattr(a , __eq__)
879/3: hasattr(a , "__eq__")
879/4: [1 , 2 , 3] == [1 , 2 , 3]
879/5: [1 , 2 , 3] == [1 , 2 , 4]
880/1: a = 1
880/2: b = "123"
880/3: a == b
881/1: a = [0 , 1 , 2]
881/2: b = [2 , 1 , 0]
881/3: a == b
881/4: a == a
881/5: c = [0 , 1 , 2]
881/6: a == v
881/7: a == c
881/8: a is c
881/9: ?setattr
882/1: import time
882/2: seconds = time.time()
882/3: seconds
882/4: seconds = time.time()
882/5: time.time()
882/6: time.time()
882/7: time.time()
882/8: time.time()
883/1:
if None:
    print(123)
884/1:
class temp:
    def __init__(self):
        self.aaa = 1
884/2: a = temp()
884/3: a.aaa
884/4: a.__eq__(a)
884/5: hash(a)
884/6: b = temp()
884/7: a == b
884/8: a is b
884/9: a.aaa == b.aaa
884/10: a = 1123
884/11: for x in a
884/12:
for x in a:
    print x
884/13:
for x in a:
    print(x)
884/14:
if not None:
    print(123)
885/1: import requests
886/1: import mechanize
886/2: eit
887/1: import matplotlib
888/1: import matplotlib.pyplot as plt
889/1:
data = []
with open("./DATASLS", "r") as f:
    for line in f.readlines():
        data.append(list(map(float, line.split())))
889/2: data
889/3: import matplotlib.pyplot as plt
889/4: plt.plot(data)
889/5: plt.show()
889/6:
datax = []
datay = []
with open("./DATASLS", "r") as f:
    for line in f.readlines():
        size, time = tuple(map(float, line.split))
        datax.append(size)
        datay.append(time)
889/7:
datax = []
datay = []
with open("./DATASLS", "r") as f:
    for line in f.readlines():
        size, time = list(map(float, line.split))
        datax.append(size)
        datay.append(time)
889/8:
datax = []
datay = []
with open("./DATASLS", "r") as f:
    for line in f.readlines():
        size = list(map(float, line.split))
        datax.append(size)
889/9:
datax = []
datay = []
with open("./DATASLS", "r") as f:
    for line in f.readlines():
        newdata = list(map(float, line.split()))
        datax.append(newdata[0])
        datay.append(newdata[1])
889/10: datax
889/11: datay
889/12: plt.plot(datax , datay)
889/13: plt.show()
890/1: import matplotlib.pyplot as plt
891/1: datax = []
891/2: datay = []
891/3:
with open("./DATASLS", "r") as f:
    for line in f.readlines():
        newdata = list(map(float, line.split()))
        datax.append(newdata[0])
        datay.append(newdata[1])
891/4: datax
891/5: datay
891/6: import matplotlib.pyplot as plt
891/7: plt.plot(datax, datay)
891/8: plt.show()
892/1: import ROOT
893/1: import ROOT
893/2: import numpy
893/3: import os
893/4: DIR = os.path.dirname(os.path.realpath(__file__))
893/5: DIR = os.path.dirname(os.path.realpath('./'))
893/6: DIR
893/7: ls
893/8: infile = ROOT.TFile(os.path.join(DIR , "hits.root") , "READ")
894/1: import os
894/2: import ROOT
894/3: import numpy
894/4: infile = ROOT.TFile("hits.root" , "READ")
894/5: tree = infile.Get("Hits")
894/6:
for event in tree:
    print(event)
894/7: infile = ROOT.TFile("hits.root", "READ")
894/8: infile
894/9: ?infile.Info
894/10: infile.Info()
894/11: infile.ls()
894/12: tree = infile.Get("Hits")
894/13: tree.ls()
894/14: tree.Print()
894/15: infile = ROOT.TFile("hits.root", "READ")
894/16: tree = infile.Get("Hits")
894/17: tree = infile.Get("hits")
894/18: infile = ROOT.TFile("hits.root", "READ")
894/19: tree = infile.Get("hits")
894/20: tree.Print()
894/21:
for event in tree:
    print(event.event_id, event.tpx, event.tpy, event.tpz)
894/22: tree.Print()
895/1: import os
895/2: import numpy
895/3: import ROOT
895/4: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
895/5: infile.ls()
895/6: tree = infile.Get("particles")
895/7: tree.ls()
895/8: tree.Print()
895/9: ROOT.TFile("fatras_particles_final.root", "READ")
895/10: ROOT.TFile("fatras_particles_final.root", "READ").ls()
895/11: ROOT.TFile("fatras_particles_final.root", "READ").Get("particles")
895/12: ROOT.TFile("fatras_particles_final.root", "READ").Get("particles")
895/13: infile = ROOT.TFile("fatras_particles_final.root", "READ")
895/14: infile.ls()
895/15: tree = infile.Get("particles")
895/16: tree.Print()
895/17: infile = ROOT.TFile("hits.root", "READ")
895/18: infile.ls()
895/19: tree = infile.Get("hits")
895/20: tree.Print()
895/21: particleIds = []
895/22:
for event in tree:
    particleIds.append(event.particle_id)
895/23: particleIds
895/24: pIds = set(particleIds)
895/25: pIds
895/26: tree.Print()
895/27: particleIds = []
895/28:
for event in tree:
    particleIds.append(event.event_id)
895/29: particleIds
895/30: set(particleIds)
896/1: import Dual
898/1: import Dual
898/2: ls
898/3: import dual
898/4: x = dual.Dual(1.0, 2.0)
898/5: x
898/6: print(x)
898/7: print(x)
899/1: import dual
899/2: x =dual.Dual(1.0 , 2.0)
899/3: x
899/4: print(x)
900/1: import dual
900/2: x = dual.Dual(1.0, 2.0)
900/3: x
900/4: y = dual.Dual(2.0, 1.0)
900/5: x + y
900/6: x - y
900/7: x * y
901/1: import dual
901/2: x = dual.Dual(1.0, 2.0)
901/3: y = dual.Dual(2.0, 1.0)
901/4: x * y
901/5: x - y
901/6: x + y
901/7:
def poly(x):
    return 2 * x * x - 10 * x + 11
901/8: x = dual.Dual(3.0, 1.0)
901/9: poly(x)
902/1: %load_ext autoreload
902/2: %autoreload 2
902/3: import dual
902/4: import dual
902/5:
def poly(x):
    return 2 * x * x - 10 * x + 11
902/6: x = dual.Dual(3.0, 1.0)
902/7: y = dual.Dual(2.0, 1.0)
902/8: x + y
902/9: x - y
902/10: 2 * x
902/11: x * 2
902/12: x * 2
902/13:
def poly(x):
    return x * x * 2 - x * 10 + 11
902/14: poly(x)
902/15: x = dual.Dual(4.0, 1.0)
902/16: poly(x)
902/17:
def poly(x):
    return x * x * 2 - x * 10 + 21
902/18: x = dual.Dual(4.0, 1.0)
902/19: poly(x)
902/20: range(10)
902/21: list(range(10))
902/22: 1!
902/23: list(range(1 , 10))
902/24: cal_exp
902/25: import dual
902/26: dual.cal_exp(10, 1.0)
902/27: x = dual.Dual(1.0, 1.0)
902/28: dual.cal_exp(x, 1.0)
902/29: dual.cal_exp(10, x)
902/30: dual.cal_exp(10, x)
902/31: dual.cal_exp(100, x)
903/1: import dual
903/2: x = dual.Dual(11.0, -1.0)
903/3: y = dual.Dual(2.0, 1.0)
903/4: x + y
903/5:
def poly(x):
    return x * x * 2 - x * 10 + 21
903/6: x = dual.Dual(4.0, 1.0)
903/7: poly(x)
903/8:
def poly(x):
    return x * x * 3 + x * 2 + 3
903/9: x = dual.Dual(7.0, 1.0)
903/10: poly(x)
903/11: import expser
903/12: x = dual.Dual(1.0, 1.0)
903/13: expser.cal_exp(x)
903/14: expser.cal_exp(10 , x)
903/15: expser.cal_exp(100 , x)
904/1: ls
905/1: ls
905/2: pwd
905/3: %autoreload 2
905/4: %load_ext autoreload
905/5: %autoreload 2
905/6: import dual
905/7: x = dual.Dual(1.0, 1.0)
905/8: 2 * x
905/9: x * 2
905/10: -x
905/11: -x
905/12: x + 2
905/13: 2 + x
905/14: import dual
905/15: x = dual.Dual(1.0, 1.0)
905/16: dual.cal_exp(100, x)
905/17: import dual
905/18: x = dual.Dual(1.0, 1.0)
905/19: import math
905/20: math.sin(1.0)
905/21: math.cos(1.0)
905/22: import dual
905/23: import math
905/24: x = dual.Dual(1.0, 1.0)
905/25: dual.sinSeries(10 , 1.0)
905/26: dual.sinSeries(10 , 1.0)
905/27: dual.sinSeries(10 , x)
905/28: dual.sinSeries(20 , x)
905/29: dual.sinSeries(1000 , x)
906/1: %load_ext autoreload
906/2: %autoreload 2
906/3: import math
906/4: import dual
907/1: %autoreload 2
907/2: %load_ext autoreload
907/3: import math
907/4: import dual
907/5: x = dual.Dual(1.0, 1.0)
907/6: dual.sinSeries(100, x)
907/7: dual.cosSeries(100, x)
907/8: dual.sinSeries(1, x)
907/9: dual.sinSeries(3, x)
907/10: dual.sinSeries(4, x)
907/11: dual.sinSeries(5, x)
907/12: x = dual.Dual(1.0, 1.0)
907/13: dual.sinSeries(4, x)
909/1: import dual
909/2: x = dual.Dual(1.0, 1.0)
909/3: dual.sinSeries(10, x)
910/1: import dual
910/2: x = dual.Dual(1.0, 1.0)
910/3: dual.sinSeries(10, x)
911/1: import dual
911/2: x = dual.Dual(1.0, 1.0)
911/3: dual.sinSeries(10, x)
912/1: import dual
912/2: x = dual.Dual(1.0, 1.0)
912/3: dual.sinSeries(10, x)
912/4: dual.sinSeries(3, x)
912/5: dual.sinSeries(4, x)
912/6: dual.sinSeries(5, x)
912/7: dual.sinSeries(6, x)
913/1: %load_ext autoreload
913/2: %autoreload 2
913/3: import dual
913/4: x = dual.Dual(1.0, 1.0)
913/5: x = dual.Dual(1.0, 1.0)
913/6: dual.sinSeries(10, x)
913/7: dual.sinSeries(10, x)
913/8: dual.sinSeries(10, x)
913/9: dual.sinSeries(10, x)
913/10: dual.cosSeries(10, x)
913/11: dual.sinSeries(3, x)
913/12: dual.sinSeries(4, x)
913/13: dual.cosSeries(4, x)
913/14: dual.sinSeries(40, x)
913/15: dual.sinSeries(4, x)
913/16: dual.cosSeries(4, x)
913/17: dual.sinSeries(4, x)
913/18: dual.sinSeries(4, x)
913/19: dual.sinSeries(4, x)
913/20: dual.cosSeries(4, x)
913/21: dual.Dual(1.0 , 2.0) * (1.0 / 6.0)
913/22: 0.6988095238095239 / 0.6988095238095239
913/23: 0.6988095238095239 / 0.5402777777777777
913/24: 1/%
913/25: 0.5402777777777777 / 0.6988095238095239
913/26: x = dual.Dual(1.0, 1.0)
913/27: dual.sinSeries(4, x)
913/28: dual.cosSeries(4, x)
913/29:
def poly(x):
    return x - x * x * x * (1.0 / 6.0) + x * x * x * x * x * (1.0 / 120)
913/30: poly(x)
913/31:
def poly(x):
    return (
        x
        - x * x * x * (1.0 / 6.0)
        + x * x * x * x * x * (1.0 / 120)
        + x * x * x * x * x * x * x * (1.0 / 5040)
    )
913/32: poly(x)
913/33: dual.sinSeries(4, x)
913/34: import math
913/35: math.sin(1.0)
913/36: dual.sinSeries(4, x)
913/37: x * x
913/38: x * x * x
913/39: x * x * x * x * x
913/40:
def poly(x):
    return (
        x
        - x * x * x * (1.0 / 6.0)
        + x * x * x * x * x * (1.0 / 120)
        + x * x * x * x * x * x * x * (1.0 / 5040)
    )
913/41: x
913/42: poly(x)
913/43: dual.sinSeries(4, x)
913/44: x
913/45: x * x * x
913/46: dual.sinSeries(4, x)
913/47: x
913/48: x * x * x
913/49: x
913/50: dual.sinSeries(4, x)
913/51: dual.sinSeries(3, x)
913/52: dual.sinSeries(4, x)
913/53:
def poly(x):
    return (
        x
        - x * x * x * (1.0 / 6.0)
        + x * x * x * x * x * (1.0 / 120)
        + x * x * x * x * x * x * x * (1.0 / 5040)
    )
913/54: x
913/55: x * x * x * (-1.0)
913/56: x * x * x
913/57: dual.sinSeries(4, x)
913/58: dual.sinSeries(4, x)
913/59: x * x * x * x * x
913/60:
def poly(x):
    return (
        x
        - x * x * x * (1.0 / 6.0)
        + x * x * x * x * x * (1.0 / 120)
        + x * x * x * x * x * x * x * (1.0 / 5040)
    )
913/61: 1
913/62: x * x * x
913/63: x * x * x * x * x
913/64: dual.sinSeries(4, x)
913/65: dual.sinSeries(4, x)
913/66: x * x
913/67: dual.sinSeries(4, x)
913/68: dual.sinSeries(10, x)
913/69: dual.cosSeries(10, x)
913/70: x = dual.Dual(2.0, 1.0)
913/71: dual.sinSeries(10, x)
913/72: dual.cosSeries(10, x)
913/73: q
913/74: :q
914/1: import scipy.spatial.transform
914/2: import scipy.spatial.transform as sst
914/3: import numpy as np
914/4: sst.Rotation.from_rotvec(0.1, np.array([0, 0, 1]))
914/5: sst.Rotation.from_rotvec(np.pi/2 * np.array([0, 0, 1]))
914/6: sst.Rotation.from_rotvec(np.pi / 2 * np.array([0, 0, 1])).as_matrix()
915/1: import numpy as np
915/2: import ROOT
915/3: import matplotlib.pyplot as plt
915/4: infile = ROOT.TFile("hits.root", "READ")
915/5: tree = infile.Get("hits")
915/6: tree.Print()
915/7: tree.ls()
915/8:
for event in tree:
    pass
915/9: infile = ROOT.TFile("./fatras_particles_initial.root", "READ")
915/10: infile.ls()
915/11: infile.TTree
915/12: infile = ROOT.TFile("./fatras_particles_initial.root", "READ")
915/13: tree = infile.Get("TTree")
915/14: tree.Print()
915/15: tree = infile.Get("particles")
915/16: tree.Print()
915/17: tree.particles
915/18: tree.Get("particles")
915/19:
for event in tree:
    print(event.event_id)
915/20:
for event in tree:
    print(event.event_id)
915/21: len(tree)
915/22: tree.Dictionary()
915/23: print(tree.Dictionary())
915/24: tree.Dictionary()["event_id"]
915/25: tree.GetEntries()
915/26: infile = ROOT.TFile("hits.root", "READ")
915/27: tree = infile.Get("hits")
915/28: tree.Print()
915/29: infile = ROOT.TFile("./fatras_particles_initial.root", "READ")
915/30: tree.Print()
915/31: tree = infile.Get("particles")
915/32: tree.Print()
915/33:
for event in tree:
    print(event.event_id, event.sub_particle)
915/34: tree.Print()
915/35:
for event in tree:
    print(event.event_id, event.generation)
915/36: tree.Print()
915/37: infile = ROOT.TFile("./fatras_particles_initial.root", "READ").Get("TreeS")
915/38: infile
915/39: infile.AsMatrix(["p"])
915/40: f = ROOT.TFile.Open("./fatras_particles_initial.root")
915/41: t = f.Get("TreeS")
915/42: data = t.AsMatrix(["p"])
915/43: t = f.Get("Tree")
915/44: t
915/45: data = t.AsMatrix(["p"])
915/46: f.ls()
915/47: t = f.Get("TTree")
915/48: t
915/49: t = f.Get("particles")
915/50: t
915/51: t.AsMatrix(["p"])
915/52: t.AsMatrix(["vx"])
915/53: t.AsMatrix(["vx"])
915/54:
for event in t:
    print(event.event_id, event.vx)
915/55:
for event in t:
    print(event.event_id, event.vy)
915/56: infile = ROOT.TFile("./fatras_particles_initial.root", "READ")
915/57: tree = infile.Get("particles")
915/58:
for event in t:
    evid, vx = event.event_id, event.vx
    print(evid, vx)
915/59: tree.Print()
915/60: tree.Get("vx")
915/61: tree.vx
915/62: tree.vz
915/63: infile.Get("vx")
915/64: infile.Get("particles")
915/65: tree = infile.Get("particles")
915/66: ?ROOT.RDataFrame
915/67: ?ROOT.RDataFrame.AsNumpy
915/68: ?ROOT.RDataFrame
915/69: np.zeros(100)
915/70: np.zeros(100 , dtype = np.float64)
915/71: infile = ROOT.TFile("./fatras_particles_initial.root", "READ")
915/72: tree = infile.Get("particles")
915/73: tree.Print()
915/74:
for event in t:
    print(event.pz)
915/75:
for event in t:
    print(event.pz[0])
915/76:
for event in t:
    print(event.pz[1])
915/77:
for event in t:
    print(event.pz[0])
915/78:
for event in t:
    print(event.pz[0])
915/79: infile = ROOT.TFile("./fatras_particles_final.root", "READ")
915/80: tree = infile.Get("particles")
915/81:
for event in t:
    print(event.pz[0])
915/82: 2.7231740951538086 - 2.7231740951538086
915/83: 1.5247633457183838 - 1.5247633457183838
917/1: import ROOT
917/2: infile = ROOT.TFile("./fatras_particles_final.root", "READ")
917/3: infile = ROOT.TFile("./fatras_particles_initial.root", "READ")
917/4: tree = infile.Get("particles")
917/5:
for event in t:
    print(event.q[0])
917/6:
for event in tree:
    print(event.q[0])
917/7:
for event in tree:
    print(event.m[0])
917/8: sst.Rotation.from_rotvec(np.pi / 2 * np.array([0, 0, 1])).as_matrix()
917/9: import scipy.spatial.transform as sst
917/10: import scipy.spatial.transform as sst
917/11: sst.Rotation.from_rotvec(np.pi / 2 * np.array([0, 0, 1])).as_matrix()
917/12: import numpy as np
917/13: sst.Rotation.from_rotvec(np.pi / 2 * np.array([0, 0, 1])).as_matrix()
917/14: ?np.dot
917/15: ?np.ptp
917/16: plt.set_aspect
917/17: import matplotlib.pyplot as plt
917/18: from mpl_toolkits.mplot3d import Axes3D
917/19: ?Axes3D.set_aspect
917/20: np.array([0, 1, 2, 3, 4])[2:3]
917/21: np.array([0, 1, 2, 3, 4])[2:4]
917/22: ?sst.Rotation
918/1: import numpy as np
918/2: np.where(np.array([0, 1, 2, 3, 4]) == 1.0)
918/3: np.where(np.array([0, 1, 2, 3, 4]) == 1.0)[0]
918/4: np.where(np.array([0, 1, 2, 3, 4]) == 2.0)[0]
919/1: import dual
919/2: x = dual.Dual(2.0, 1.0)
919/3: y = dual.Dual(4.0, -5.0)
919/4: x + y
919/5: x * y
919/6: x * 10
919/7:
def poly(x):
    return x * x * 3 + x * 2 + 3
919/8: x = dual.Dual(2.0, 1.0)
919/9: poly(x)
919/10: import math
919/11: math.exp(1.0)
919/12: x = dual.Dual(1.0, 1.0)
919/13: dual.expSeries(10 , x)
919/14: x = dual.Dual(3.0, 1.0)
919/15: dual.cosSeries(10, x)
919/16: dual.sinSeries(10, x)
920/1: impor ROOT
920/2: import ROOT
920/3: infile = ROOT.TFile("./fatras_particles_initial.root", "READ")
920/4: tree = infile.Get("particles")
920/5: tree.Print()
920/6:
for event in tree:
    print(event.q[0])
920/7:
for event in tree:
    print(event.m[0])
921/1: import numpy as np
921/2: arr = np.array([2.0 , 3.0 , 0.1  , 2.5])
921/3: np.ptp(arr)
921/4: np.min(arr)
921/5: np.max(arr)
922/1: import numpy as np
922/2: np.linalg.norm(np.array([1.0 , 1.0]))
922/3: np.sqrt(2)
923/1: import numpy as np
923/2: import matplotlib.pyplot as plt
923/3: ?plt.hist2D
923/4: ?plt.hist2d
924/1: import matplotlib.pyplot as plt
924/2: ?plt.hist2d
924/3: :q
925/1: import numpy as np
925/2: ?np.histogram2d
926/1: from mpl_toolkits.mplot3d import axes3D
926/2: axes3D.get_test_data(0.05)
926/3: from mpl_toolkits.mplot3d import axes3d
926/4: axes3d.get_test_data(0.05)
927/1: a = [0, 1, 2, 3]
927/2: a[:-1]
928/1: import ROOT
928/2: infile = ROOT.TFile("./fatras_particles_initial.root", "READ")
928/3: infile.Print()
928/4: infile.ls()
928/5: tree =
928/6: tree = infile.Get("particles")
928/7: tree.Print()
929/1: import ROOT
929/2: infile = ROOT.TFile("./fatras_particles_initial.root", "READ")
929/3: tree = infile.Get("particles")
929/4: tree.Print()
930/1: import numpy as np
930/2: np.random.randint(0 , 3)
930/3: np.random.randint(0, 3)
930/4: np.random.randint(0, 3)
930/5: np.random.randint(0, 3)
930/6: np.random.randint(0, 3)
930/7: np.random.randint(0, 3)
930/8: np.random.randint(0, 3)
930/9: np.random.randint(0, 3)
930/10: np.random.randint(0, 3)
930/11: np.random.randint(0, 3)
930/12: np.random.randint(0, 3)
930/13: np.random.randint(0, 3)
930/14: np.random.randint(0, 3)
930/15: np.random.randint(0, 3)
930/16: np.random.randint(0, 3)
930/17: np.random.randint(0, 3)
930/18: np.random.randint(0, 3)
930/19: np.random.randint(0, 3)
930/20: np.random.randint(0, 3)
930/21: np.random.randint(0, 3)
930/22: np.random.randint(0, 3)
930/23: np.random.randint(0, 3)
930/24: np.random.randint(0, 3)
930/25: np.random.randint(0, 3)
930/26: np.random.randint(0, 3)
930/27: np.random.randint(0, 3)
930/28: np.random.randint(0, 3)
930/29: np.random.randint(0, 3)
930/30: np.random.randint(0, 3)
930/31: np.random.randint(0, 3)
930/32: np.random.randint(0, 3)
930/33: np.random.randint(0, 3)
930/34: np.random.randint(0, 3)
930/35: np.random.randint(0, 3)
930/36: np.random.randint(0, 3)
930/37: np.random.randint(0, 3)
930/38: np.random.randint(0, 4)
930/39: np.random.randint(0, 4)
930/40: np.random.randint(0, 4)
930/41: np.random.randint(0, 4)
930/42: np.random.randint(0, 4)
930/43: np.random.randint(0, 4)
930/44: np.random.randint(0, 4)
930/45: np.random.randint(0, 4)
930/46: np.random.randint(0, 4)
930/47: np.random.randint(0, 4)
930/48: np.random.randint(0, 4)
930/49: np.random.randint(0, 4)
930/50: np.random.randint(0, 4)
930/51: np.random.randint(0, 4)
930/52: np.random.randint(0, 4)
930/53: np.random.randint(0, 4)
930/54: np.random.randint(0, 4)
930/55: np.random.randint(0, 4)
930/56: np.random.randint(0, 4)
930/57: np.random.randint(0, 4)
930/58: np.random.randint(0, 4)
930/59: np.random.randint(0, 4)
930/60: np.random.randint(0, 4)
930/61: np.random.randint(0, 4)
930/62: np.random.randint(0, 4)
930/63: np.random.randint(0, 4)
930/64: np.random.randint(0, 4)
930/65: np.random.randint(0, 4 , size = 2)
930/66: np.random.randint(0, 4 , size = 100)
930/67: A = np.random.randint(5, size=(10, 3))
930/68: A
930/69: A[np.random.choice(A.shape[0], 2, replace=False), :]
930/70: np.random.choice(A.shape[0], 2, replace=False)
930/71: np.random.choice(A.shape[0], 2, replace=False)
930/72: np.random.choice(A.shape[0], 5, replace=False)
930/73: np.random.choice(A.shape[0], 5, replace=False)
930/74: np.random.choice(A.shape[0], 5, replace=False)
930/75: np.random.choice(A.shape[0], 5, replace=False)
930/76: np.random.choice(A.shape[0], 5, replace=False)
930/77: np.random.choice(A.shape[0], 5, replace=False)
930/78: np.random.choice(A.shape[0], 10, replace=False)
930/79: np.random.choice(A.shape[0], 10, replace=False)
930/80: np.random.choice(A.shape[0], 5, replace=False)
930/81: 3 in np.random.choice(A.shape[0], 5, replace=False)
930/82: 3 in np.random.choice(A.shape[0], 5, replace=False)
930/83: 3 in np.random.choice(A.shape[0], 5, replace=False)
930/84: 3 in np.random.choice(A.shape[0], 5, replace=False)
930/85: 3 in np.random.choice(A.shape[0], 5, replace=False)
930/86: 3 in np.random.choice(A.shape[0], 5, replace=False)
930/87: 3 in np.random.choice(A.shape[0], 5, replace=False)
930/88: 3 in np.random.choice(A.shape[0], 5, replace=False)
930/89: A
930/90: ?np.where
930/91: a = np.array([0 ,1 , 2 , 3 ,4 , 5 , 6 , 7 , 8 , 9])
930/92: np.where(a in [2, 3, 5])
930/93: element = 2 * np.arange(4).reshape((2, 2))
930/94: test_elements = [1, 2, 4, 8]
930/95: element
930/96: test_elements
930/97: mask = np.isin(element, test_elements)
930/98: mask
931/1: import ROOT
931/2: infile = ROOT.TFile("./pythia8_particles.root", "READ")
931/3: infile.ls()
931/4: tree = infile.Get("particles")
931/5: tree.Print()
931/6:
for event in tree:
    print(event.event_id)
931/7:
for event in tree:
    print(event.event_id)
931/8:
for event in tree:
    print(event.vx)
931/9:
for event in tree:
    print(event.vx[0])
931/10:
for event in tree:
    print(event.vx[1])
931/11:
for event in tree:
    print(len(event.vx))
931/12: infile = ROOT.TFile("./fatras_particles_initial.root", "READ")
931/13: tree = infile.Get("particles")
931/14: tree.print()
931/15: tree.Print()
931/16:
for event in tree:
    print(event.vx[0])
931/17:
for event in tree:
    print(event.vx[11])
931/18:
for event in tree:
    print(event.vx[111])
931/19: ls
931/20: infile = ROOT.TFile("./pythia8_particles.root", "READ")
931/21: tree = infile.Get("particles")
931/22: tree.print()
931/23: tree.Print()
931/24:
for event in tree:
    print(event.vx[12312])
931/25: infile = ROOT.TFile("./hits.root", "READ")
931/26: infile.ls()
932/1: A = np.random.randint(5, size=(10, 3))
932/2: import numpy as np
932/3: A = np.random.randint(5, size=(10, 3))
932/4: A
932/5: np.isin(A[:, 1], [1, 2])
932/6: np.where(np.isin(A[:, 1], [1, 2]))
932/7: A[np.where(np.isin(A[:, 1], [1, 2]))]
932/8: A[np.where(np.isin(A[:, 0], [1, 2]))]
932/9: A[np.where(np.isin(A[:, 0], np.array([1, 2])))]
931/27: tree.Print()
931/28: tree = infile.Get("hits")
931/29: tree.Print()
931/30:
for event in tree:
    tx, ty, tz = event.tx, event.ty, event.tz
    prin(tx)
931/31:
for event in tree:
    tx, ty, tz = event.tx, event.ty, event.tz
    print(tx)
931/32: ids = []
931/33:
for event in tree:
    ids.append(event.event_id)
931/34: setids = set(ids)
931/35: setids
931/36:
single = []
for event in tree:
    eid, tx, ty, tz = event.event_id, event.tx, event.ty, event.tz
    if eid == 22:
        single.append([tx, ty, tz])
931/37: len(single)
931/38: single[1:10]
931/39: single[100:200]
931/40: infile = ROOT.TFile("../B/hits.root", "READ")
931/41: tree.Print()
931/42: tree = infile.Get("hits")
931/43:
single = []
for event in tree:
    eid, tx, ty, tz = event.event_id, event.tx, event.ty, event.tz
    if eid == 22:
        single.append([tx, ty, tz])
931/44: len(single)
931/45: tree.Print()
931/46:
single = []
for event in tree:
    eid, tx, ty, tz = event.event_id, event.tx, event.ty, event.tz
    if eid == 12:
        print("!!!")
        single.append([tx, ty, tz])
931/47:
single = []
for event in tree:
    eid, tx, ty, tz = event.event_id, event.tx, event.ty, event.tz
    if eid == 12:
        single.append([tx, ty, tz])
931/48: single
931/49:
single = []
for event in tree:
    eid, tx, ty, tz = event.event_id, event.tx, event.ty, event.tz
    if eid == 22:
        single.append([tx, ty, tz])
931/50: single
931/51:
single = []
for event in tree:
    eid, tx, ty, tz = event.event_id, event.tx, event.ty, event.tz
    if eid == 23:
        single.append([tx, ty, tz])
931/52: single
931/53:
single = []
for event in tree:
    eid, tx, ty, tz = event.event_id, event.tx, event.ty, event.tz
    if eid == 123:
        single.append([tx, ty, tz])
931/54: single
931/55:
single = []
for event in tree:
    eid, tx, ty, tz = event.event_id, event.tx, event.ty, event.tz
    if eid == 321:
        single.append([tx, ty, tz])
931/56: single
931/57:
single = []
for event in tree:
    eid, tx, ty, tz = event.event_id, event.tx, event.ty, event.tz
    if eid == 8273:
        single.append([tx, ty, tz])
931/58: single
931/59:
single = []
for event in tree:
    eid, tx, ty, tz = event.event_id, event.tx, event.ty, event.tz
    if eid == 322:
        single.append([tx, ty, tz])
931/60: single
933/1: import numpy as np
933/2: np.where([0 , 1 , 2 , 0 , 2] > 0)
933/3: np.where(np.array([0 , 1 , 2 , 0 , 2]) > 0)
933/4: ?np.where
934/1: import numpy as np
934/2: ?np.std
935/1: import numpy as np
935/2: a = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
935/3: a[2:2]
935/4: a[2:3]
936/1: import numpy as np
936/2: ?np.arctan
937/1: import numpy as np
937/2: np.arctan(0.6256361612412578 , 0.327005974659245)
937/3: np.arctan(np.array([0.6256361612412578]) , np.array([0.327005974659245]))
937/4: ?np.arctan
938/1: import numpy as np
938/2: np.arctanc
938/3: np.arctan2
938/4: ?np.arctan2
939/1: import numpy as np
939/2: np.arctan(np.array([1.1]) , np.array([-1.0]))
940/1: import numpy as np
940/2: np.arctan2(np.array([1.1]) , np.array([-1.0]))
940/3: ?np.arctan2
940/4: np.arctan2(np.array([-1.0]) , np.array([1.0]))
940/5: np.arctan2(np.array([1.1]), np.array([-1.0]))
940/6: ?np.arctan2
941/1: import numpy as np
941/2: np.arctan(1.1 , -1.0)
941/3: import math
941/4: ?math.atan2
941/5: ? np.any
941/6: ?np.all
941/7: ?np.all
942/1: import numpy as np
942/2: ?np.random.choice
942/3: np.random.choice(A.shape[0], 5, replace=False)
942/4: A = np.random.randint(5, size=(10, 3))
942/5: np.random.choice(A.shape[0], 5, replace=False)
942/6: A.shape[0]
942/7: np.random.choice(100, 5, replace=False)
942/8: np.random.choice(100, 5, replace=False)
942/9: np.random.choice(100, 5, replace=False)
942/10: np.random.choice(100, 5, replace=False)
942/11: np.random.choice(100, 5, replace=False)
942/12: np.random.choice(100, 5, replace=False)
942/13: np.random.choice(100, 5, replace=False)
942/14: np.random.choice(100, 5, replace=False)
942/15: np.random.choice(100, 5, replace=False)
942/16: np.random.choice(100, 5, replace=False)
942/17: np.random.choice(100, 100, replace=False)
942/18: np.random.choice(100, 100, replace=False).shape
942/19: np.random.choice(range(100), 100, replace=False).shape
942/20: np.random.choice(range(100), 100, replace=False)
942/21: np.random.choice(range(100), 100, replace=False)
942/22: np.random.choice(range(100), 100, replace=False)
942/23: q
943/1: import temp
943/2: temp.build_graph(4)
943/3: temp.build_graph(2)
943/4: temp.build_graph(3)
943/5: temp.find_solution_for(3)
943/6: sorted([3 , 2 , 1])
943/7: sorted(3, 2, 1)
943/8: ?sorted
943/9: ?sort
943/10: sort
944/1: import temp
944/2: temp.find_solution_for(3)
944/3: a = temp.find_solution_for(3)
944/4: a
944/5: print(a)
944/6: temp.find_solution_for(4)
944/7: temp.find_solution_for(5)
944/8: temp.find_solution_for(6)
945/1: import knight
945/2: knight.build_graph(5)
946/1: import knight
946/2: knight.build_graph(5)
946/3: knight.build_graph(4)
946/4: knight.build_graph(2)
946/5: knight.build_graph(3)
947/1: import knight
947/2: ?knight.find_solution_for
947/3: knight.find_solution_for(5)
947/4: length(knight.find_solution_for(5))
947/5: len(knight.find_solution_for(5))
947/6: set(knight.find_solution_for(5))
947/7: len(set(knight.find_solution_for(5)))
948/1: import ROOT
948/2: infile = ROOT.TFile("./../pythonunraveltoolsData/B/fatras_particles_initial.root", "READ")
948/3: infile.ls()
948/4: tree = infile.Get("particles")
948/5: tree.Print()
948/6:
for event in tree:
    eid, charge = event.event_id, event.q
    if eid == 22:
        print(charge)
948/7:
for event in tree:
    eid, val = event.event_id, event.pt
    if eid == 22:
        print(val)
948/8:
for event in tree:
    eid, val = event.event_id, event.pt
    if eid == 22:
        print(val[0])
948/9:
for event in tree:
    eid, val = event.event_id, event.pt
    if eid == 22:
        print(val[1])
948/10:
for event in tree:
    eid, val = event.event_id, event.vx
    if eid == 22:
        print(val[0])
948/11:
for event in tree:
    eid, val = event.event_id, event.vx
    if eid == 22:
        print(val[1])
948/12:
for event in tree:
    eid, val = event.event_id, event.vx
    if eid == 22:
        print(val[0])
948/13: infile = ROOT.TFile("./../pythonunraveltoolsData/B/hits.root", "READ")
948/14: infile.ls()
948/15: tree = infile.Get("hits")
948/16:
for event in tree:
    eid, tx, ty, tz = event.event_id, event.tx, event.ty, event.tz
    if eid == 22:
        print(tx, ty, tz)
948/17:
for event in tree:
    eid, tx, ty, tz = event.event_id, event.tx, event.ty, event.tz
    if eid == 2:
        print(tx, ty, tz)
948/18:
for event in tree:
    eid, tx, ty, tz = event.event_id, event.tx, event.ty, event.tz
    if eid == 5:
        print(tx, ty, tz)
948/19:
infile = ROOT.TFile(
    "./../pythonunraveltoolsData/C/fatras_particles_initial.root", "READ"
)
948/20: tree = infile.Get("particles")
948/21:
for event in tree:
    eid, val = event.event_id, event.q
    print(eid, val)
948/22:
for event in tree:
    eid, val = event.event_id, event.q
    print(eid, len(val))
949/1: import ROOT
949/2:
infile = ROOT.TFile(
    "./../pythonunraveltoolsData/C/fatras_particles_initial.root", "READ"
)
949/3: infile.ls()
949/4: tree = infile.Get("particles")
949/5: tree.Print()
949/6:
for event in tree:
    eid = tree.event_id
    print(eid)
949/7: tree.Print()
949/8:
for event in tree:
    eid, vx, vy, vx = tree.event_id
    print(eid, len(vx))
949/9:
for event in tree:
    eid, vx, vy, vx = tree.event_id
    print(eid, vx, vy, vz)
949/10:
for event in tree:
    eid, vx, vy, vx = tree.event_id, event.vx, event.vy, event.vz
    print(eid, vx, vy, vz)
949/11:
for event in tree:
    eid, vx, vy, vz = tree.event_id, event.vx, event.vy, event.vz
    print(eid, vx, vy, vz)
949/12:
for event in tree:
    eid, vx, vy, vz = tree.event_id, event.vx, event.vy, event.vz
    print(eid, len(vx), len(vy), len(vz))
949/13: infile = ROOT.TFile("./../pythonunraveltoolsData/C/hits.root", "READ")
949/14: tree = infile.Get("hits")
949/15: tree.Print()
949/16:
infile = ROOT.TFile(
    "./../pythonunraveltoolsData/C/fatras_particles_initial.root", "READ"
)
949/17: tree = infile.Get("particles")
949/18:
for event in tree:
    eid, vx, vy, vz = tree.event_id, event.vx, event.vy, event.vz
    print(eid, len(vx), len(vy), len(vz))
949/19:
infile = ROOT.TFile(
    "./../pythonunraveltoolsData/B/fatras_particles_initial.root", "READ"
)
949/20: tree = infile.Get("particles")
949/21:
for event in tree:
    eid, vx, vy, vz = tree.event_id, event.vx, event.vy, event.vz
    print(eid, len(vx), len(vy), len(vz))
950/1: import numpy as np
950/2: ?np.where
950/3:
for ii in range(10):
    if ii < 5:
        continue
    print(ii)
951/1: import numpy as np
951/2: np.random.choice(range(100), 1, replace=False)
951/3: np.random.choice(range(100), 1, replace=False)[0]
952/1: import ROOT
953/1: import ROOT
953/2: ROOT.__file__
954/1: ls
954/2: pwd
954/3: import ROOT
954/4: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
954/5: infile.ls()
954/6: tree = infile.Get("particles")
954/7: tree.Print()
954/8:
for event in tree:
    print(len(tree.vz))
954/9: tree.Draw("vz")
954/10: ?tree.Draw
954/11: tree.Draw(„vz”, „fabs(vz)<30”)
954/12: tree.Draw("vz”, "fabs(vz)<30”)
954/13: tree.Draw("vz", "fabs(vz)<30")
954/14: tree.Draw("pt", "fabs(vz)<30")
954/15: tree.Draw("pt", "fabs(vz)<30 && pt < 1")
954/16: tree.Draw("pt", "fabs(vz)<30 && pt < 1")
955/1: import ROOT
955/2: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
955/3: tree = infile.Get("particles")
955/4: tree.Print()
955/5:
for event in tree:
    print(len(tree.event_id))
955/6:
for event in tree:
    print(tree.event_id)
955/7: tree.Print()
955/8:
for event in tree:
    print(len(tree.q))
955/9:
for event in tree:
    print(tree.q[1:100])
955/10: infile = ROOT.TFile("hits.root", "READ")
955/11: infile.ls()
955/12: tree = infile.Get("hits")
955/13: tree.Print()
955/14: nofHits = 0
955/15:
for event in tree:
    if event.event_id == 1:
        nofHits += 1
955/16: nofHits
955/17: nofHits = 0
955/18:
for event in tree:
    if event.event_id == 101:
        nofHits += 1
955/19: nofHits = 0
955/20:
for event in tree:
    if event.event_id == 101:
        nofHits += 1
955/21: nofHits
955/22:
maxGeometry = 0
for event in tree:
    eid, gid = event.event_id, event.geometry_id
    if eid == 1:
        if gid > maxGeometry:
            maxGeometry = gid
955/23: maxGeometry
955/24:
maxGeometry = 0
for event in tree:
    eid, gid = event.event_id, event.particle_id
    if eid == 1:
        if gid > maxGeometry:
            maxGeometry = gid
955/25: maxGeometry
955/26:
maxGeometry = 0
for event in tree:
    eid, gid = event.event_id, event.layer_id
    if eid == 1:
        if gid > maxGeometry:
            maxGeometry = gid
955/27: maxGeometry
955/28: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
955/29: tree = infile.Get("particles")
955/30: tree.Print()
955/31:
for event in tree:
    print(len(tree.particle_id))
955/32:
ii = 0
for event in tree:
    ids = tree.particle_id
    mx = 0
    for i in ids:
        if i > mx:
            mx = i
    print(ii, mx)
    ii += 1
955/33:
for event in tree:
    ev_id, ids = tree.event_id, tree.particle_id
    mx = 0
    for i in ids:
        if i > mx:
            mx = i
    print(ev_id, mx)
955/34:
for event in tree:
    ev_id, ids = tree.event_id, tree.particle_id
    mx = 0
    for i in ids:
        if i > mx:
            mx = i
    print(ev_id, mx)
955/35: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
955/36: infile = ROOT.TFile("hits.root", "READ")
955/37: tree = infile.Get("hits")
955/38: tree.Print()
955/39:
for event in tree:
    part_id, tx, ty, tz = event.particle_id, event.tx, event.ty, event.tz
    if part_id == 905223525135024128:
        print(tx, ty, tz)
955/40:
for event in tree:
    part_id, event_id, tx, ty, tz = (
        event.particle_id,
        event.event_id,
        event.tx,
        event.ty,
        event.tz,
    )
    if part_id == 905223525135024128:
        print(event_id, tx, ty, tz)
955/41: tree.Print()
955/42:
ii = 0
for event in tree:
    if ii == 0:
        print(event.geometry_id[0])
    ii += 1
955/43:
ii = 0
for event in tree:
    if ii == 0:
        print(event.geometry_id)
    ii += 1
955/44:
for event in tree:
    geom_id, event_id, tx, ty, tz = (
        event.geometry_id,
        event.event_id,
        event.tx,
        event.ty,
        event.tz,
    )
    if geom_id == 504403295704449025:
        print(event_id, tx, ty, tz)
955/45: infile = ROOT.TFile("./pythia8_particles.root", "READ")
955/46: infile.ls()
955/47: tree = infile.Get("particles")
955/48: tree.Print()
955/49:
for event in tree:
    print(event.particle_id)
955/50:
for event in tree:
    print(len(event.particle_id))
956/1: import ROOT
956/2: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
956/3: infile.ls()
956/4: tree = infile.Get("particles")
956/5: tree.Print()
955/51: infile = ROOT.TFile("hits.root", "READ")
955/52: tree = infile.Get("hits")
955/53: tree.Print()
956/6: tree[0]
956/7:
ev = None
for event in tree:
    event_id, particle_id, particle_type, process = (
        event.event_id,
        event.particle_id,
        event.particle_type,
        event.process,
    )
    break
956/8: event_id
956/9: particle_id[1]
956/10: particle_id[2]
956/11: particle_id[3]
956/12: particle_id[0]
955/54:
for event in tree:
    event_id, particle_id, tx, ty, tz = (
        event.event_id,
        event.particle_id,
        event.tx,
        event.ty,
        event.tz,
    )
    if event_id == 0 and particle_id == 4503599644147712:
        print(tx, ty, tz)
956/13: pset = set(particle_id)
956/14: len(pset)
956/15:
ev = None
for event in tree:
    event_id, particle_id, particle_type, process, vx, vy, vz = (
        event.event_id,
        event.particle_id,
        event.particle_type,
        event.process,
        event.vx,
        event.vy,
        event.vz,
    )
    break
956/16:
event_id, particle_id, particle_type, process, vx, vy, vz = (
    None,
    None,
    None,
    None,
    None,
    None,
    None,
)
for event in tree:
    event_id, particle_id, particle_type, process, vx, vy, vz = (
        event.event_id,
        event.particle_id,
        event.particle_type,
        event.process,
        event.vx,
        event.vy,
        event.vz,
    )
    break
956/17: len(set(particle_id))
956/18: len(set(vx))
956/19: len(set(vy))
956/20: len(set(vz))
956/21: tree.ls()
956/22: tree.Print()
956/23: tree.ls()
956/24:
event_id, particle_id, particle_type, process, vx, vy, vz = (
    None,
    None,
    None,
    None,
    None,
    None,
    None,
)
for event in tree:
    event_id, particle_id, particle_type, process, vx, vy, vz = (
        event.event_id,
        event.particle_id,
        event.particle_type,
        event.process,
        event.vx,
        event.vy,
        event.vz,
    )
    break
956/25: len(vx)
956/26: len(vy)
956/27: len(vz)
956/28: len(set(particle_id))
956/29: len(particle_id)
956/30: import numpy as np
956/31: np.max(particle_id)
956/32: mx = 0
956/33: mx = 0
956/34: mx = 0
956/35: mx = 0
956/36: mx = 0
956/37:
for event in particle_id:
    if event > mx:
        mx = event
956/38: mx
955/55:
mx = 0
for event in tree:
    event_id, particle_id, tx, ty, tz = (
        event.event_id,
        event.particle_id,
        event.tx,
        event.ty,
        event.tz,
    )
    if event_id == 0:
        if particle_id > mx:
            mx = particle_id
955/56: mx
956/39: event_id
956/40: particle_id[10]
955/57:
for event in tree:
    event_id, particle_id, tx, ty, tz = (
        event.event_id,
        event.particle_id,
        event.tx,
        event.ty,
        event.tz,
    )
    if event_id == 0:
        if particle_id == 4503599828697088:
            print(tx, ty, tz)
955/58:
for event in tree:
    event_id, particle_id, tx, ty, tz = (
        event.event_id,
        event.particle_id,
        event.tx,
        event.ty,
        event.tz,
    )
    if particle_id == 4503599828697088:
        print(event_id, tx, ty, tz)
955/59:
particlesin = []
for event in tree:
    event_id, particle_id, tx, ty, tz = (
        event.event_id,
        event.particle_id,
        event.tx,
        event.ty,
        event.tz,
    )
    if event_id == 0:
        particlesin.append(particle_id)
956/41:
event_id, particle_id, particle_type, process, vx, vy, vz = (
    None,
    None,
    None,
    None,
    None,
    None,
    None,
)
for event in tree:
    event_id, particle_id, particle_type, process, vx, vy, vz = (
        event.event_id,
        event.particle_id,
        event.particle_type,
        event.process,
        event.vx,
        event.vy,
        event.vz,
    )
    break
956/42: len(set(particle_id))
956/43: len(particle_id)
956/44: len(vx)
955/60: len(particlesin)
955/61: len(set(particlesin))
956/45:
event_id, particle_id, particle_type, process, vx, vy, vz = (
    None,
    None,
    None,
    None,
    None,
    None,
    None,
)
for event in tree:
    event_id, particle_id, particle_type, process, vx, vy, vz = (
        event.event_id,
        event.particle_id,
        event.particle_type,
        event.process,
        event.vx,
        event.vy,
        event.vz,
    )
    if event_id == 1:
        break
956/46: len(set(particle_id))
955/62:
particlesin = []
for event in tree:
    event_id, geometry_id, tx, ty, tz = (
        event.event_id,
        event.geometry_id,
        event.tx,
        event.ty,
        event.tz,
    )
    if event_id == 0:
        particlesin.append(particle_id)
956/47:
event_id, particle_id, particle_type, process, vx, vy, vz = (
    None,
    None,
    None,
    None,
    None,
    None,
    None,
)
for event in tree:
    event_id, particle_id, particle_type, process, vx, vy, vz = (
        event.event_id,
        event.particle_id,
        event.particle_type,
        event.process,
        event.vx,
        event.vy,
        event.vz,
    )
    if event_id == 0:
        break
956/48: len(set(particle_id))
955/63:
particlesin = []
for event in tree:
    event_id, geometry_id, tx, ty, tz = (
        event.event_id,
        event.geometry_id,
        event.tx,
        event.ty,
        event.tz,
    )
    if event_id == 0:
        particlesin.append(geometry_id)
955/64: len(set(particlesin))
955/65: tree.Print()
957/1: import ROOT
958/1: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
959/1: import ROOT
959/2: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
959/3: tree = infile.Get("particles")
959/4: tree.Print()
959/5: infile = ROOT.TFile("hits.root", "READ")
959/6: tree = infile.Get("particles")
959/7: infile = ROOT.TFile("hits.root", "READ")
959/8: tree = infile.Get("hits")
959/9: tree.Print()
959/10: infile = ROOT.TFile("hits.root", "READ")
959/11: tree = infile.Get("hits")
959/12: tree.Print()
959/13: ev1 = []
959/14:
for event in tree:
    event_id, particle_id = event.event_id, event.particle_id
    if event_id == 1:
        ev1.append(particle_id)
959/15: len(ev1)
959/16: len(list(set(ev1)))
959/17: infile1 = ROOT.TFile("fatras_particles_initial.root", "READ")
959/18: tree1 = infile.Get("particles")
959/19:
ev2 = []
for event in tree1:
    event_id, particle_id = event.event_id, event.particle_id
    print(event_id, len(particle_id))
959/20: infile1.list()
959/21: infile1.ls()
959/22: tree1 = infile.Get("particles")
959/23: tree1.print()
959/24: tree1.Print()
959/25: infile1 = ROOT.TFile("fatras_particles_initial.root", "READ")
959/26: infile.ls()
959/27: tree1 = infile1.Get("particles")
959/28:
ev2 = []
for event in tree1:
    event_id, particle_id = event.event_id, event.particle_id
    print(event_id, len(particle_id))
959/29:
ev2 = []
for event in tree1:
    event_id, particle_id = event.event_id, event.particle_id
    if event_id == 1:
        ok = True
        for part in particle_id:
            if not part in ev1:
                ok = False
        print(event_id, ok)
959/30:
ev2 = []
for event in tree1:
    event_id, particle_id = event.event_id, event.particle_id
    if event_id == 1:
        ok = True
        ev1s = list(set(ev1))
        for part in ev1s:
            if not part in particle_id:
                ok = False
        print(event_id, ok)
960/1: import ROOT
960/2: import numpy as np
960/3: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
960/4: tree = infile.Get("particles")
960/5: tree.Print()
960/6: dct = {}
961/1: a = {1 : 2 , 2 : 3}
961/2: a[1]
960/7:
for event in tree:
    event_id, particle_id, vx, vy, vz = (
        event.event_id,
        event.particle_id,
        event.vx,
        event.vy,
        event.vz,
    )
    dct.update({(event_id, particle_id): [vx, vy, vz]})
960/8:
for event in tree:
    event_id, particle_id, px, py, pz, vx, vy, vz = (
        event.event_id,
        event.particle_id,
        event.px,
        event.py,
        event.pz,
        event.vx,
        event.vy,
        event.vz,
    )
    dct.update({(event_id, particle_id): [vx, vy, vz]})
960/9: dct = {}
960/10:
for event in tree:
    event_id, particle_id, px, py, pz, vx, vy, vz = (
        event.event_id,
        event.particle_id,
        event.px,
        event.py,
        event.pz,
        event.vx,
        event.vy,
        event.vz,
    )
    dct.update({(event_id, particle_id): [vx, vy, vz]})
960/11: dct[1]
960/12:
for key in dct:
    print(dct[key])
960/13: tr
962/1: import ROOT
962/2: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
962/3: tree = infile.Get("particles")
962/4: tree.Print()
962/5: ls
964/1: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
964/2: tree = infile.Get("particles")
964/3: import ROOT
964/4: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
964/5: tree = infile.Get("particles")
964/6: tree.Print()
965/1: import ROOT
965/2: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
965/3: tree = infile.Get("particles")
965/4: tree.print
965/5: tree.Print()
965/6:
for event in tree:
    print(event.event_id, event.pt)
965/7:
for event in tree:
    print(event.event_id, event.pt[0])
965/8:
for event in tree:
    print(event.event_id, event.pt[1])
965/9:
for event in tree:
    print(event.event_id, event.p)
965/10:
for event in tree:
    print(event.event_id, event.p[0])
965/11:
for event in tree:
    print(event.event_id, event.p[1])
965/12:
for event in tree:
    print(event.event_id, event.p[0])
965/13:
for event in tree:
    print(event.event_id, event.pt[0])
965/14:
for event in tree:
    print(event.event_id, len(event.pt))
965/15:
for event in tree:
    print(event.event_id, len(event.p))
966/1: import ROOT
966/2: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
966/3: tree = infile.Get("particles")
966/4:
for event in tree:
    print(event.event_id, len(event.p))
966/5:
for event in tree:
    print(event.event_id, len(event.pt))
966/6:
for event in tree:
    print(event.event_id, len(event.pt[0]))
967/1: import ROOT
967/2: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
967/3: tree = infile.Get("particles")
967/4:
for event in tree:
    event_id, p, pt, event.event_id, event.p, event.pt
    for pp in p:
        print(pp, p)
967/5: tree.Print()
967/6:
for event in tree:
    event_id, p, pt, event.event_id, event.p, event.pt
    for pp in p:
        print(pp, p)
967/7:
for event in tree:
    event_id, p, pt = event.event_id, event.p, event.pt
    for pp in p:
        print(pp, p, event_id)
967/8:
for event in tree:
    event_id, p, pt = event.eveint_id, event.p, event.pt
    print("--")
    for pp in pt:
        print(pp, pt, event_id)
967/9:
for event in tree:
    event_id, p, pt = event.event_id, event.p, event.pt
    print("--")
    for pp in pt:
        print(pp, pt, event_id)
967/10:
for event in tree:
    event_id, p, pt = event.event_id, event.p, event.pt
    print("--")
    for pp in p:
        print(pp, p, event_id)
967/11: pwd
967/12:
for event in tree:
    event_id, px, py, pz, pt = event.event_id, event.px, event.py, event.pz, event.pt
    print(event_id, px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0])
967/13:
for event in tree:
    event_id, px, py, pz, pt = event.event_id, event.px, event.py, event.pz, event.pt
    print(event_id, px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0], pt[0] * pt[0])
967/14:
for event in tree:
    event_id, px, py, pz, pt = event.event_id, event.px, event.py, event.pz, event.pt
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0],
        pt[0] * pt[0],
        pt[0],
        px,
    )
967/15:
for event in tree:
    event_id, px, py, pz, pt = event.event_id, event.px, event.py, event.pz, event.pt
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0],
        pt[0] * pt[0],
        pt[0],
        px[0],
    )
967/16:
for event in tree:
    event_id, px, py, pz, pt = event.event_id, event.px, event.py, event.pz, event.pt
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0],
        pt[0] * pt[0],
        pt[0],
        px[0],
        py[0],
        pz[0],
    )
967/17:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0],
        pt[0] * pt[0],
        p[0] * p[0],
        pt[0],
        px[0],
        py[0],
        pz[0],
    )
967/18:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
     i   px[0] * px[0] + py[0] * py[0],
        pt[0] * pt[0],
        p[0] * p[0],
        pt[0],
        px[0],
        py[0],
        pz[0],
    )
967/19:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
     i  px[0] * px[0] + py[0] * py[0],
        pt[0] * pt[0],
        p[0] * p[0],
        pt[0],
        px[0],
        py[0],
        pz[0]
    )
967/20:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0],
        pt[0] * pt[0],
        p[0] * p[0],
        pt[0],
        px[0],
        py[0],
        pz[0],
    )
967/21:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0],
        pt[0] * pt[0],
        p[0] * p[0],
        pt[0],
        px[0],
        py[0],
        pz[0],
    )
967/22: pwd
967/23:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0],
        pt[0] * pt[0],
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0],
        p[0] * p[0],
        pt[0],
        px[0],
        py[0],
        pz[0],
    )
967/24:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0],
        pt[0] * pt[0],
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0],
        p[0] * p[0],
        pt[0],
        px[0],
        py[0],
        pz[0],
    )
967/25: cd ../C
967/26: pwd
967/27: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
967/28: tree.Print()
967/29: infile = ROOT.TFile("fatras_particles_initial.root", "READ")
967/30: tree = infile.Get("particles")
967/31:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0],
        pt[0] * pt[0],
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0],
        p[0] * p[0],
        pt[0],
        px[0],
        py[0],
        pz[0],
    )
967/32:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0],
        pt[0] * pt[0],
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0],
        p[0] * p[0],
        pt[0],
        px[0],
        py[0],
        pz[0],
        pt[1],
        pt[2],
    )
967/33:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0],
        pt[0] * pt[0],
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0],
        p[0] * p[0],
        px[0],
        py[0],
        pz[0],
        pt[0],
        pt[1],
        pt[2],
    )
967/34:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        ipx[0] * px[0] + py[0] * py[0] - pt[0] * pt[0],
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0] - p[0] * p[0],
        px[0],
        py[0],
        pz[0],
        pt[0],
        pt[1],
        pt[2],
    )
967/35:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0] - pt[0] * pt[0],
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0] - p[0] * p[0],
        px[0],
        py[0],
        pz[0],
        pt[0],
        pt[1],
        pt[2],
    )
967/36:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0],
        pt[0] * pt[0],
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0],
        p[0] * p[0],
        px[0],
        py[0],
        pz[0],
        pt[0],
        pt[1],
        pt[2],
    )
967/37: pwd
967/38:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0],
        pt[0] * pt[0],
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0],
        p[0] * p[0],
        px[0],
        py[0],
        pz[0],
        pt[0],
        pt[0,1]
        pt[1],
        pt[2],
    )
967/39:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0],
        pt[0] * pt[0],
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0],
        p[0] * p[0],
        px[0],
        py[0],
        pz[0],
        pt[0],
        pt[0, 1],
        pt[1],
        pt[2],
    )
967/40:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0],
        pt[0] * pt[0],
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0],
        p[0] * p[0],
        px[0],
        py[0],
        pz[0],
        pt[0],
        pt[0][1],
        pt[1],
        pt[2],
    )
967/41:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0],
        pt[0] * pt[0],
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0],
        p[0] * p[0],
        px[0],
        py[0],
        pz[0],
        pt[0],
        pt[0],
        pt[123],
        pt[2],
    )
967/42:
for event in tree:
    event_id, px, py, pz, pt, p = (
        event.event_id,
        event.px,
        event.py,
        event.pz,
        event.pt,
        event.p,
    )
    print(
        event_id,
        px[0] * px[0] + py[0] * py[0],
        pt[0] * pt[0],
        px[0] * px[0] + py[0] * py[0] + pz[0] * pz[0],
        p[0] * p[0],
        px[0],
        py[0],
        pz[0],
        pt[0],
        pt[0],
    )
968/1: import numpy as np
968/2: np.array([0, 1, 2]) == np.array([1, 2, 2])
968/3: ?np.sign
969/1: import ROOT
969/2: import numpy as np
969/3: ?np.min
970/1: import numpy as np
970/2: np.max
970/3: np.max(1, 2)
970/4: import math
970/5: math.max
970/6: np.maximum(-1 , 0)
970/7: ?np.histogram2d
970/8: np.linspace
970/9: ?np.linspace
970/10: ?np.arrange
970/11: ?np.arange
970/12: np.arange(0.0, 3.0, 0.23)
970/13: ?np.histogram2d
970/14: binx = [0, 1, 2, 3]
970/15: biny = [10, 11, 12, 13, 14]
970/16: np.histogram2d([1.1, 12.1], [], [binx, biny])
970/17: np.histogram2d([1.1], [12.1], [binx, biny])
970/18: hist = np.histogram2d([1.1], [12.1], [binx, biny])
970/19: hist
970/20: binx
970/21: biny
970/22: hist[1 , 2]
970/23: hist[1][2]
970/24: hist[0]
970/25: hist[0][1, 2]
970/26: hist[0][1, 3]
970/27: hist[0][1, 1]
970/28: hist[0][1, 2]
970/29: sdfsf
971/1: import numpy as np
971/2: np.arange(-5.70618331417027 , 5.70618331417027 , -0.06922919519078662)
972/1: import numpy as np
972/2: ?np.where
972/3: ?np.argwhere
972/4: np.argwhere(np.array([[True , False],[False , True]]))
972/5: np.argwhere(np.array([[True , False],[True , True]]))
973/1: import numpy as np
973/2: np.amin([1, 3, 2, 0])
973/3: np.amin([1, 3, 2, 0 , -19])
973/4: np.amax([0 , 4 , 2 , 10 , 2])
973/5: np.ceil(2.1)
973/6: np.sort([1, 3, 2, 4, 5, 7, 10, -1])
973/7: exiti
974/1: a = dict()
974/2: a.update({1 : 123})
974/3: a
974/4: a.update({2 : 12})
974/5: a
974/6:
for ii in range(1, 10):
    print(ii)
974/7: a[1]
975/1: import time
975/2: time.time()
975/3: time.time()
975/4: str(time.localtime())
975/5: time.time_ns()
975/6: time.time_ns()
975/7: time.time_ns() / 1000000000 / 0
975/8: time.time_ns() / 1000000000.00
975/9: str(time.time_ns() / 1000000000.00)
976/2: import sys
976/3: sys.exit(1)
977/1: "sadasda".upper()
978/1: import jsons
978/2: import json
978/3: import requests
978/4: url = "http://api.fixer.io/latest"
978/5: response = requests.get(url, stream=True)
978/6: response
978/7: response.status_code
978/8: response = requests.get("https://data.fixer.io/api/latest" , stream = True)
978/9: response
978/10: response.content
978/11: url = "http://api.exchangeratesapi.io/v1/latest?access_key=e5d1696180212382151f79920d2630e0"
978/12: response = requests.get(url, stream=True)
978/13: response
978/14: response.content
978/15: content = response.content
978/16: content
978/17: jsn = json.loads(content)
978/18: jsn
978/19: jsn['date']
978/20: jsn['rates']
978/21: jsn['rates']['GBP']
978/22: jsn['rates']['PLN']
978/23: import time
978/24: import datetime
978/25: datetime
978/26: datetime.date
978/27: datetime.date.today()
978/28: datetime.date.today()
978/29: datetime.date.today()
978/30: print(datetime.date.today())
978/31: str(datetime.date.today())
978/32: 0.840786 / 4.686366
978/33: 4.686366 / 0.840786
978/34: "1231 ".strip
978/35: "1231 ".strip()
978/36: "PLN" in "GBP,PLN,EUR"
978/37: ?json.dump
978/38: ?json.dumps
978/39: str(datetime.date.today())
978/40: ?requests.get
978/41:
for single_date in [datetime.date.today() + datetime.timedelta(-n) for n in range(10)]:
    print(single_date)
978/42:
for single_date in [
    datetime.date.today() + datetime.timedelta(-10) + datetime.timedelta(n)
    for n in range(10)
]:
    print(single_date)
978/43:
for single_date in [
    datetime.date.today() + datetime.timedelta(-10 + 1) + datetime.timedelta(n)
    for n in range(10)
]:
    print(single_date)
978/44: import sys
978/45: os.listdir
978/46: import os
978/47: os.listdir('/home/kacper/bin/getRatesFiles/')
978/48: 0.5 * 2 / 4
978/49: 0.5 * 2 / 22
978/50: 0.5 * 2 / float(22)
978/51: 0.5 * float(2) / float(22)
979/1: import numpy as np
979/2: arr = np.array([[1.0 , 2.0 , 3.0],[4.0 , 5.0 , 6.0],[7.0 , 8.0 , 9.0],[10.0 , 11. , 12.0]])
979/3: arr
979/4: ctr = np.array([-1.0, -2.0])
979/5: ctr
979/6: arr[: , [0 , 1]]
979/7: arr[:, [0, 1]] - ctr
979/8: np.linalg.norm(arr[: , [0 , 1]] - ctr)
979/9: ?np.linalg.norm
979/10: ?np.linalg.norm
979/11: np.linalg.norm([1.0 , 1.0])
979/12: np.sqrt(2)
979/13: np.linalg.norm(arr[: , [0 , 1]] - ctr , axis = 0)
979/14: np.linalg.norm(arr[: , [0 , 1]] - ctr , axis = 1)
979/15: np.linalg.norm([2.0 , 4.0])
979/16: np.linalg.norm(arr[:, [0, 1]] - ctr, axis=1)
979/17: arr[: , 2] / np.linalg.norm(arr[:, [0, 1]] - ctr, axis=1)
979/18: 3.0 / 4.47213595499958
979/19: arr[:, 2] / np.linalg.norm(arr[:, [0, 1]] - ctr, axis=1)
979/20: theta = arr[:, 2] / np.linalg.norm(arr[:, [0, 1]] - ctr, axis=1)
979/21: rotN = np.array([np.cos(theta), -np.sin(theta), np.sin(theta), np.cos(theta)])
979/22: rotN
979/23: np.cos(theta[0])
979/24: -np.sin(theta[0])
979/25: np.sin(theta[0])
979/26: np.cos(theta[0])
979/27: np.cos(theta)
979/28: -np.sin(theta)
979/29: np.transpose(rotN)
979/30: np.transpose(rotN).reshape((theta.shape[0] , 4 , 4))
979/31: np.transpose(rotN).reshape((theta.shape[0] , 2 , 2))
979/32: rot = np.transpose(rotN).reshape((theta.shape[0] , 2 , 2))
979/33: rot
979/34: ?np.dot
979/35: np.dot(rot , arr[[0 , 1]])
979/36: arr[: , [0 , 1]]
979/37: np.dot(rot , arr[: , [0 , 1]])
979/38: ?np.meshgrid
979/39: rot
979/40: rot @ arr[:, [0, 1]]
979/41: rot.shape
979/42: arr[:, [0, 1]].shape
979/43: ?np.einsum
979/44: np.einsum('ijk,ik->ij' , rot , arr[:, [0, 1]])
979/45:
rottt = np.array(
    [[np.cos(theta[0]), -np.sin(theta[0])], [np.sin(theta[0]), np.cos(theta[0])]]
)
979/46: rottt
979/47: np.dot(rottt, arr[0, [0, 1]])
979/48:
rottt = np.array(
    [[np.cos(theta[1]), -np.sin(theta[1])], [np.sin(theta[1]), np.cos(theta[1])]]
)
979/49: np.dot(rottt, arr[1, [0, 1]])
980/1: %load_ext autoreload
980/2: %autoreload 2
980/3: ls
980/4: import slideRule
980/5: slideRule.svgImage.start
981/1: np.array([0, 1, 2])
981/2: import numpy as np
981/3: aaa = np.array([0, 1, 2])
981/4: bb = [3]
981/5: np.append(aaa, bb)
981/6: np.append(bb , aaa)
982/1: import ROOT
982/2: ROOT.TEfficiency
982/3: ?ROOT.TEfficiency
982/4: ROOT.TH1
982/5: ?ROOT.TH1
983/1: import ROOT
983/2: import numpy as np
983/3: data = []
983/4:
with open("Aoutput_all.log", "r") as f:
    for line in f.readlines():
        data.append(list(map(float, line.split())))
983/5: data[0]
983/6: data[1]
983/7: len(data)
983/8: data = np.array(data)
983/9: data
983/10: data.shape
983/11: ?ROOT.TH1F
983/12: data[0]
983/13: head Aoutput_1.log
983/14: %head Aoutput_1.log
983/15: !head Aoutput_1.log
983/16: data[: , 2]
983/17: data[:, 2].min()
983/18: data[:, 2].max()
983/19: np.linspace(1.1 , 2.0 , 10)
983/20: bins = np.linspace(data[:, 2].min(), data[:, 2].max(), 32)
983/21: bins
983/22: num = ROOT.TH1F("num" , "NUM" , len(bins) - 1 , bins)
983/23: den = ROOT.TH1F("den" , "DEN" , len(bins) - 1 , bins)
983/24: ?enumerate
983/25:
for i, bin in enumerate(bins):
    print(i, "  ", bin)
983/26: ?np.where
983/27: np.where([True , False , True])
983/28: ?np.where
983/29: np.asarray([True , False , True])
983/30: ?np.where
983/31: np.asarray([True, False, True])
983/32: np.asarray([True, False, True]).nonzero()
983/33:
for ii in range(bins.shape[0]):
    print(ii)
983/34:
for ii in range(bins.shape[0]) - 1:
    nums = np.where(np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]]))
983/35:
for ii in range(bins.shape[0] - 1):
    nums = np.where(np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]]))
983/36:
for ii in range(bins.shape[0] - 1):
    nums = np.where(np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]]))
    print(ii, nums.shape)
983/37:
for ii in range(bins.shape[0] - 1):
    nums = np.where(np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]]))
    print(ii, nums[0].shape)
983/38: np.where(np.all([[True , True , False , False] , [False , True , False , True]]))
983/39: np.where(np.all([[True , True , False , False] , [True , True , True , True]]))
983/40: ?np.all
983/41: np.where(np.all([[True , True , False , False] , [True , True , True , True]]) , axis = 0)
983/42: np.where(np.all([[True , True , False , False] , [True , True , True , True]] , axis = 0))
983/43: np.where(np.all([[True , True , False , False] , [True , False , True , True]] , axis = 0))
983/44:
for ii in range(bins.shape[0] - 1):
    nums = np.where(np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]], axis=0))
    print(ii, nums[0].shape)
983/45:
for ii in range(bins.shape[0] - 1):
    inbin = np.where(
        np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]], axis=0)
    )[0]
    print(ii, inbin.shape)
983/46:
for ii in range(bins.shape[0] - 1):
    inbin = np.where(
        np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]], axis=0)
    )[0]
    numTotal = data[inbin, 13].total()
    print(ii, numTotal)
983/47:
for ii in range(bins.shape[0] - 1):
    inbin = np.where(
        np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]], axis=0)
    )[0]
    numTotal = data[inbin, 13]
    print(ii, numTotal.shape)
983/48: ?np.sum
983/49:
for ii in range(bins.shape[0] - 1):
    inbin = np.where(
        np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]], axis=0)
    )[0]
    numTotal = np.sum(data[inbin, 13])
    print(ii, numTotal)
983/50:
for ii in range(bins.shape[0] - 1):
    inbin = np.where(
        np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]], axis=0)
    )[0]
    numTotal = np.sum(data[inbin, 13])
    denTotla = np.sum(data[inbin, 11]) + np.sum(data[inbin, 13])
    print(ii, numTotal, denTotal)
983/51:
for ii in range(bins.shape[0] - 1):
    inbin = np.where(
        np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]], axis=0)
    )[0]
    numTotal = np.sum(data[inbin, 13])
    denTotal = np.sum(data[inbin, 11]) + np.sum(data[inbin, 13])
    print(ii, numTotal, denTotal)
983/52:
for ii in range(bins.shape[0] - 1):
    inbin = np.where(
        np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]], axis=0)
    )[0]
    numTotal = np.sum(data[inbin, 13])
    denTotal = np.sum(data[inbin, 11]) + np.sum(data[inbin, 13])
    print(ii, numTotal / denTotal)
983/53:
for ii in range(bins.shape[0] - 1):
    inbin = np.where(
        np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]], axis=0)
    )[0]
    numTotal = np.sum(data[inbin, 13])
    denTotal = np.sum(data[inbin, 11]) + np.sum(data[inbin, 13])
    num.SetBinContent(ii + 1, numTotal)
    den.SetBinContent(ii + 1, denTotal)
    print(ii, numTotal / denTotal)
983/54: num
983/55: den
983/56: ?num.Draw
983/57: num.Draw()
983/58: den.Draw()
983/59: eff = ROOT.TEfficiency(num, den)
983/60: eff.Draw()
983/61: num = ROOT.TH1F("num", "NUM", len(bins) - 1, bins)
983/62: den = ROOT.TH1F("den", "DEN", len(bins) - 1, bins)
983/63:
for ii in range(bins.shape[0] - 1):
    inbin = np.where(
        np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]], axis=0)
    )[0]
    numTotal = np.sum(data[inbin, 10])
    denTotal = np.sum(data[inbin, 10]) + np.sum(data[inbin, 11])
    num.SetBinContent(ii + 1, numTotal)
    den.SetBinContent(ii + 1, denTotal)
    print(ii, numTotal / denTotal)
983/64: eff = ROOT.TEfficiency(num, den)
983/65: eff.Draw()
983/66: eff.Draw()
983/67: eff.Draw()
985/1: import argparse
985/2: ?argparse.add_argument
985/3: ?argparse.ArgumentParser.add_argument
987/1: "asda".upper()
988/1: imput("q?")
988/2: a = input()
988/3: a
986/1: ls
990/1: import ROOT
990/2: import numpy as np
990/3:
data = []
with open("Aoutput_all.log", "r") as f:
    for line in f.readlines():
        data.append(list(map(float, line.split())))
990/4: data = np.array(data)
990/5: bins = np.linspace(data[:, 2].min(), data[:, 2].max(), 32)
990/6: num = ROOT.TH1F("num", "NUM", len(bins) - 1, bins)
990/7: den = ROOT.TH1F("den", "DEN", len(bins) - 1, bins)
990/8: eff = ROOT.TEfficiency(num, den)
990/9: eff.Draw()
990/10:
for ii in range(bins.shape[0] - 1):
    inbin = np.where(
        np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]], axis=0)
    )[0]
    numTotal = np.sum(data[inbin, 10])
    denTotal = np.sum(data[inbin, 10]) + np.sum(data[inbin, 11])
    num.SetBinContent(ii + 1, numTotal)
    den.SetBinContent(ii + 1, denTotal)
    print(ii, numTotal / denTotal)
990/11: eff = ROOT.TEfficiency(num, den)
990/12: eff.Draw()
990/13: ?ROOT.TLegend
990/14: legend = ROOT.TLegend(0.12, 0.65, 0.5, 0.85)
990/15: ?legend.AddEntry
990/16: ?legend.AddEntry(eff , "This is a legend")
990/17: legend.AddEntry(eff , "This is a legend")
990/18: eff.Draw()
990/19: legend.Draw("SAME")
990/20: eff.Draw("SAME")
990/21: eff.Draw("SAME")
990/22: eff.Draw("SAME")
990/23: legend.Draw("SAME")
990/24: ?ROOT.TLegend
990/25: ?ROOT.TCanvas
990/26: can  = ROOT.TCanvas("can", "histograms   ", w, h)
990/27: can  = ROOT.TCanvas("can", "histograms   ", 1200, 700)
990/28: can
991/1: import ROOT
991/2: import numpy as np
991/3: ?ROOT.SetBatch
991/4: can = ROOT.TCanvas("can", "histograms   ", 1200, 700)
991/5: ?can.SetBatch
992/1: import ROOT
992/2: ROOT.kFalse
992/3: ?ROOT.gROOT.SetBatch
992/4: ROOT.gROOT.SetBatch()
993/1: import numpy as np
993/2: np.sort([1, 3, 2, 4, 5, 7, 10, -1])
993/3: np.array_split(np.sort([1, 3, 2, 4, 5, 7, 10, -1]), np.floor(8 / 3))
993/4: np.floor(8/3)
993/5: np.array_split(np.sort([1, 3, 2, 4, 5, 7, 10, -1]), 3)
993/6: exti
994/1: import ROOT
994/2: can = ROOT.TCanvas("can", "histograms   ", 1200, 700)
994/3: ?ROOT.TEfficiency
995/1: import ROOT
995/2: num = ROOT.TH1F("num", "NUM", len(bins) - 1, bins)
995/3: bins = np.linspace(data[:, 2].min(), data[:, 2].max(), 32)
995/4: import numpy as np
995/5: bins = np.linspace(data[:, 2].min(), data[:, 2].max(), 32)
995/6: data = np.array(data)
996/1: import ROOT
996/2: import numpy as np
996/3:
data = []
with open("Aoutput_all.log", "r") as f:
    for line in f.readlines():
        data.append(list(map(float, line.split())))
996/4: data = np.array(data)
996/5: data
996/6: bins = np.linspace(data[:, 2].min(), data[:, 2].max(), 32)
996/7: num = ROOT.TH1F("num", "NUM", len(bins) - 1, bins)
996/8: den = ROOT.TH1F("den", "DEN", len(bins) - 1, bins)
996/9:
for ii in range(bins.shape[0] - 1):
    inbin = np.where(
        np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]], axis=0)
    )[0]
    numTotal = np.sum(data[inbin, 10])
    denTotal = np.sum(data[inbin, 10]) + np.sum(data[inbin, 11])
    num.SetBinContent(ii + 1, numTotal)
    den.SetBinContent(ii + 1, denTotal)
    print(ii, numTotal / denTotal)
996/10: eff = ROOT.TEfficiency(num, den)
996/11: eff.Draw("SAME")
996/12: can = ROOT.TCanvas("can", "histograms   ", 1200, 700)
997/1: import numpy as np
997/2: import ROOT
997/3:
data = []
with open("Aoutput_all.log", "r") as f:
    for line in f.readlines():
        data.append(list(map(float, line.split())))
997/4: data = np.array(data)
997/5: bins = np.linspace(data[:, 2].min(), data[:, 2].max(), 32)
997/6: num = ROOT.TH1F("num", "NUM", len(bins) - 1, bins)
997/7: den = ROOT.TH1F("den", "DEN", len(bins) - 1, bins)
997/8:
for ii in range(bins.shape[0] - 1):
    inbin = np.where(
        np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]], axis=0)
    )[0]
    numTotal = np.sum(data[inbin, 10])
    denTotal = np.sum(data[inbin, 10]) + np.sum(data[inbin, 11])
    num.SetBinContent(ii + 1, numTotal)
    den.SetBinContent(ii + 1, denTotal)
    print(ii, numTotal / denTotal)
997/9: eff
997/10: eff = ROOT.TEfficiency(num, den)
997/11: can = ROOT.TCanvas("can", "histograms   ", 1200, 700)
997/12: ?can.GetY1
997/13: can.GetY1
997/14: eff = ROOT.TEfficiency(num, den)
997/15: eff.Draw("SAME")
997/16: eff = ROOT.TEfficiency(num, den)
998/1: import ROOT
998/2: ROOT.gPad.Update()
998/3: import numpy as np
998/4:
data = []
with open("Aoutput_all.log", "r") as f:
    for line in f.readlines():
        data.append(list(map(float, line.split())))
998/5: data = np.array(data)
998/6: bins = np.linspace(data[:, 2].min(), data[:, 2].max(), 32)
998/7: num = ROOT.TH1F("num", "NUM", len(bins) - 1, bins)
998/8: den = ROOT.TH1F("den", "DEN", len(bins) - 1, bins)
998/9: eff = ROOT.TEfficiency(num, den)
998/10: eff.Draw("SAME")
998/11: ROOT.gPad
998/12: ROOT.gPad
998/13: gpad = ROOT.gPad
998/14: gpad.Update()
998/15: grf = eff.GetPaintedGraph()
998/16: grf
998/17: grf.ComputeRange()
998/18: ?grf.SetMinimum
998/19: grf.SetMinimum(-0.1)
998/20: grf.SetMaximum(1.1)
998/21: ROOT.gPad.Update()
999/1: import ROOT
999/2: import numpy as np
999/3:
data = []
with open("Aoutput_all.log", "r") as f:
    for line in f.readlines():
        data.append(list(map(float, line.split())))
1000/1: import ROOT
1000/2: import numpy as np
1000/3:
data = []
with open("Aoutput_all.log", "r") as f:
    for line in f.readlines():
        data.append(list(map(float, line.split())))
1000/4: den = ROOT.TH1F("den", "DEN", len(bins) - 1, bins)
1000/5:
data = []
with open("Aoutput_all.log", "r") as f:
    for line in f.readlines():
        data.append(list(map(float, line.split())))
1000/6: data = np.array(data)
1000/7: bins = np.linspace(data[:, 2].min(), data[:, 2].max(), 32)
1000/8: num = ROOT.TH1F("num", "NUM", len(bins) - 1, bins)
1000/9: den = ROOT.TH1F("den", "DEN", len(bins) - 1, bins)
1000/10:
for ii in range(bins.shape[0] - 1):
    inbin = np.where(
        np.all([data[:, 2] >= bins[ii], data[:, 2] < bins[ii + 1]], axis=0)
    )[0]
    numTotal = np.sum(data[inbin, 10])
    denTotal = np.sum(data[inbin, 10]) + np.sum(data[inbin, 11])
    num.SetBinContent(ii + 1, numTotal)
    den.SetBinContent(ii + 1, denTotal)
    print(ii, numTotal / denTotal)
1000/11: eff = ROOT.TEfficiency(num, den)
1000/12: eff.Draw("SAME")
1000/13: ROOT.gPad.Update()
1000/14: grf = eff.GetPaintedGraph()
1000/15: xAxix = grf.GetXaxis()
1000/16: xAxix
1000/17: ?xAxix.SetRangeUser
1001/1: import docx
1002/1: import docx
1003/1: import docx
1004/1: import bs4
1005/1: %load_ext autoreload
1005/2: %autoreload 2
1005/3: import svganim
1005/4: from svganim import SvgAnim
1005/5: a = SvgAnim(1)
1005/6: a
1005/7: a.l
1006/1: import ROOT
1006/2: ROOT.kOpenCircle
1006/3: ROOT.kOpenDiamond
1006/4: ROOT.kOpenCircle
1006/5: ROOT.kOpenSquare
1006/6: ROOT.kOpenDiamond
1007/1: import sympy
1009/1: import numpy as np
1009/2: import tensorflow as tf
1009/3: print("TensorFlow version : ", tf.__version__)
1009/4: mnist = tf.keras.datasets.mnist
1009/5: (x_train, y_train), (x_test, y_test) = mnist.load_data()
1009/6: x_train
1009/7: type(x_train)
1009/8: np.array([1 , 2 , 3])
1009/9: type(np.array([1, 2, 3]))
1009/10: x_train.shape
1009/11: x_test.shape
1009/12: y_train.shape
1009/13: y_train
1009/14: (x_train, y_train), (x_test, y_test) = mnist.load_data()
1009/15: x_train, x_test = x_train / 255.0, x_test / 255.0
1009/16: x_train[0]
1009/17: x_train.shape
1009/18: x_train.shape[0 , : , :]
1009/19: x_train[0 , : , :]
1009/20: x_train[0, :, :].shape
1009/21:
model = tf.keras.models.Sequential(
    [
        tf.keras.layers.Flatten(input_shape=(28, 28)),
        tf.keras.layers.Dense(128, activation="relu"),
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.Dense(10),
    ]
)
1010/1: import numpy as np
1010/2: import tensorflow as tf
1010/3: mnist = tf.keras.datasets.mnist
1010/4: (x_train, y_train), (x_test, y_test) = mnist.load_data()
1010/5: x_train, x_test = x_train / 255.0, x_test / 255.0
1010/6:
model = tf.keras.models.Sequential(
    [
        tf.keras.layers.Flatten(input_shape=(28, 28)),
        tf.keras.layers.Dense(128, activation="relu"),
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.Dense(10),
    ]
)
1010/7: predictions = model(x_train[:1]).numpy()
1013/1: import sklearn
1013/2: import pandas
1013/3: import matplotlib
1014/1: import scipy
1016/1: print("Hello World!")
1016/2:
def add(x):
    return x + 1
1016/3: print("111")
1016/4:
def addToArg(x):
    return x + 1
1016/5: print("Value after : " , addToArg(123));
1017/1: print("111")
1017/2:
def addToArg(x):
    return x + 1
1017/3: print("Value after : " , addToArg(123));
1017/4: print("Value after : " , addToArg(123));
1017/5: import os
1017/6: import tarfile
1017/7: from six.moves import urllib
1017/8:
DOWNLOAD_ROOT = "https://github.com/ageron/handson-ml2/blob/master/"
HOUSING_PATH = is.path.join("datasets" , "housing") #"datasets/housing/housing.tgz"
HOUSING_URL = DOWNLOAD_ROOT + "datasets/housing/housing.tgz"
1017/9:
DOWNLOAD_ROOT = "https://github.com/ageron/handson-ml2/blob/master/"
HOUSING_PATH = os.path.join("datasets" , "housing") #"datasets/housing/housing.tgz"
HOUSING_URL = DOWNLOAD_ROOT + "datasets/housing/housing.tgz"
1017/10: os.curdir()
1017/11: os.curdir
1017/12: print(os.path.abspath(os.curdir))
1017/13:
def fetch_housing_data(housing_url = HOUSING_URL , housing_path = HOUSING_PATH):
    if not os.path.isdir(housing_path):
        os.makedirs(housing_path)
    tgz_path = os.path.join(housing_path , "housing.tgz")
    urllib.request.urlretrieve(housing_url , tgz_path)
    housing_tgz = tarfile.open(tgz_path)
    housing_tgz.extractall(path = housing_path)
    housing_tgz.close()
1017/14: fetch_housing_data()
1017/15: fetch_housing_data()
1017/16:
def fetch_housing_data(housing_url = HOUSING_URL , housing_path = HOUSING_PATH):
    if not os.path.isdir(housing_path):
        os.makedirs(housing_path)
    tgz_path = os.path.join(housing_path , "housing.tgz")
    print(tgz_path)
    urllib.request.urlretrieve(housing_url , tgz_path)
    housing_tgz = tarfile.open(tgz_path)
    housing_tgz.extractall(path = housing_path)
    housing_tgz.close()
1017/17: fetch_housing_data()
1018/1: import tarfile
1018/2: housing_tgz = targile.open("datasets/housing/housing.tgz")
1018/3: housing_tgz = tarfile.open("datasets/housing/housing.tgz")
1018/4: housing_tgz = tarfile.open("/home/kacper/Documents/Machine_Learning/code/temp_28-06-2022/datasets/housing/housing.tgz")
1017/18:
DOWNLOAD_ROOT = "https://github.com/ageron/handson-ml2/raw/master/"
HOUSING_PATH = os.path.join("datasets" , "housing") #"datasets/housing/housing.tgz"
HOUSING_URL = DOWNLOAD_ROOT + "datasets/housing/housing.tgz"
1017/19: print(os.path.abspath(os.curdir))
1017/20:
def fetch_housing_data(housing_url = HOUSING_URL , housing_path = HOUSING_PATH):
    if not os.path.isdir(housing_path):
        os.makedirs(housing_path)
    tgz_path = os.path.join(housing_path , "housing.tgz")
    print(tgz_path)
    urllib.request.urlretrieve(housing_url , tgz_path)
    housing_tgz = tarfile.open(tgz_path)
    housing_tgz.extractall(path = housing_path)
    housing_tgz.close()
1017/21: fetch_housing_data()
1017/22: import pandas as pd
1017/23:
def load_housing_data(housing_path = HOUSING_PATH):
    csv_path = os.path.join(housing_path , "housing.csv")
    return ps.read_csv(csv_path)
1017/24: hd = load_housing_data()
1017/25:
def load_housing_data(housing_path = HOUSING_PATH):
    csv_path = os.path.join(housing_path , "housing.csv")
    return pd.read_csv(csv_path)
1017/26: hd = load_housing_data()
1017/27: hd
1017/28: housing = load_housing_data()
1017/29: housing.head()
1017/30: housing[['total_rooms']]
1017/31: housing[['total_rooms' , 'population']]
1017/32: housing[['total_rooms' , 'population']][0]
1017/33: housing[['total_rooms' , 'population']][1]
1017/34: housing[['total_rooms' , 'population']][[1]]
1017/35: housing['longitude']
1017/36: type(housing['longitude'])
1017/37: housing['longitude']
1017/38: housing['longitude' , 'total_rooms']
1017/39: housing.loc('NEAR BAY')
1017/40: housing
1017/41: housing["ocean_proximity"]
1017/42: housing.loc("INLAND")
1017/43: housing["ocean_proximity"].loc("INLAND")
1017/44:
def load_housing_data(housing_path = HOUSING_PATH):
    csv_path = os.path.join(housing_path , "housing.csv" , index_col = "ocean_proximity")
    return pd.read_csv(csv_path)
1017/45: housing = load_housing_data()
1017/46:
def load_housing_data(housing_path = HOUSING_PATH):
    csv_path = os.path.join(housing_path , "housing.csv")
    return pd.read_csv(csv_path , index_col = "ocean_proximity")
1017/47: housing = load_housing_data()
1017/48: housing["ocean_proximity"].loc("INLAND")
1017/49:
def load_housing_data(housing_path = HOUSING_PATH):
    csv_path = os.path.join(housing_path , "housing.csv")
    return pd.read_csv(csv_path , index_col = "ocean_proximity")
1017/50: housing = load_housing_data()
1017/51: housing
1017/52: housing.loc("INLAND")
1017/53:
def load_housing_data(housing_path = HOUSING_PATH):
    csv_path = os.path.join(housing_path , "housing.csv")
    return pd.read_csv(csv_path)
1017/54: housing = load_housing_data()
1017/55: housing
1017/56: housing.loc("INLAND")
1017/57: housing.head()
1017/58: housing.info()
1017/59: housing[2]
1017/60: ?housing.iloc
1017/61: housing.iloc[0]
1017/62: type(housing.iloc[0])
1017/63: housing.iloc[0].info()
1017/64: housing.value_counts()
1017/65: housing["ocean_proximity"].value_counts()
1017/66: housing.describe()
1017/67: %matplotlib.inline
1017/68: %matplotlib inline
1017/69: import matplotlib.pyplot as plt
1017/70: housing.hist(bins = 50 , figsize = (20 , 15))
1017/71: plt.show()
1017/72: housing['housing_median_age'].hist(bins = 50 , figsize = (20 , 15))
1017/73: housing['median_income'].hist(bins = 50 , figsize = (20 , 15))
1017/74: housing['median_age'].hist(bins = 50 , figsize = (20 , 15))
1017/75: housing['housing_median_age'].hist(bins = 50 , figsize = (20 , 15))
1017/76:
def split_train_test(data , test_ratio):
    shuffled_indices = np.random.permutation(len(data))
    test_set_size = int(len(data) * test_ratio)
    test_indices = shuffled_indices[:test_set_size]
    train_indices = shuffled_indices[test_set_size:]
    return data.iloc[train_indices] , data.iloc[test_indices]
1017/77: trI , teI = split_train_test(housing , 0.2)
1017/78:
import numpy as np
def split_train_test(data , test_ratio):
    shuffled_indices = np.random.permutation(len(data))
    test_set_size = int(len(data) * test_ratio)
    test_indices = shuffled_indices[:test_set_size]
    train_indices = shuffled_indices[test_set_size:]
    return data.iloc[train_indices] , data.iloc[test_indices]
1017/79: trI , teI = split_train_test(housing , 0.2)
1017/80: trI , teI = split_train_test(housing , 0.2)
1017/81: trI , teI = split_train_test(housing , 0.2)
1017/82: trI
1017/83: from zlib import crc32
1017/84: from sklearn.model_selection import train_test_split
1017/85: train_test , test_set = train_test_split(housing , test_size = 0.2 , random_state = 42)
1017/86: pd.cut(housing["median_income"] , bins = [0.0 , 1.5 , 3.0 , 4.5 , 5.0 , np.inf] , labels = [1 , 2 , 3 , 4 ,5])
1017/87: housing["income_cat"] = pd.cut(housing["median_income"] , bins = [0.0 , 1.5 , 3.0 , 4.5 , 5.0 , np.inf] , labels = [1 , 2 , 3 , 4 ,5])
1017/88: housing
1017/89: housing["income_cat"].hist()
1017/90: from sklearn.model_selection import StratifiedShuffleSplit
1017/91: split = StratifiedShuffleSplit(n_splits = 1 , test_size = 0.2 , random_state = 42)
1017/92:
for train_index , test_index in split.split(housing , housing["income_cat"]):
    strat_train_set = housing.loc[train_index]
    strat_test_set = housing.loc[test_index]
1017/93: split.split(housing , housing["income_cat"])
1017/94: strat_train_set["income_cat"].value_counts() / len(strat_test_set)
1017/95: strat_train_set["income_cat"].value_counts() / len(strat_train_set)
1017/96: strat_test_set["income_cat"].value_counts() / len(strat_test_set)
1017/97:
for set_ in (strat_train_set , strat_test_set):
    set_.drop("income_cat" , axix = 1 , inplace=False)
1017/98:
for set_ in (strat_train_set , strat_test_set):
    set_.drop("income_cat" , axis = 1 , inplace=False)
1017/99: housing = strat_train_set.copy()
1020/1: import numpy as np
1020/2: ?np.zeros
1021/1: ?print
1023/1: clear
1023/2: ls
1023/3: clear
1023/4: print("Hello World!")
1023/5: ?print
1023/6:
if 5 > 2:
    print("Five is greater then 2")
1024/1:
if 5 > 2:
    print("Five is greater then 2")
1024/2:
if 5 > 2:
    print("Hello!")
    print("five is greater then two!")
1024/3:
if 5 > 2:
    print("Hello!")
    print("five is greater then two!")
1024/4:
if 5 > 2:
    print("Hello!")
    print("five is greater then two!")
1025/1: a = "123"
1025/2: b = "321"
1025/3: b = "123"
1025/4: a == b
1025/5: a is b
1025/6: ?is
1025/7: a = [1 , 2 , 3 , 4]
1025/8: b = [1 , 2 , 3 , 4]
1025/9: a is b
1025/10: a == b
1026/1: clear
1026/2: ls
1026/3: pwd
1026/4: %load_ext autoreload
1026/5: %autoreload 2
1026/6: import prices
1026/7: ls
1026/8: fetch_housing_data()
1026/9: prices.fetch_housing_data()
1026/10: prices.fetch_housing_data()
1026/11: ls
1026/12: prices.fetch_housing_data()
1026/13: ls ./datasets/
1026/14: ls ./datasets/housing/
1026/15: %s ./datasets/housing/
1026/16: %ls ./datasets/housing/
1026/17: %ls
1026/18: prices.load_housing_data()
1026/19: prices.load_housing_data()
1026/20: data = prices.load_housing_data()
1026/21: data.head()
1026/22: data.head()
1026/23: ?housing.info
1026/24: ?housing.info()
1026/25: data.info?
1026/26: data.info()
1026/27: data["ocean_proximity"]
1026/28: data["ocean_proximity"].value_counts()
1026/29: data.describe()
1026/30: import matplotlib.pyplot as plt
1026/31: ?data.hist
1026/32: housing.hist(bins=50, figsize=(20, 15))
1026/33: data.hist(bins=50, figsize=(20, 15))
1026/34: plt.show()
1026/35: plt.show()
1026/36: import prices
1026/37: data.hist(bins=50, figsize=(20, 15))
1026/38: import prices
1026/39: plt.show()
1026/40: data
1026/41: data.reset_index()
1026/42: prices.split_train_test_by_id(data.reset_index(), 0.2, "index")
1026/43: prices.split_train_test_by_id(data.reset_index(), 0.2, "index")
1026/44: prices.split_train_test_by_id(data.reset_index(), 0.2, "index")
1026/45: prices.split_train_test_by_id(data.reset_index(), 0.2, "index")
1026/46: prices.split_train_test_by_id(data.reset_index(), 0.2, "index")
1026/47: ~true
1026/48: [0, 1, 2, 3, 4, 5][~[1, 2]]
1026/49: [0, 1, 2, 3, 4, 5][~[1, 2]]
1026/50: prices.split_train_test_by_id(data.reset_index(), 0.2, "index")
1026/51: data
1026/52: prices.split_train_set(data)
1026/53: data.hist(bins=50, figsize=(20, 15))
1026/54: plt.show()
1026/55: import pandas as pd
1026/56: ?pd.cut
1026/57: data = prices.load_housing_data()
1026/58: data
1026/59: housing["income_cat"].hist()
1026/60: housing["income_cat"].hist()
1026/61: data["income_cat"].hist()
1026/62: plt.show
1026/63: plt.show()
1026/64: from sklearn.model_selection import StratifiedShuffleSplit
1026/65: ?StratifiedShuffleSplit
1026/66: data = prices.load_housing_data()
1026/67: data = prices.load_housing_data()
1026/68: data = prices.load_housing_data()
1026/69: data = prices.load_housing_data()
1026/70: data = prices.load_housing_data()
1026/71: data = prices.load_housing_data()
1026/72: data = prices.load_housing_data()
1026/73: data
1026/74: strat_train_set, strat_test_set = prices.load_housing_data()
1026/75: strat_test_set["income_cat"].value_counts() / len(strat_test_set)
1026/76: strat_train_set["income_cat"].value_counts() / len(strat_train_set)
1026/77: strat_train_set, strat_test_set = prices.load_housing_data()
1026/78: strat_train_set
1026/79: ?strat_train_set.drop
1026/80: strat_train_set, strat_test_set = prices.load_housing_data()
1026/81: strat_train_set.head()
1026/82: strat_train_set, strat_test_set = prices.load_housing_data()
1026/83: strat_train_set.head()
1026/84: housing = stat_train_set.copy()
1026/85: housing = strat_train_set.copy()
1026/86: housing.plot(kind="scatter", x="longitude", y="latitude")
1026/87: plt.show()
1026/88: housing.plot(kind="scatter", x="longitude", y="latitude" , alpha = 0.1)
1026/89: plt.show()
1026/90: housing.describe()
1026/91: housing.plot(kind="scatter", x="longitude", y="latitude" , alpha = 0.4)
1026/92: plt.show()
1026/93: housing.plot(kind="scatter", x="longitude", y="latitude" , alpha = 0.4 , )
1027/1: import prices
1027/2: strat_train_set, strat_test_set = prices.load_housing_data()
1027/3: housing = strat_train_set.copy()
1027/4: housing.head()
1027/5:
import matplotlib as plt

housing.plot(
    kind="scatter",
    x="longitude",
    y="latitude",
    alpha=0.4,
    s=housing["population"] / 100,
    label="population",
    figsize=(10, 7),
    c="median_house_value",
    cmap=plt.get_cmap("jet"),
    colorbar=True,
)
1027/6: plt.cm.get_cmap
1027/7: ?plt.cm.get_cmap
1027/8:
import matplotlib as plt

housing.plot(
    kind="scatter",
    x="longitude",
    y="latitude",
    alpha=0.4,
    s=housing["population"] / 100,
    label="population",
    figsize=(10, 7),
    c="median_house_value",
    cmap=plt.cm.get_cmap("jet"),
    colorbar=True,
)
1027/9: plt.show()
1027/10: import matplotlib.pyplot as plt
1027/11:
housing.plot(
    kind="scatter",
    x="longitude",
    y="latitude",
    alpha=0.4,
    s=housing["population"] / 100,
    label="population",
    figsize=(10, 7),
    c="median_house_value",
    cmap=plt.get_cmap("jet"),
    colorbar=True,
)
1027/12: plt.show()
1027/13: plt.show()
1027/14:
housing.plot(
    kind="scatter",
    x="longitude",
    y="latitude",
    alpha=0.4,
    s=housing["population"] / 100,
    label="population",
    figsize=(10, 7),
    c="median_house_value",
    cmap=plt.get_cmap("jet"),
    colorbar=True,
)
1027/15: plt.show()
1027/16:
housing.plot(
    kind="scatter",
    x="longitude",
    y="latitude",
    alpha=0.4,
    s=housing["population"] / 100,
    label="population",
    figsize=(10, 7),
    c="median_house_value",
    cmap=plt.get_cmap("jet"),
    colorbar=True,
)
1027/17: plt.legend()
1027/18: plt.show()
1027/19: corr_matrix = housing.corr()
1027/20: corr_matrix
1027/21: type(corr_matrix)
1027/22: corr_matrix["median_house_value"]
1027/23: corr_matrix["median_house_value"].sort_values(ascending = False)
1027/24: from pandas.plotting import scatter_matrix
1027/25:
attributes = [
    "median_house_value",
    "median_income",
    "total_rooms",
    "housing_median_age",
]
1027/26: scatter_matrix(housing[attributes], figsize=(12, 8))
1027/27: plt.show()
1027/28: housing.plot(kind = "scatter" , x = "medina_income" , y = "median_house_value" , alpha = 0.1)
1027/29: housing.plot(kind = "scatter" , x = "median_income" , y = "median_house_value" , alpha = 0.1)
1027/30: plt.show()
1027/31: housing["rooms_per_houshold"] = housing["total_rooms"] / housing["housholds"]
1027/32: housing["rooms_per_houshold"] = housing["total_rooms"] / housing["households"]
1027/33: housing["bedrooms_per_room"] = housing["total_bedrooms"] / housing["total_rooms"]
1027/34: housing["population_per_houshold"] = housing["population"] / housing["housholds"]
1027/35: housing["population_per_houshold"] = housing["population"] / housing["households"]
1027/36: corr_matrix["median_house_value"].sort_values(ascending=False)
1027/37: corr_matrix = housing.corr()
1027/38: corr_matrix["median_house_value"].sort_values(ascending=False)
1028/1: %load_ext autoreload
1028/2: %autoreload 2
1028/3: import matplotlib.pyplot as plt
1028/4: import prices
1028/5: ls
1028/6: cd temp_25-07-2022/
1028/7: import prices
1028/8: from pandas.plotting import scatter_matrix
1028/9: strat_train_set, strat_test_set = prices.load_housing_data()
1028/10: strat_train_set.copy()
1028/11: housing = strat_train_set.copy()
1028/12: strat_train_set, strat_test_set = prices.load_housing_data()
1028/13: housing = strat_train_set.copy()
1028/14: housing
1028/15: housing["rooms_per_houshold"] = housing["total_rooms"] / housing["households"]
1028/16: housing["bedrooms_per_room"] = housing["total_bedrooms"] / housing["total_rooms"]
1028/17: housing["population_per_houshold"] = housing["population"] / housing["households"]
1028/18: corr_matrix = housing.corr()
1028/19: cor_matrix["median_house_value"].sort_values(ascending=False)
1028/20: cord_matrix["median_house_value"].sort_values(ascending=False)
1028/21: corr_matrix["median_house_value"].sort_values(ascending=False)
1028/22: strat_train_set, strat_test_set = prices.load_housing_data()
1028/23: strat_train_set, strat_test_set = prices.prepare_sets()
1028/24: strat_train_set, strat_test_set = prices.prepare_sets()
1028/25: housing , housing_labels = prices.copy_data(strat_train_set)
1028/26: housing, housing_labels = prices.clean_data(strat_train_set)
1028/27: prices.clean_data(strat_train_set)
1028/28: housing , housing_labels = prices.clean_data(strat_train_set)
1028/29: strat_train_set, strat_test_set = prices.load_housing_data()
1028/30: strat_train_set, strat_test_set = prices.prepare_sets()
1028/31: housing, housing_labels = prices.clean_data(strat_train_set)
1028/32: housing
1028/33: housing_labels
1028/34: housing, housing_labels = prices.clean_data(strat_train_set)
1028/35: housing, housing_labels = prices.clean_data(strat_train_set)
1028/36: housing, housing_labels, imputer = prices.clean_data(strat_train_set)
1028/37: housing, housing_labels, imputer = prices.clean_data(strat_train_set)
1028/38: strat_train_set, strat_test_set = prices.prepare_sets()
1028/39: housing, housing_labels, imputer = prices.clean_data(strat_train_set)
1028/40: strat_train_set, strat_test_set = prices.prepare_sets()
1028/41: strat_train_set, strat_test_set = prices.prepare_sets()
1028/42: housing, housing_labels, imputer = prices.clean_data(strat_train_set)
1028/43: strat_train_set, strat_test_set = prices.prepare_sets()
1028/44: housing, housing_labels, imputer = prices.clean_data(strat_train_set)
1028/45: housing
1028/46: strat_train_set, strat_test_set = prices.prepare_sets()
1028/47: housing, housing_labels, imputer = prices.clean_data(strat_train_set)
1028/48: strat_train_set, strat_test_set = prices.prepare_sets()
1028/49: housing, housing_labels = prices.clean_data(strat_train_set)
1028/50: housing, housing_labels = prices.clean_data(strat_train_set)
1028/51: strat_train_set, strat_test_set = prices.prepare_sets()
1028/52: housing, housing_labels = prices.clean_data(strat_train_set)
1028/53: housing
1028/54: housing.drop("ocean_proximity")
1028/55: housing, housing_labels = prices.clean_data(strat_train_set)
1028/56: strat_train_set, strat_test_set = prices.prepare_sets()
1028/57: housing, housing_labels = prices.clean_data(strat_train_set)
1028/58: housing, housing_labels, imputer = prices.clean_data(strat_train_set)
1028/59: imputer.statistics_
1028/60: housing, housing_labels, imputer, housing_num = prices.clean_data(strat_train_set)
1028/61: housing_num.median()
1028/62: housing_num.median().values
1028/63: strat_train_set, strat_test_set = prices.prepare_sets()
1028/64: housing, housing_labels, imputer, housing_tr = prices.clean_data(strat_train_set)
1028/65: housing_tr
1028/66: housing["ocean_proximity"]
1028/67: housing[["ocean_proximity"]]
1028/68: type(housing[["ocean_proximity"]])
1028/69: housing["ocean_proximity"]
1028/70: housing[["ocean_proximity"]]
1028/71: housing[[["ocean_proximity"]]]
1028/72: housing[["ocean_proximity"]]
1028/73: housing_cat = housing[["ocean_proximity"]]
1028/74: housing["ocean_proximity"]
1028/75: type(housing["ocean_proximity"])
1028/76: housing[["ocean_proximity"]]
1028/77: type(housing[["ocean_proximity"]])
1028/78: from sklearn.preprocessing import OrdinalEncoder
1028/79: ordinal_encoder = OrdinalEncoder()
1028/80: ordinal_encoder
1028/81: housing_cat_encoded = ordinal_envoder.fit_transform(housing_cat)
1028/82: housing_cat_encoded = ordinal_encoder.fit_transform(housing_cat)
1028/83: housing_cat_encoded = ordinal_envoder.fit_transform(housing_cat)
1028/84: housing_cat_encoded = ordinal_encoder.fit_transform(housing_cat)
1028/85: housing_cat_encoded
1028/86: ordinal_encoder.categories_
1028/87: ordinal_encoder.categories
1028/88: ordinal_encoder.categories_
1028/89: housing, housing_labels, imputer, housing_tr = prices.clean_data(strat_train_set)
1028/90: housing_tr
1028/91: housing, housing_labels, imputer, housing_tr, housing_cat_encoded = prices.clean_data(strat_train_set)
1028/92: housing_cat_encoded
1028/93:
housing, housing_labels, imputer, housing_tr, housing_cat_encoded = prices.clean_data(
    strat_train_set
)
1028/94: imputer.statistics_
1028/95:
housing, housing_labels, imputer, housing_tr, housing_cat_encoded = prices.clean_data(
    strat_train_set
)
1028/96:
housing, housing_labels, imputer, housing_tr, housing_cat_encoded = prices.clean_data(
    strat_train_set
)
1028/97:
housing, housing_labels, imputer, housing_tr, housing_cat_encoded = prices.clean_data(
    strat_train_set
)
1028/98:
(
    housing,
    housing_labels,
    imputer,
    housing_tr,
    cat_encoder,
    housing_cat_encoded,
) = prices.clean_data(strat_train_set)
1028/99:
(
    housing,
    housing_labels,
    imputer,
    housing_tr,
    cat_encoder,
    housing_cat_1hot,
) = prices.clean_data(strat_train_set)
1028/100:
(
    housing,
    housing_labels,
    imputer,
    housing_tr,
    cat_encoder,
    housing_cat_1hot,
) = prices.clean_data(strat_train_set)
1028/101:
(
    housing,
    housing_labels,
    imputer,
    housing_tr,
    cat_encoder,
    housing_cat_1hot,
) = prices.clean_data(strat_train_set)
1028/102:
(
    housing,
    housing_labels,
    imputer,
    housing_tr,
    cat_encoder,
    housing_cat_1hot,
) = prices.clean_data(strat_train_set)
1028/103: housing_cat_1hot
1028/104: cat_encoder.categories_
1029/1: %load_ext autoreload
1029/2: %autoreload 2
1029/3: import prices
1029/4:
(
    housing,
    housing_labels,
    imputer,
    housing_tr,
    cat_encoder,
    housing_cat_1hot,
) = prices.clean_data(strat_train_set)
1029/5: strat_train_set, strat_test_set = prices.prepare_sets()
1029/6:
(
    housing,
    housing_labels,
    imputer,
    housing_tr,
    cat_encoder,
    housing_cat_1hot,
) = prices.clean_data(strat_train_set)
1029/7: housing_cat_1hot.toarray()
1029/8: cat_encoder.categories_
1029/9: housing.values
1029/10: strat_train_set, strat_test_set = prices.prepare_sets()
1029/11:
(
    housing,
    housing_labels,
    imputer,
    housing_tr,
    cat_encoder,
    housing_cat_1hot,
) = prices.clean_data(strat_train_set)
1029/12: attr_adder = prices.CombinedAttributesAdder(add_bedrooms_per_room=False)
1029/13: housing_extra_attribs = attr_adder.transform(housing.values)
1029/14: housing_extra_attribs
1029/15: import pandas as pd
1029/16: pd.DataFrame(housing_extra_attribs)
1029/17: pd.DataFrame(housing_extra_attribs , columns = housing.columns)
1029/18: pd.DataFrame(housing_extra_attribs , columns = housing.columns + ["asda" , "dddd"])
1029/19: housing.columns
1029/20: len(housing.columns)
1029/21: pd.DataFrame(housing_extra_attribs , columns = ["1" , "2" , "3" , "4" , "5" , "6" , "7" , "8" , "9" , "10" , "11"])
1029/22:
pd.DataFrame(
    housing_extra_attribs,
    columns=["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"],
)
1029/23: housing_extra_attribs = attr_adder.transform(housing.values)
1029/24:
pd.DataFrame(
    housing_extra_attribs,
    columns=["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"],
)
1029/25: (housing, housing_num) = prices.clean_data(strat_train_set)
1029/26: (housing, housing_num_tr) = prices.clean_data(strat_train_set)
1029/27: housing_num_tr
1029/28: list(housing_num_tr)
1029/29: (housing, housing_num) = prices.clean_data(strat_train_set)
1029/30: list(housing)
1029/31: housing.attrs
1029/32: housing.columns
1029/33: (housing, housing_prepared) = prices.clean_data(strat_train_set)
1029/34: from sklearn.compose import ColumnTransformer
1029/35: (housing, housing_prepared) = prices.clean_data(strat_train_set)
1029/36: (housing, housing_prepared) = prices.clean_data(strat_train_set)
1029/37: housing_prepared
1029/38: (housing, housing_prepared) = prices.clean_data(strat_train_set)
1029/39: (housing, housing_prepared , full_pipeline) = prices.clean_data(strat_train_set)
1029/40: full_pipeline.cat
1029/41: full_pipeline['cat']
1029/42: full_pipeline.transformers
1029/43: full_pipeline
1029/44: full_pipeline.transformers_
1029/45: full_pipeline.transformers
1029/46: full_pipeline.transformers[0]
1029/47: full_pipeline.transformers[1]
1029/48: type(full_pipeline.transformers[1])
1029/49: type(full_pipeline.transformers[1][1])
1029/50: full_pipeline.transformers[1][1].categories_
1029/51: full_pipeline.get_feature_names_out()
1029/52: full_pipeline.get_feature_names_out()[:-1]
1029/53: full_pipeline[:-1]
1029/54: full_pipeline.get_params()
1029/55: full_pipeline.cat__sparse
1029/56: full_pipeline.get_feature_names()
1029/57: full_pipeline['num']
1029/58: full_pipeline.named_transformers_
1029/59: full_pipeline.named_transformers_['cat']
1029/60: full_pipeline.named_transformers_["cat"].categories_
1029/61: housing[: , 2]
1029/62: housing
1029/63: housing_prepared = prices.clean_data(strat_train_set)
1029/64: housin
1029/65: housing_prepared
1029/66: housing_prepared, housing_labels = prices.clean_data(strat_train_set)
1029/67: housing_labels
1029/68: import numpy as np
1029/69: housing_labels
1029/70: housing_labels[0] + np.array(["123" , "23123123"])
1029/71: np.concatenate(housing_labels[0] + np.array(["123", "23123123"]))
1029/72: housing_labels[0]
1029/73: np.array(["123", "23123123"])
1029/74: np.array(["123", "23123123"] , dtype = "object")
1029/75: np.concatenate(housing_labels[0] + np.array(["123", "23123123"] , dtype = "object"))
1029/76: np.concatenate((housing_labels[0] + np.array(["123", "23123123"] , dtype = "object")))
1029/77: np.concatenate((housing_labels[0] , np.array(["123", "23123123"] , dtype = "object")))
1029/78: np.concatenate((housing_labels[0] , np.array(["123", "23123123"])))
1029/79: housing_prepared, housing_labels = prices.clean_data(strat_train_set)
1029/80: housing_prepared, housing_labels = prices.clean_data(strat_train_set)
1029/81: housing_prepared, housing_labels = prices.clean_data(strat_train_set)
1029/82: housing_num,housing_prepared, housing_labels = prices.clean_data(strat_train_set)
1029/83: housing_num.columns
1029/84: housing_labels
1029/85: ?Index
1029/86: housing_num, housing_prepared, housing_labels = prices.clean_data(strat_train_set)
1029/87: housing_num, housing_prepared, housing_labels = prices.clean_data(strat_train_set)
1029/88: housing_num, housing_prepared, housing_labels = prices.clean_data(strat_train_set)
1029/89: housing_num, housing_prepared, housing_labels = prices.clean_data(strat_train_set)
1029/90: housing_num, housing_prepared, housing_labels = prices.clean_data(strat_train_set)
1029/91: housing_prepared, housing_labels = prices.clean_data(strat_train_set)
1029/92: housing_labels
1029/93: pd.DataFrame(housing_prepared, columns=housing_labels)
1029/94: housing_labels
1029/95: len(housing_labels)
1029/96: housing_prepared, housing_labels = prices.clean_data(strat_train_set)
1029/97: len(housing_labels)
1029/98: pd.DataFrame(housing_prepared, columns=housing_labels)
1029/99: pd.DataFrame(housing_prepared, columns=housing_labels)
1029/100: from sklearn_model import LinearRegression
1029/101: from sklearn.linear_model import LinearRegression
1029/102: ?LinearRegression
1029/103: lin_reg = LinearRegression()
1029/104: ?lin_reg
1029/105: housing_prepared, housing_labels = prices.clean_data(strat_train_set)
1029/106: housing_prepared
1029/107: housing_labels
1029/108: lin_reg = LinearRegression()
1029/109: lin_reg.fit(housing_prepared , housing_labels)
1029/110: housing, housing_prepared, housing_labels = prices.clean_data(strat_train_set)
1029/111: lin_reg = LinearRegression()
1029/112: lin_reg.fit(housing_prepared, housing_labels)
1029/113: some_data = housing.illoc
1029/114: ?housing.iloc
1029/115: housing.iloc[:5]
1029/116: some_data = housing.iloc[:5]
1029/117: some_labels = housing_labels[:5]
1029/118: full_pipeline,housing, housing_prepared, housing_labels = prices.clean_data(strat_train_set)
1029/119: lin_reg = LinearRegression()
1029/120: lin_reg.fit(housing_prepared, housing_labels)
1029/121: some_data = housing.iloc[:5]
1029/122: some_labels = housing_labels[:5]
1029/123: some_data_prepared = full_pipeline.transform(some_data)
1029/124: lin_reg.predict(some_data_prepared)
1029/125: list(some_labels)
1029/126: ls
1029/127: !./f_project
1029/128: !./f_project
1029/129: !./f_project -h
1029/130: !./f_project -i
1029/131: !./f_project -i
1029/132: !./f_project -i
1029/133: !./f_project -i
1029/134: !./f_project -i
1029/135: !./f_project -i -u
1029/136: !./f_project -i -u
1029/137: !./f_project -i
1029/138: ls
1029/139: !rm -r ./datasets/
1029/140: !./f_project -i -u
1029/141: ls
1029/142: !./f_project -i -n
1029/143: !./f_project -i -n
1029/144: !./f_project -i
1029/145: !./f_project -i
1029/146: !./f_project -i
1029/147: !./f_project -i -n
1029/148: !./f_project
1029/149: !./f_project
1029/150: !./f_project
1029/151: !./f_project -t
1029/152: !./f_project -t
1029/153: !./f_project -it
1029/154: !./f_project -it
1029/155: !./f_project -it
1029/156: !./f_project -it
1029/157: !./f_project -it
1029/158: !./f_project -t
1029/159: !./f_project -t
1029/160: !./f_project -t
1030/1: ls
1031/1: !./f_project -h
1031/2: !./f_project -t
1031/3: !./f_project -t
1031/4: !./f_project -t
1031/5: !./f_project -t
1031/6: !./f_project -t
1031/7: !./f_project -t
1031/8: !./f_project -t
1031/9: !./f_project -t
1031/10: import numpy as np
1031/11: !./f_project -t
1031/12: !./f_project -t
1031/13: import numpy as np
1031/14: !./f_project -t
1031/15: !./f_project -t
1031/16: !./f_project -t
1031/17: !./f_project -t
1031/18: !./f_project -t
1031/19: !./f_project -t
1031/20: !./f_project -t
1031/21: !./f_project -t
1031/22: !./f_project -t
1031/23: !./f_project -t
1031/24: !./f_project -t
1031/25: !./f_project -t
1031/26: !./f_project -t
1031/27: !./f_project -t
1031/28: !./f_project -t
1031/29: !./f_project -t
1031/30: !./f_project -tv
1031/31: !./f_project -tv
1031/32: pwd
1031/33: !./f_project -tv -s final_model.pkl
1032/1: import joblib
1033/1: !./f_project -tv -s final_model.pkl
1033/2: ls
1033/3: !./f_project -tv -s final_model.pkl
1033/4: !./f_project -tv -s final_model.pkl
1033/5: !./f_project -tv -s final_model.pkl
1033/6: !./f_project -tv -s final_model.pkl
1033/7: !./f_project -tv -l final_model.pkl
1033/8: !./f_project -tv -l final_model.pkl
1033/9: !./f_project -tv -l final_model.pkl
1033/10: !./f_project -tv -l final_model.pkl
1033/11: !./f_project -tv -l final_model.pkl
1033/12: !./f_project -tv -l final_model.pkl
1033/13: !./f_project -tv -l final_model.pkl
1033/14: !./f_project -tv -l final_model.pkl
1033/15: !./f_project -tv -l final_model.pkl
1033/16: !./f_project -tv -l final_model.pkl
1033/17: !./f_project -tv -l final_model.pkl
1033/18: !./f_project -tv -s final_model.pkl
1033/19: from scipy import stats
1033/20: ?stats.t
1033/21: ?stats.t.interval
1033/22: from scipy import stats
1033/23: !./f_project -tv -l final_model.pkl
1033/24: !./f_project -tv -l final_model.pkl
1033/25: !./f_project -tv -s final_model.pkl
1035/1: from sklearn.datasets import fetch_openml
1038/1: %%html
1038/2: print("# this is the title")
1039/1: from sklearn.datasets import fetch_openml
1039/2: fetch_openml?
1039/3: fetch_openml?
1039/4: fetch_openml??
1039/5: %magic
1039/6: %pru a = 1 + 1
1039/7: %prun a = 1 + 1
1042/1: %load_ext autoreload
1042/2: %autoreload 2
1042/3: from sklearn.datasets import fetch_openml
1042/4: fetch_openml?
1042/5: minst = fetch_openml("minst_784" , version = 1)
1042/6: minst = fetch_openml("minst_784" , version = 2)
1042/7: mnist = fetch_openml("mnist_784" , version = 1)
1042/8: len(mnist)
1042/9: mnist
1042/10: st.keys()
1042/11: mnist.keys()
1042/12: mnist["DESCR"]
1042/13: mnist["data"]
1042/14: 24 * 24
1042/15: 28 * 28
1042/16: mnist["target"]
1042/17: %edit 1-17
1042/18: mnist["target"]
1042/19: mnist.keys()
1042/20: mnist["frame"]
1042/21: type(mnist["frame"])
1042/22: type(mnist["data"])
1042/23: minst["frame"] == minst["data"]
1042/24: mnist["frame"] == mnist["data"]
1042/25: mnist["frame"]
1042/26: type(mnist["data"])
1042/27: mnist["data"]
1042/28: data = minst["data"]
1042/29: data = mnist["data"]
1042/30: mnist["data"]
1042/31: data = mnist["data"]
1042/32: data.count
1042/33: mnist["frame"]["class"]
1042/34: mnist["frame" , "class"]
1042/35: mnist["frame"]["class"]
1042/36: mnist["frame"]["class"].describe()
1042/37: mnist["data"][0]
1042/38: mnist["data"]
1042/39: mnist["data"]
1042/40: X = mnist["data"]
1042/41: X.shap
1042/42: X.shape
1042/43: X
1042/44: X[0]
1043/1: from sklearn.datasets import fetch_openml
1043/2: mnist = fetch_openml("mnist_784", version=1)
1043/3: X , y = mnist["data"] , mnist["target"]
1043/4: X.shape
1043/5: Y.shape
1043/6: y.shape
1043/7: y[0]
1043/8: x[0]
1043/9: X[0]
1043/10: X
1043/11: type(X)
1043/12: import pandas as pd
1043/13: type(X)
1043/14: X[0]
1043/15: X, y = mnist["data"], mnist["target"]
1043/16: X[0]
1043/17: ?X.iloc
1044/1: %run ./classify
1044/2: X
1044/3: ?X.iloc
1044/4: X.iloc[0]
1044/5: X.iloc[0].reshape(28, 28)
1044/6: import numpy as np
1044/7: X.iloc[0].reshape(28, 28)
1044/8: X[0]
1044/9: %run ./classify
1044/10: X[0]
1044/11: X[0]
1044/12: X
1044/13: X.iloc(0)
1044/14: X.iloc[0]
1044/15: some_digit = X.iloc[0]
1044/16: some_digit.array
1044/17: some_digit.array.reshape(28, 28)
1044/18: some_digit_image = some_digit.array.reshape(28, 28)
1044/19: import matplotlib as mpl
1044/20: import matplotlib.pyplot as plt
1044/21: plt.show(some_digit_image, cmap=mpl.cm.binary, interpolation="nearest")
1044/22: plt.show(some_digit_image, cmap = mpl.cm.binary, interpolation="nearest")
1044/23: plt.show(some_digit_image, interpolation="nearest")
1044/24: plt.imshow(some_digit_image, cmap=mpl.cm.binary, interpolation="nearest")
1044/25: plt.axis("off")
1044/26: plt.show()
1044/27: some_digit = X.iloc[0].to_numpy()
1044/28: some_digit
1044/29: some_digit_image = some_digit.reshape(28, 28)
1044/30: plt.imshow(some_digit_image, cmap=mpl.cm.binary, interpolation="nearest")
1044/31: plt.show()
1044/32: plt.imshow(some_digit_image, cmap=mpl.cm.binary, interpolation="nearest")
1044/33: plt.show()
1044/34: y[5]
1044/35: y[0]
1044/36: y = y.astype(np.uint8)
1044/37: y
1044/38: mnist["describe"]
1044/39: mnis.keys()
1044/40: mnist.keys()
1044/41: mnist["DESCR"]
1044/42: print(mnist["DESCR"])
1044/43: print(mnist["DESCR"])
1044/44: %run ./classify
1044/45: %run ./classify
1044/46: from sklearn.linear_model SGDClassifier
1044/47: from sklearn.linear_model import SGDClassifier
1044/48: sgd_clf = SGDClassifier(random_state=42)
1044/49: sgd_clf = SGDClassifier(random_state=42)
1044/50: sgd_clf.train(X_train_5, y_train_5)
1044/51: sgd_clf.fit(X_train_5, y_train_5)
1044/52: sgd_clf.fit(X_train, y_train_5)
1044/53: %run ./classify
1044/54: %run ./classify
1044/55: %run ./classify
1044/56: sgd_clf.predict([some_digit])
1044/57: some_digit
1044/58: some_digit = X.iloc[0]
1044/59: sgd_clf.predict([some_digit])
1044/60: X
1044/61: sgd_clf.predict([some_digit])
1044/62: X.values
1044/63: type(X.values)
1044/64: :q
1046/1: import pandas as pd
1046/2: import numpy as pd
1046/3: import pandas as pd
1046/4: import numpy as np
1046/5: # getting the data
1046/6: import pandas as pd
1046/7: import pandas as pd
1046/8: import numpy as np
1046/9: import numpy as np
1046/10: import numpy as np
1046/11: import pandas as pd
1046/12: import pandas as pd
1046/13: import pandas as pd
1046/14: import pandas as pd
1046/15: import pandas as pd
1046/16: import numpy as np
1046/17: # getting the data
1046/18: from sklearn.datasets import
1046/19: from sklearn.datasets import SGDClassifier
1046/20: from sklearn.linear_model import SGDClassifier
1046/21: import numpy as np
1046/22: mnist = fetch_openml("mnist_784" , version = 1)
1046/23: from sklearn.datasets import fetch_openml
1046/24: mnist = fetch_openml("mnist_784" , version = 1)
1047/1: import pandas as pd
1047/2: import numpy as np
1047/3: from sklearn.datasets import fetch_openml
1047/4: mnist = fetch_openml("mnist_784" , version = 1)
1047/5: mnist = fetch_openml("mnist_784" , version = 1)
1047/6: mnist["data"]
1049/1: import pandas as pd
1049/2: import numpy as np
1049/3: from sklearn.datasets import fetch_openml
1049/4: mnist = fetch_openml("mnist_784" , version = 1)
1049/5: mnist["data"]
1049/6:
X , y = mnist['data'] , mnist['target']
y = y.astype(np.uint8)
1049/7: X_train , X_test , y_train , y_test = X[:60000] , X[60000:] , y[:60000] , y[60000:]
1049/8:
# drawing the data
import matplotlib as mpl
import matplotlib.pyplot as plt
1049/9: some_digit = X[0]
1049/10: some_digit = X.iloc[0]
1049/11: some_digit
1049/12: some_digit.values
1049/13: type(some_digit.values)
1049/14: some_digit_image = some_digit.values.reshape(28 , 28)
1049/15: some_digit_image = some_digit.values.reshape(28 , 28)
1049/16: print(some_digit_image)
1049/17: plt.imshow(some_digit_image , cmap = mpl.cm.binary , interpolation = "nearest")
1049/18:
plt.imshow(some_digit_image , cmap = mpl.cm.binary , interpolation = "nearest")
plt.axis("off")
1049/19:
plt.imshow(some_digit_image , cmap = mpl.cm.binary , interpolation = "nearest")
plt.axis("off")
plt.show()
1054/1: import pandas as pd
1054/2: import numpy as np
1054/3: from sklearn.datasets import fetch_openml
1054/4: mnist = fetch_openml("mnist_784" , version = 1)
1054/5:
X , y = mnist['data'] , mnist['target']
y = y.astype(np.uint8)
1054/6: X_train , X_test , y_train , y_test = X[:60000] , X[60000:] , y[:60000] , y[60000:]
1054/7:
# drawing the data
import matplotlib as mpl
import matplotlib.pyplot as plt
1054/8: some_digit = X.iloc[0]
1054/9: some_digit_image = some_digit.values.reshape(28 , 28)
1054/10:
plt.imshow(some_digit_image , cmap = mpl.cm.binary , interpolation = "nearest")
plt.axis("off")
plt.show()
1054/11: y_train_5 , y_test_5 = y_train == 5 , y_test == 5
1054/12: from sklearn.linear_model import SGDClassifier
1054/13: sgd_clf = SGDClassifier(random_state = 42)
1054/14: sgd_clf.fit(X_train , y_train_5)
1054/15: some_digit
1054/16: X_train
1054/17: type(some_digit)
1054/18: type(X_train)
1054/19: sgd_clf.predict([some_digit])
1054/20: sgd_clf.fit(X_train.values , y_train_5.values)
1054/21: sgd_clf.predict([some_digit.values])
1061/1: import pandas as pd
1061/2: import numpy as np
1061/3: from sklearn.datasets import fetch_openml
1061/4: mnist = fetch_openml("mnist_784" , version = 1)
1061/5:
X , y = mnist['data'] , mnist['target']
y = y.astype(np.uint8)
1061/6: X_train , X_test , y_train , y_test = X[:60000] , X[60000:] , y[:60000] , y[60000:]
1061/7:
# drawing the data
import matplotlib as mpl
import matplotlib.pyplot as plt
1061/8: some_digit = X.iloc[0]
1061/9: some_digit_image = some_digit.values.reshape(28 , 28)
1061/10:
plt.imshow(some_digit_image , cmap = mpl.cm.binary , interpolation = "nearest")
plt.axis("off")
plt.show()
1061/11: y_train_5 , y_test_5 = y_train == 5 , y_test == 5
1061/12: from sklearn.linear_model import SGDClassifier
1061/13: sgd_clf = SGDClassifier(random_state = 42)
1061/14: sgd_clf.fit(X_train.values , y_train_5.values)
1061/15: sgd_clf.predict([some_digit.values])
1061/16: from sklearn.model_selection import cross_val_predict
1061/17: y_train_pred = cross_val_predict(sgd_clf , X_train , y_train , cv = 5)
1061/18: y_train_pred
1061/19: y_train_pred = cross_val_predict(sgd_clf , X_train , y_train , cv = 3)
1061/20: from sklearn.model_selection import cross_val_predict
1061/21: y_train_pred = cross_val_predict(sgd_clf , X_train , y_train_5 , cv = 3)
1061/22: y_train_pred
1061/23: from sklearn.metrics import confusion_matrix
1061/24: confision_matrix(y_train_5 , y_train_pred)
1061/25: confusion_matrix(y_train_5 , y_train_pred)
1063/1: from manim import *
1064/1: import pandas as pd
1064/2: import numpy as np
1064/3: from sklearn.datasets import fetch_openml
1064/4: mnist = fetch_openml("mnist_784" , version = 1)
1064/5:
X , y = mnist['data'] , mnist['target']
y = y.astype(np.uint8)
1064/6: X_train , X_test , y_train , y_test = X[:60000] , X[60000:] , y[:60000] , y[60000:]
1064/7:
# drawing the data
import matplotlib as mpl
import matplotlib.pyplot as plt
1064/8: some_digit = X.iloc[0]
1064/9: some_digit_image = some_digit.values.reshape(28 , 28)
1064/10:
plt.imshow(some_digit_image , cmap = mpl.cm.binary , interpolation = "nearest")
plt.axis("off")
plt.show()
1064/11: y_train_5 , y_test_5 = y_train == 5 , y_test == 5
1064/12: from sklearn.linear_model import SGDClassifier
1064/13: sgd_clf = SGDClassifier(random_state = 42)
1064/14: sgd_clf.fit(X_train.values , y_train_5.values)
1064/15: sgd_clf.predict([some_digit.values])
1064/16: from sklearn.model_selection import cross_val_predict
1064/17: y_train_pred = cross_val_predict(sgd_clf , X_train , y_train_5 , cv = 3)
1064/18: y_train_pred
1064/19: from sklearn.metrics import confusion_matrix
1064/20: confusion_matrix(y_train_5 , y_train_pred)
1064/21: from sklearn.metrics import precision_score , recall_score
1064/22: precision_score(y_train_5 , y_train_pred)
1064/23: recall_score(y_train_5 , y_train_pred)
1064/24: from sklearn.metrics import f1_score
1064/25: f1_score(y_train_5 , y_train_pred)
1064/26: y_train_pred.shape
1064/27: ?cross_val_predict
1064/28: ?cross_val_predict
1064/29: y_train_pred.shape
1064/30: y_scores = cross_val_predict(sgd_clf , X_train , y_train_5 , cv = 3 , method = "decision_function")
1064/31: from sklearn.metrics import precision_recall_curve
1064/32: y_scores
1064/33: precisions , recalls , thresholds = precision_recall_curve(y_train_5 , y_scores)
1064/34: precisions
1064/35:
plt.plot(thresholds , precisions[:-1] , "b--" , label = "Precision")
plt.plot(thresholds , recalls[:-1] , "b-" , label = "Recalls")
plt.show()
1064/36:
plt.plot(thresholds , precisions[:-1] , "b--" , label = "Precision")
plt.plot(thresholds , recalls[:-1] , "b-" , label = "Recalls")
plt.show()
1064/37: plt.plot(recalls[:-1] , precisions[:-1])
1064/38: ?np.argmax
1064/39: np.argmax(precisions >= 0.90)
1064/40: thresholds[np.argmax(precisions >= 0.90)]
1064/41: threshold_90_precisionthresholds[np.argmax(precisions >= 0.90)]
1064/42: threshold_90_precision=thresholds[np.argmax(precisions >= 0.90)]
1064/43: np.argmax([1 , 2 , 3])
1064/44: np.argmax([1 , 2 , 2])
1064/45: y_train_pred_90 = y_scores > threshold_90_precision
1064/46: y_train_pred_90 = (y_scores > threshold_90_precision)
1064/47: y_train_pred_90
1064/48: precision_score(y_train_5 , y_train_pred_90)
1064/49: threshold_score(y_train_5 , y_train_pred_90)
1064/50: recall_score(y_train_5 , y_train_pred_90)
1064/51: from sklearn.metrics import roc_curve
1064/52: fpr , tpr , thresholds = roc_curve(y_train_5 , y_scores)
1064/53: plt.plot(fpr , tpr)
1064/54: from sklearn.metrics import roc_auc_score
1064/55: roc_auc_score(y_train_5 , y_scores)
1064/56: from sklearn.ensemble import RandomForestClassifier
1064/57: forest_clf = RandomForestClassifier(random_state=42)
1065/1:
import pandas as pd
import numpy as np
from sklearn.datasets import fetch_openml
1065/2: from sklearn.datasets import fetch_openml
1065/3:
from sklearn.datasets import fetch_openml
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_predict
1065/4:
from sklearn.datasets import fetch_openml
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import confustion_matrix , precision_score , recall_score
1065/5:
from sklearn.datasets import fetch_openml
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import confusion_matrix , precision_score , recall_score
1065/6:
from sklearn.datasets import fetch_openml
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import \
                    confusion_matrix , \
                    precision_score , \
                    recall_score
1065/7:
from sklearn.datasets import fetch_openml
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import \
                    confusion_matrix , \
                    precision_score , \
                    recall_score , \
                    f1_score , \
                    precision_recall_curve , \
                    roc_curve , \
                    roc_auc_score
1065/8: mnist = fetch_openml("mnist_784" , version = 1)
1065/9:
X , y = mnist['data'] , mnist['target']
y = y.astype(np.uint8)
1065/10: X_train , X_test , y_train , y_test = X[:60000] , X[60000:] , y[:60000] , y[60000:]
1065/11: some_digit = X.iloc[0]
1065/12: some_digit_image = some_digit.values.reshape(28 , 28)
1065/13:
plt.imshow(some_digit_image , cmap = mpl.cm.binary , interpolation = "nearest")
plt.axis("off")
plt.show()
1065/14:
import pandas as pd
import numpy as np
import mhatplotlib as mpl
import matplotlib.pyplot as plt
1065/15:
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
1065/16:
plt.imshow(some_digit_image , cmap = mpl.cm.binary , interpolation = "nearest")
plt.axis("off")
plt.show()
1065/17: sgd_clf = SGDClassifier(random_state = 42)
1065/18: sgd_clf.fit(X_train , y_train)
1065/19: sgd_clf.predict([some_digit.values])
1065/20: sgd_clf.predict([some_digit])
1065/21: sgd_clf.fit(X_train.values , y_train.values)
1065/22: sgd_clf.predict([some_digit.values])
1065/23: some_digit_scores = sgd_clf.decision_function([some_digit.values])
1065/24: some_digit_scores
1065/25: some_digit_scores
1065/26: sgd_clf.classes_
1065/27:
from sklearn.datasets import fetch_openml
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import \
                    confusion_matrix , \
                    precision_score , \
                    recall_score , \
                    f1_score , \
                    precision_recall_curve , \
                    roc_curve , \
                    roc_auc_score
from sklearn.multiclass import OneVsOneClassifier
1065/28: ovo_clf = OneVsOneClassifier(SGDClassifier(random_state = 42))
1065/29: ovo_clf.fit(X_train.values , y_train.values)
1065/30: ovo_clf.predict([some_digit.values])
1065/31:
from sklearn.datasets import fetch_openml
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import \
                    confusion_matrix , \
                    precision_score , \
                    recall_score , \
                    f1_score , \
                    precision_recall_curve , \
                    roc_curve , \
                    roc_auc_score
from sklearn.multiclass import OneVsOneClassifier
from sklearn.ensemble import RandomForestClassifier
1065/32:
from sklearn.datasets import fetch_openml
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import \
                    confusion_matrix , \
                    precision_score , \
                    recall_score , \
                    f1_score , \
                    precision_recall_curve , \
                    roc_curve , \
                    roc_auc_score
from sklearn.multiclass import OneVsOneClassifier
1065/33:
from sklearn.datasets import fetch_openml
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import \
                    confusion_matrix , \
                    precision_score , \
                    recall_score , \
                    f1_score , \
                    precision_recall_curve , \
                    roc_curve , \
                    roc_auc_score
from sklearn.multiclass import OneVsOneClassifier
from sklearn.ensemble import RandomForestClassifier
1065/34:
from sklearn.datasets import fetch_openml
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import \
                    confusion_matrix , \
                    precision_score , \
                    recall_score , \
                    f1_score , \
                    precision_recall_curve , \
                    roc_curve , \
                    roc_auc_score
from sklearn.multiclass import OneVsOneClassifier
1065/35:
from sklearn.datasets import fetch_openml
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import \
                    confusion_matrix , \
                    precision_score , \
                    recall_score , \
                    f1_score , \
                    precision_recall_curve , \
                    roc_curve , \
                    roc_auc_score
from sklearn.multiclass import OneVsOneClassifier
1065/36:
from sklearn.datasets import fetch_openml
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import \
                    confusion_matrix , \
                    precision_score , \
                    recall_score , \
                    f1_score , \
                    precision_recall_curve , \
                    roc_curve , \
                    roc_auc_score
from sklearn.multiclass import OneVsOneClassifier
from sklearn.ensemble import RandomForestClassifier
1065/37: forest_clf = RandomForestClassifier(random_state = 42)
1065/38: forest_clf.fit(X_train.values , y_train.values)
1065/39: forest_clf.predict([some_digit.values])
1065/40: forest_clf.predict_proba([some_digit])
1065/41: forest_clf.predict_proba([some_digit.values])
1065/42:
from sklearn.datasets import fetch_openml
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_predict , cross_val_score
from sklearn.metrics import \
                    confusion_matrix , \
                    precision_score , \
                    recall_score , \
                    f1_score , \
                    precision_recall_curve , \
                    roc_curve , \
                    roc_auc_score
from sklearn.multiclass import OneVsOneClassifier
from sklearn.ensemble import RandomForestClassifier
1065/43: cross_val_score(forest_clf , X_train.values , y_train.values , cv = 3 , scoring = "accuracy")
1065/44:
from sklearn.datasets import fetch_openml
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_predict , cross_val_score
from sklearn.metrics import \
                    confusion_matrix , \
                    precision_score , \
                    recall_score , \
                    f1_score , \
                    precision_recall_curve , \
                    roc_curve , \
                    roc_auc_score
from sklearn.multiclass import OneVsOneClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
1065/45: scaler = StandardScaler()
1065/46: X_train
1065/47: X_train.astype(np.float64)
1065/48: X_train
1065/49:
X , y = mnist['data'] , mnist['target']
y = y.astype(np.uint8)
1065/50: X_train , X_test , y_train , y_test = X[:60000] , X[60000:] , y[:60000] , y[60000:]
1065/51: X_train
1065/52: X
1065/53: X_train_scaled = scaler.fit_transform(X_train.astype(np.float64))
1065/54: X_train_scaled = scaler.fit_transform(X_train.astype(np.float64))
1065/55: X_train_scaled
1065/56: cross_val_score(forest_clf , X_train_scaled , y_train.values , cv = 3 , scoring = "accuracy")
1065/57: cross_val_score(forest_clf , X_train_scaled , y_train.values , cv = 3 , scoring = "accuracy")
1065/58: y_train_pred = cross_val_pred(sgd_clf , X_train_scaled , y_train.values , cv = 3)
1065/59: y_train_pred = cross_val_predict(sgd_clf , X_train_scaled , y_train.values , cv = 3)
1065/60: conf_mx = confusion_matrix_matrix(y_train.values , y_train_pred)
1065/61: conf_mx = confusion_matrix(y_train.values , y_train_pred)
1065/62: plt.matshow(conf_mx , cmap = plt.cm.gray)
1065/63: row_sums = conf_mx.sum(axis = 1 , keepdims = True)
1065/64: row_sums
1065/65: conf_mx
1065/66: conf_mx[0 , :]
1065/67: conf_mx[0 , :].total()
1065/68: np.sum(conf_mx[0 , :])
1065/69:
row_sums = conf_mx.sum(axis = 1 , keepdims = True)
norm_conf_mx = conf_mx / row_sums
1065/70: np.fill_diagonal(norm_conf_mx , 0)
1065/71: plt.matshow(conf_mx , cmap = plt.cm.gray)
1065/72: plt.matshow(norm_conf_mx, cmap = plt.cm.gray)
1066/1: import base64
1066/2: import requests
1066/3: from PIL import Image
1067/1: import numpy as np
1067/2: ?np.c_
1068/1:
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
1068/2:
from sklearn.datasets import fetch_openml
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_predict , cross_val_score
from sklearn.metrics import \
                    confusion_matrix , \
                    precision_score , \
                    recall_score , \
                    f1_score , \
                    precision_recall_curve , \
                    roc_curve , \
                    roc_auc_score
from sklearn.multiclass import OneVsOneClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
1068/3: mnist = fetch_openml("mnist_784" , version = 1)
1068/4:
X , y = mnist['data'] , mnist['target']
y = y.astype(np.uint8)
1068/5: X_train , X_test , y_train , y_test = X[:60000] , X[60000:] , y[:60000] , y[60000:]
1068/6: some_digit = X.iloc[0]
1068/7: some_digit_image = some_digit.values.reshape(28 , 28)
1068/8:
X_train , X_test , y_train , y_test = X[:60000] , X[60000:] , y[:60000] , y[60000:]
y_train.ravel()
1068/9:
X_train , X_test , y_train , y_test = X[:60000] , X[60000:] , y[:60000] , y[60000:]
?y_train.ravel()
1068/10: X_train , X_test , y_train , y_test = X[:60000] , X[60000:] , y[:60000] , y[60000:]
1069/1: a = "a"
1069/2: b = "a"
1069/3: a == b
1069/4: a is b
1069/5: c = a + ""
1069/6: c
1069/7: c == a
1069/8: c == b
1069/9: c is a
1070/1: x = 5
1070/2: type(x)
1070/3: "to jest ciąg znaków"
1070/4: type("to jest ciąg znaków")
1070/5: "nazywam się " + "Kacper"
1070/6: "nazywam się " + "Kacper"
1070/7: "All work and no play makes Kacper a dull boy. " * 100
1070/8: "All work and no play makes Kacper a dull boy. " * 100
1070/9: "nazywam się " + "Kacper"
1070/10: "All work and no play makes Kacper a dull boy. " * 100
1070/11: type(10)
1070/12: type(10.0)
1070/13: float("123")
1070/14: 1j * 1j
1070/15: myFirstList = [0, 1, 2, 3]
1070/16: type(myFirstList)
1070/17: myFirstList[0]
1070/18: myFirstList[1]
1070/19: myFirstList[2]
1070/20: myFirstList[3]
1070/21: myFirstList[-1]
1070/22: myFirstList[-2]
1070/23: myFirstList[-1]
1070/24: myFirstList[-3]
1070/25: myFirstList[-4]
1070/26: myFirstList
1070/27: myFirstList[1:]
1070/28: myFirstList[1:3]
1070/29: "All work and no play makes Jack a dull boy"[0]
1070/30: type("All work and no play makes Jack a dull boy"[0])
1070/31: "All work and no play makes Jack a dull boy"[3:10]
1070/32: mySecondList = ["0", "1", "2", "3"]
1070/33: myFirstList
1070/34: mySecondList
1070/35: myFistList + mySecondList
1070/36: myFirstList + mySecondList
1070/37: type(myFirstList + mySecondList)
1070/38: (myFirstList + mySecondList)[3]
1070/39: type((myFirstList + mySecondList)[3])
1070/40: type((myFirstList + mySecondList)[10])
1070/41: type((myFirstList + mySecondList)[9])
1070/42: type((myFirstList + mySecondList)[8])
1070/43: type((myFirstList + mySecondList)[7])
1070/44: \(myFirstList + mySecondList)[7]
1070/45: (myFirstList + mySecondList)[7]
1070/46: (myFirstList + mySecondList)[8]
1070/47: (myFirstList + mySecondList)
1070/48: myThirdList = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
1070/49: myThirdList[0:4] + myThirdList[4:]
1070/50: myThirdList[0:4]
1070/51: myThirdList[4:]
1070/52: range(0 , 4)
1070/53: list(range(0, 4))
1070/54: list(range(0, 4)) + list(range(4 , 10))
1070/55: [0, 1, 2]
1070/56: (0, 1, 2)
1070/57: a = [0, 1, 2]
1070/58: id(a)
1070/59: a.append(3)
1070/60: a
1070/61: id(a)
1070/62: a = (0 , 1 , 2)
1070/63: "abc" + "def"
1070/64: pierwszyString = "abc"
1070/65: drugiString = "def"
1070/66: trzeciString = pierwszyString + drugiString
1070/67: trzeciString
1070/68: pierwszyString
1070/69: drugiString
1070/70: id(pierwszyString)
1070/71: id(drugiString)
1070/72: if(trzeciString)
1070/73: id(trzeciString)
1070/74: "123".replace("2", "G")
1070/75: x = "123"
1070/76: y = x.replace("2", "G")
1070/77: y
1070/78: x
1070/79: myFirstDictionary = {"Kraków": 900000, "Warszawa": 2000000}
1070/80: myFirstDictionary["Kraków"]
1070/81: myFirstDictionary["Warszawa"]
1070/82: myFirstDictionary.keys()
1070/83: myFirstDictionary = {"Kraków": 900000, "Warszawa": 2000000}
1070/84: myFirstDictionary.update({"Osieczna": 3000})
1070/85: myFirstDictionary
1070/86:
for el in myFirstDictionary:
    print(el)
1070/87: myThirdList
1070/88:
for el in myThirdList:
    print(el)
1070/89:
for el in "All work and no play makes Jack a dull boy.":
    print(el)
1071/1: from sklearn.datasets import load_iris
1071/2: from sklearn.tree import DecisionTreeClassifier
1071/3: iris = load_iris()
1071/4: iris
1071/5: iris['data']
1071/6: iris['data'][: , 2:]
1071/7: iris["data"]
1071/8: iris["data"][:, 2:]
1071/9: X = iris["data"][:, 2:]
1071/10: data["target"]
1071/11: iris
1071/12: type(iris)
1071/13: iris['target']
1071/14: iris.target
1071/15: y = iris['target']
1071/16: tree_clf = DecisionTreeClassifier(max_depth=2)
1071/17: tree_clf.fit(X , y)
1071/18: from sklearn.tree import export_graphviz
1071/19:
export_graphviz(
    tree_clf,
    out_file="iris_tree.dot",
    feature_names=iris.feature_names[2:],
    class_names=iris.target_names,
    rounded=True,
    filled=True,
)
1072/1: from sklearn.mixture import GaussianMixture
1074/1: import numpy as np
1074/2: np.arrange(12)
1074/3: np.arange(12)
1074/4: np.arange(4 * 5 * 3)
1074/5: np.arange(4 * 5 * 3).reshape((4, 5, 3))
1074/6: arr = np.arange(4 * 5 * 3).reshape((4, 5, 3))
1074/7: ind = np.array([[0 , 0],[1 , 4],[3 , 4]])
1074/8: ind
1074/9: np.take(arr , ind)
1074/10: arr[ind]
1074/11: arr[ind , :]
1074/12: np.take(arr, ind)
1074/13: np.take(arr, ind , axis = 2)
1074/14: np.take(arr, ind , axis = 0)
1074/15: arr
1074/16: arr[0]
1074/17: arr[[0 , 0 , 0]]
1074/18: arr[[0, 0, 0]] == arr
1074/19: arr
1075/1: import numpy as np
1075/2: arr = np.array([0, 1, 2, 3])
1075/3: np.where(arr > 1)
1075/4: arr = np.array([3 , 2 , 1 , 0])
1075/5: np.where(arr > 1)
1075/6: np.argwhere(arr > 1)
1075/7: arr = np.array([0, 1, 2, 3])
1075/8: np.argwhere(arr > 1)
1076/1: arr = np.array([0, 1, 2, 3])
1076/2: import numpy as np
1076/3: arr = np.array([0, 1, 2, 3])
1076/4: np.where(arr > 1)[0]
1076/5: ind = np.where(arr > 1)[0]
1076/6: arr[ind]
1076/7: ind = np.where(arr = 1)[0]
1076/8: ind = np.where(arr == 1)[0]
1076/9: arr[ind]
1077/1: import os
1077/2: os.getcwd()
1078/1: "123".zfill(10)
1079/1: import svgpathtools
1079/2: svgpathtools.CubicBezier(300+100j, 100+100j, 200+200j, 200+300j)
1080/1: " asda ".strip()
1081/1: " 123 123 321 ".split()
1082/1: import os
1082/2: os.listdir("./nasdaq")
1082/3: [d for d in os.listdir("./nasdaq")]
1082/4: import os
1082/5: [d for d in os.listdir("./nasdaq")]
1082/6: [d for d in os.listdir("./nasdaq") if os.path.isdir(d)]
1082/7: [d for d in os.listdir("./nasdaq") if os.path.isdir(os.path.join("./nasdaq", d))]
1082/8: [d for d in os.listdir("./nasdaq") if os.path.isdir(os.path.join("./nasdaq", d))]
1083/1: [0, 1, 2, 3].sort(reverse=True, key=lambda x: x)
1083/2: a = [0 , 1 , 2 , 3]
1083/3: a.sort(reverse=True, key=lambda x: x)
1083/4: a
1083/5: a.sort(key=lambda x: x)
1083/6: a.sort(reverse=True, key=lambda x: x)
1083/7: [0, 1, 2, 3].sort(reverse=True, key=lambda x: x)
1084/1: [][-1]
1085/1: [1] + [2]
1086/1: import json
1086/2: json_file = None
1086/3:
with open("WIKI_AAPL.json", "r") as f:
    json_file = f.read()
1086/4: json_parsed = json.loads(json_file)
1086/5: json_parsed
1086/6: json_parsed[0]
1086/7: cat WIKI_AAPL.json
1086/8: ls
1086/9: json_parsed["dataset"]
1086/10: json_parsed["data"]
1086/11: json_parsed["dataset"]
1086/12: json_parsed["dataset"]["data"]
1087/1: from datetime import date
1087/2: ?date.strftime
1087/3: date.fromisoformat("2022-10-10")
1088/1: from datetime import date
1088/2: date.exit
1089/1: import json
1089/2: json_file = None
1089/3:
with open("WIKI_AAPL.json", "r") as f:
    json_file = f.read()
1089/4:
with open("nasdaq_WIKI_AAPL.json", "r") as f:
    json_file = f.read()
1089/5: json_parsed = json.loads(json_file)
1089/6: json_parsed["dataset"]["data"]
1089/7: json_parsed["dataset"]["data"][0]
1089/8: json_parsed["dataset"]["columns"]
1090/1: import numpy as np
1090/2: arr = np.load("nasdaq_WIKI_AAPL.npy")
1090/3: arr
1090/4: arr[: , 0]
1090/5: arr[: , 0].astype(np.int)
1090/6: arr[: , 0].astype(np.int32)
1091/1: import prepare_data
1091/2: import prepare_data
1091/3: arrays = prepare_data.fetch_data("./1_nasdaq_10/")
1091/4: arrays
1091/5: arr = arrays[0]
1091/6: arr = arrays[0][: , 0]
1091/7: from datetime import date
1092/1: import prepare_data
1092/2: from datetime import date
1092/3: import numpy as np
1092/4: start = date.fromisoformat("1950-01-01")
1092/5: arrays = prepare_data.fetch_data("./1_nasdaq_10/")
1092/6: arr = arrays[0][:, 0]
1092/7: arr
1092/8:
def to_date(i):
    return start + i
1092/9: to_date(123)
1092/10: from datetime import timedelta
1092/11: ls
1092/12:
def to_date(i):
    return start + timedelta(days=i)
1092/13: to_date(123)
1092/14: to_date(1223)
1092/15: to_date(122333)
1092/16: v_to_date = np.vectorize(to_date)
1092/17:
def to_date(i):
    return start + timedelta(days=int(i))
1092/18: v_to_date = np.vectorize(to_date)
1092/19: v_to_date(arrays[0][:, 0])
1092/20:
def to_date(i):
    return (start + timedelta(days=int(i))).weekday()
1092/21: v_to_date = np.vectorize(to_date)
1092/22: v_to_date(arrays[0][:, 0])
1092/23: v_to_date(arrays[0][:, 0])[1:20]
1092/24: from datetime import date
1092/25: date(2022, 1, 1)
1093/1: import numpy as np
1093/2: import prepare_data
1093/3:
def get_consecutive(data):
    return np.split(data, np.where(np.diff(data) != 1) + 1)
1093/4: get_consecutive(np.array([0 , 1 , 2 , 3 , 10 , 15 , 16 , 17]))
1093/5: data = np.array([0 , 1 , 2 , 3 , 10 , 15 , 16 , 17])
1093/6: np.diff(data)
1093/7: np.diff(data) != 1
1093/8: np.where(np.diff(data) != 1)
1093/9: np.where(np.diff(data) != 1) + 1
1093/10: np.where(np.diff(data) != 1)
1093/11: np.where(np.diff(data) != 1)[0]
1093/12: np.where(np.diff(data) != 1)[0] + 1
1093/13: np.split(data, np.where(np.diff(data) != 1)[0] + 1)
1094/1: %load_ext autoreload
1094/2: %autoreload 2
1094/3: import prepare_data
1094/4: import numpy as np
1094/5: arrays = prepare_data.fetch_data("./1_nasdaq_10/")
1094/6: arr = arrays[0]
1094/7: arr
1094/8: consecutive = prepare_data.find_consecutive(arr)
1094/9: consecutive
1094/10: len(consecutive)
1094/11: consecutive[0]
1094/12: consecutive[1]
1094/13: consecutive[2]
1094/14: consecutive[3]
1094/15: arr = arrays[0]
1094/16: consecutive = prepare_data.find_consecutive(arr[0])
1094/17: consecutive
1094/18: arrays[0]
1094/19: arrays[0][: , 0]
1094/20: arr = arrays[0][: , 0]
1094/21: consecutive = prepare_data.find_consecutive(arr)
1094/22: consecutive
1094/23: consecutive = prepare_data.find_consecutive(arr.astype(np.int32))
1094/24: consecutive
1094/25: np.split(arr, np.where(np.diff(arr) != 1)[0] + 1)
1094/26: arr
1094/27: arr.flatten()
1094/28: np.split(arr.flatten(), np.where(np.diff(arr.flatten()) != 1)[0] + 1)
1094/29: data = np.array([0, 1, 2, 3, 10, 15, 16, 17])
1094/30: np.split(data, np.where(np.diff(data) != 1)[0] + 1)
1094/31: arr = arrays[0][0:10, 0]
1094/32: arr
1094/33: arr = arrays[0][0:10, 0].astype(np.int32)
1094/34: arrays = prepare_data.fetch_data("./1_nasdaq_10/")
1094/35: arr = arrays[0]
1094/36: prepare_data.find_consecutive(arr)
1094/37: consecutive = prepare_data.find_consecutive(arr)
1094/38: len(consecutive)
1094/39: consecutive[0]
1094/40: consecutive[0][: , 0]
1094/41: consecutive[1][: , 0]
1094/42: consecutive[2][: , 0]
1094/43: consecutive[3][: , 0]
1094/44: consecutive[4][: , 0]
1094/45: arr = arrays[0]
1094/46: arr
1094/47: import prepare_data
1094/48: arrays = prepare_data.fetch_data("./1_nasdaq_10/")
1094/49: arr = arrays[0]
1094/50: prepare_data.find_consecutive(arr)
1094/51: consecutive = prepare_data.find_consecutive(arr)
1094/52: consecutive[0]
1094/53: consecutive[0][: , 0]
1094/54: consecutive[1][: , 0]
1094/55: consecutive[2][: , 0]
1094/56: weeks = prepare_data.find_weeks(arr)
1094/57: len(weeks)
1094/58: list(weeks)
1094/59: len(list(weeks))
1094/60: weeks = prepare_data.find_weeks(arr)
1094/61: weeks
1094/62: len(weeks)
1094/63: weeks[0]
1094/64: weeks[0]
1094/65: weeks = prepare_data.find_weeks(arr)
1094/66: weeks = prepare_data.find_weeks(arr)
1094/67: weeks = prepare_data.find_weeks(arr)
1094/68: import prepare_data
1094/69: weeks = prepare_data.find_weeks(arr)
1094/70: weeks = prepare_data.find_weeks(arr)
1094/71: import prepare_data
1094/72: weeks = prepare_data.find_weeks(arr)
1094/73: weeks = prepare_data.find_weeks(arr)
1094/74: weeks = prepare_data.find_weeks(arr)
1094/75: weeks = prepare_data.find_weeks(arr)
1094/76: weeks = prepare_data.find_weeks(arr)
1094/77: weeks = prepare_data.find_weeks(arr)
1094/78: weeks = prepare_data.find_weeks(arr)
1094/79: weeks = prepare_data.find_weeks(arr)
1094/80: weeks = prepare_data.find_weeks(arr)
1094/81: weeks
1094/82: weeks[1][: , 0]
1094/83: len(weeks)
1094/84: weeks = prepare_data.find_weeks(arrays[0])
1094/85: len(weeks)
1094/86: weeks = prepare_data.find_weeks(arrays[1])
1094/87: len(weeks)
1094/88: weeks = prepare_data.find_weeks(arrays[2])
1095/1: import numpy as np
1095/2: arr = np.array([0, 1, 2, 3])
1095/3: arr[0:1]
1097/1: import numpy as np
1097/2: np.load("X_v1.npy")
1097/3: arr = np.load("X_v1.npy")
1097/4: arr[1, :]
1098/1: import numpy as np
1098/2: X = np.load("X_v1.npy")
1098/3: cd 1_nasdaq_10/
1098/4: X = np.load("X_v1.npy")
1098/5: y = np.load("y_v1.npy")
1098/6: X[-1]
1098/7: :q
1099/1: import tensorflow as tf
1099/2: from tensorflow import keras
1099/3: tf.__version__
1099/4: keras.__version__
1099/5: fashion_minst = keras.datasets.fashion_mnist
1099/6: (X_train_full, y_train_full), (X_test, y_test) = fashion_minst.load_data()
1099/7: X_train_full
1099/8: type(X_train_full)
1099/9: import numpy as np
1099/10: type(X_train_full)
1099/11: X_train_full.shape
1099/12: X_train_full.dtype
1099/13: X_valid, X_train = X_train_full[:5000] / 255.0, X_train[5000:] / 255.0
1099/14: X_valid, X_train = X_train_full[:5000] / 255.0, X_train_full[5000:] / 255.0
1099/15: (X_train_full, y_train_full), (X_test, y_test) = fashion_minst.load_data()
1099/16: X_valid, X_train = X_train_full[:5000] / 255.0, X_train_full[5000:] / 255.0
1099/17: X_valid
1099/18: X_train
1099/19: y_train_full
1099/20: y_valid, y_train = y_train_full[:5000], y_train_full[5000:]
1099/21: y_train[0]
1099/22: y_train[1]
1099/23:
class_names = [
    "T-shirt/top",
    "Trouser",
    "Pullover",
    "Dress",
    "Coat",
    "Sandal",
    "Shirt",
    "Sneaker",
    "Bag",
    "Ankle boot",
]
1099/24: import matplotlib.pyplot as plt
1099/25: X_train[0]
1099/26: pyplot.imshow(X_train[0])
1099/27: plt.imshow(X_train[0] , cmap = mpl.cm.binary , interpolation = "nearest")
1099/28: plt.imshow(X_train[0])
1099/29: plt.show()
1099/30: plt.imshow(X_train[10])
1099/31: plt.show()
1099/32: model = keras.models.Sequential()
1099/33: model.add(keras.layers.Flatten(input_shape=[28, 28]))
1099/34: model.add(keras.layers.Dense(300, activation="relu"))
1099/35: model.add(keras.layers.Dense(100, activation="relu"))
1099/36: model.add(keras.layers.Dense(10, activation="softmax"))
1099/37: import matplotlib as mpl
1099/38: plt.imshow(X_train[0], cmap=mpl.cm.binary, interpolation="nearest")
1099/39: plt.show()
1099/40: plt.imshow(X_train[10], cmap=mpl.cm.binary, interpolation="nearest")
1099/41: plt.show()
1099/42: plt.imshow(X_train[11], cmap=mpl.cm.binary, interpolation="nearest")
1099/43: plt.show()
1099/44: model
1099/45: model.history
1099/46: model.layers
1099/47: ?model
1099/48: model.summary()
1099/49: 784 * 300
1099/50: 784 * 300 + 784
1099/51: 785 * 300
1099/52: model.layers
1099/53: modle.layers[1].name
1099/54: model.layers[1].name
1099/55: model.layers[0].name
1099/56: model.layers[1].name
1099/57: model.layers[2].name
1099/58: model.layers[3].name
1099/59: model.layers[2].get_weights(0)
1099/60: model.layers[2].get_weights()
1099/61: ?model.layers[2].get_weights()
1099/62: ?model.layers[2].get_weights
1099/63: model.layers[2].get_weights()
1099/64: model.layers[2].get_weights()[0]
1099/65: model.layers[2].get_weights()[0].shape
1099/66: model.layers[1].get_weights()[0].shape
1099/67: model.layers[1].get_weights()[1].shape
1099/68:
model.compile(
    loss="sparse_categorical_crossentropy", optimizer="sgd", metrics=["accuracy"]
)
1099/69: model.summary()
1099/70: history = model.fit(X_train, y_train, epochs=30, validation_data=(X_valid, y_valid))
1099/71: history = model.fit(X_train, y_train, epochs=50, validation_data=(X_valid, y_valid))
1099/72: model = keras.models.Sequential()
1099/73: model.add(keras.layers.Flatten(input_shape=[28, 28]))
1099/74: model.add(keras.layers.Dense(300, activation="relu"))
1099/75: model.add(keras.layers.Dense(100, activation="relu"))
1099/76: model.add(keras.layers.Dense(10, activation="softmax"))
1099/77: model.summary()
1099/78:
model.compile(
    loss="sparse_categorical_crossentropy", optimizer="sgd", metrics=["accuracy"]
)
1099/79: history = model.fit(X_train, y_train, epochs=50, validation_data=(X_valid, y_valid))
1099/80: history.history
1099/81: import pandas as pd
1099/82: pd.DataFrame(history.history).plot(figsize=(8, 5))
1099/83: plt.grid(True)
1099/84: ?plt.gca
1099/85: plt.gca().set_ylim(0, 1)
1099/86: plt.show()
1099/87: history = model.fit(X_train, y_train, epochs=50, validation_data=(X_valid, y_valid))
1099/88: model.evaluate(X_test, y_test)
1099/89: ?model.evaluate
1099/90: model.summary()
1099/91: X_new = X_test[:3]
1099/92: y_proba = model.predict(X_new)
1099/93: y_proba
1099/94: y_proba.round(2)
1099/95: y_pred = model.predict_classes(X_new)
1099/96:
model = keras.models.Sequential(
    [
        keras.layers.Flatten(input_shape=[28, 28]),
        keras.layers.Dense(300, activation="relu"),
        keras.layers.Dense(100, activation="relu"),
        keras.layers.Dense(10, activation="softmax"),
    ]
)
1099/97:
model.compile(
    loss="sparse_categorical_crossentropy", optimizer="sgd", metrics=["accuracy"]
)
1099/98: model.summary()
1099/99: history = model.fit(X_train, y_train, epochs=50, validation_data=(X_valid, y_valid))
1099/100: X_train_full
1099/101: X_test
1099/102: X_test_s = X_test / 255.0
1099/103: X_test_s
1099/104: y_test
1099/105: model.evaluate(X_test_s, y_test)
1099/106: model.predict(X_test_s[:3])
1099/107: model.predict(X_test_s[:3])
1099/108: model.predict(X_test_s[:3]).round(2)
1099/109: model.predict_classes(X_test_s[:3])
1099/110: model.predict(X_test_s[:3]).argmax()
1099/111: model.predict(X_test_s[:3])
1099/112: np.argmax(model.predict(X_test_s[:3]))
1099/113: np.argmax(model.predict(X_test_s[:3]) , axis = 1)
1099/114: classes = np.argmax(model.predict(X_test_s[:3]) , axis = 1)
1099/115: np.array(class_names)[classes]
1099/116: y_test[:3]
1099/117: plt.imshow(X_test_s[0], cmap=mpl.cm.binary, interpolation="nearest")
1099/118: plt.show()
1099/119: plt.imshow(X_test_s[1], cmap=mpl.cm.binary, interpolation="nearest")
1099/120: plt.show()
1099/121: plt.imshow(X_test_s[2], cmap=mpl.cm.binary, interpolation="nearest")
1099/122: plt.show()
1100/1: from sklearn.datasets import fetch_california_housing
1100/2: from sklearn.model_selection import train_test_split
1100/3: from sklearn.processing import StandardScaler
1100/4: from sklearn.preprocessing import StandardScaler
1100/5: housing = fetch_california - housing()
1100/6: housing = fetch_california_housing()
1100/7: housing
1100/8: type(housing)
1100/9: X_train_fill , X_test , y_train_full , y_test = train_test_split(housing.data , housing.target)
1100/10: X_train_full , X_test , y_train_full , y_test = train_test_split(housing.data , housing.target)
1100/11: X_train_full
1100/12: type(X_train_full)
1100/13: X_train_fill.dtype
1100/14: X_train , X_valid , y_train , y_valid = train_test_split(X_train_full , y_train_full)
1100/15: ?train_test_split
1100/16: scaler = StandardScaler()
1100/17: ?StandardScaler
1100/18: X_train_scaled = scaler.fit_transform(X_train)
1100/19: X_valid_scaled = scaler.fit_transform(X_valid)
1100/20: X_test_scaled = scaler.fit_transform(X_test)
1100/21: ?StandardScaler
1100/22: from tensorflow import keras
1100/23:
model = keras.models.Sequential(
    [
        keras.layers.Dense(30, activation="relu", input_shape=X_train.shape[1:]),
        keras.layers.Dense(1),
    ]
)
1100/24: model.summary)(
1100/25: model.summary()
1100/26: model.compile(loss="mean_squared_error", optimizer="sgd")
1100/27:
history = model.fit(
    X_train_scaled, y_train, epochs=20, validation_data=(X_valid_scaled, y_valid)
)
1100/28:
history = model.fit(
    X_train_scaled, y_train, epochs=20, validation_data=(X_valid_scaled, y_valid)
)
1100/29: mse = model.evaluate(X_train_scaled , y_train)
1100/30: X_new = X_test_scaled[:3]
1100/31: X_new
1100/32: y_pred = model.predict(X_new)
1100/33: y_pred
1100/34: y_test[:3]
1101/1: import matplotlib.pyplot as plt
1101/2: from tensorflow import keras
1101/3: from sklearn.datasets import fetch_california_housing
1101/4: housing = fetch_california_housing()
1101/5:
X_train_fill, X_test, y_train_full, y_test = train_test_split(
    housing.data, housing.target
)
1101/6: from sklearn.model_selection import train_test_split
1101/7:
X_train_fill, X_test, y_train_full, y_test = train_test_split(
    housing.data, housing.target
)
1101/8:
X_train_full, X_test, y_train_full, y_test = train_test_split(
    housing.data, housing.target
)
1101/9: X_train, X_valid, y_train, y_valid = train_test_split(X_train_full, y_train_full)
1101/10: from sklearn.preprocessing import StandardScaler
1101/11: X_train_scaled = scaler.fit_transform(X_train)
1101/12: scaler = StandardScaler()
1101/13: X_train_scaled = scaler.fit_transform(X_train)
1101/14: X_valid_scaled = scaler.fit_transform(X_valid)
1101/15: X_test_scaled = scaler.fit_transform(X_test)
1101/16: X_train_scaled.shape
1101/17: X_train_scaled.shape[1:]
1101/18: input = keras.layers.Input(shape=X_train_scaled.shape[1:])
1101/19: hidden1 = keras.layers.Dense(30, activation="relu")(input)
1101/20: hidden2 = keras.layers.Dense(30, activation="relu")(hidden1)
1101/21: concat = keras.layers.Concatenate([input , hidden2])
1101/22: output = keras.layers.Dense(1)(concat)
1101/23: type(concat)
1101/24: type(hidden1)
1101/25: type(input)
1101/26: concat = keras.layers.Concatenate()
1101/27: concat = keras.layers.Concatenate([input , hidden2])
1101/28: concat
1101/29: type(concat)
1101/30: concat = keras.layers.concatenate([input , hidden2])
1101/31: type(concat)
1101/32: output = keras.layers.Dense(1)(concat)
1101/33: model = keras.models.Model(inputs=[input], outputs=[output])
1101/34: model.summary()
1101/35: input_A = keras.layers.Input(shape=[5])
1101/36: input_B = keras.layers.Input(shape=[6])
1101/37: hidden1 = keras.layers.Dense(30, activation="relu")(inputB)
1101/38: hidden1 = keras.layers.Dense(30, activation="relu")(input_B)
1101/39: hidden2 = keras.layers.Dense(30, activation="relu")(hidden_1)
1101/40: hidden2 = keras.layers.Dense(30, activation="relu")(hidden1)
1101/41: concat = keras.layers.concatenate([input_A, hidden2])
1101/42: output = keras.layers.Dense(1)(concat)
1101/43: model = keras.models.Model(inputs=[input_A, input_B], outputs=[output])
1101/44: model.summary()
1101/45: model.compile(loss="mse", optimizer="sgd")
1101/46: X_train_A, X_train_B = X_train_scaled[:, :5], X_train_scaled[:, 2:]
1101/47: X_train_A.shape
1101/48: X_train_B.shape
1101/49: X_valid_A, X_valid_B = X_valid_scaled[:, :5], X_valid_scaled[:, 2:]
1101/50: X_test_A, X_test_B = X_test_scaled[:, :5], X_test_scaled[:, 2:]
1101/51: X_new_A , X_new_B = X_test_A[:3] , X_test_B[:3]
1101/52: y_train
1101/53:
history = model.fit(
    (X_train_A, X_train_B),
    y_train,
    epochs=20,
    validation_data=((X_valid_A, X_valid_B), y_test),
)
1101/54: X_train_A.shape
1101/55: X_train_B.shape
1101/56: y_train.shape
1101/57: X_valid_A.shape
1101/58: X_valid_B.shape
1101/59: y_valid.shape
1101/60:
history = model.fit(
    (X_train_A, X_train_B),
    y_train,
    epochs=20,
    validation_data=((X_valid_A, X_valid_B), y_valid),
)
1101/61:
history = model.fit(
    (X_train_A, X_train_B),
    y_train,
    epochs=20,
    validation_data=((X_valid_A, X_valid_B), y_valid),
)
1101/62: model.compile(loss="mse", optimizer="sgd", metrics=["accuracy"])
1101/63:
history = model.fit(
    (X_train_A, X_train_B),
    y_train,
    epochs=40,
    validation_data=((X_valid_A, X_valid_B), y_valid),
)
1101/64: model.compile(loss="mse", optimizer="sgd", metrics=["MeanSquaredError"])
1101/65:
history = model.fit(
    (X_train_A, X_train_B),
    y_train,
    epochs=40,
    validation_data=((X_valid_A, X_valid_B), y_valid),
)
1101/66: model.evaluate(X_test_scaled, y_test)
1101/67: model.evaluate((X_test_A , X_test_B) , y_test)
1103/1: import tensorflow as tf
1103/2: tf.constant([[1.0 , 2.0 , 3.0],[4.0 , 5.0 , 6.0],[7.0 , 8.0 , 9.0]])
1103/3: tf.constant(42)
1103/4: t = tf.constant([[1.0 , 2.0 , 3.0],[4.0 , 5.0 , 6.0]])
1103/5: t
1103/6: t[: , 1:]
1104/1: import numpy as np
1104/2: m = np.array([[1. , 2.] , [3. , 4.]])
1104/3: m
1104/4: m.dtype
1104/5: m[: , :] = np.array([11.0 , 12.0])
1104/6: m
1104/7: ?np.zeros
1104/8: ?np.zeros
1104/9: np.zeros((4 , 4 , 4))
1104/10: myFancyArray = np.zeros((4 , 4 , 4))
1104/11: myFancyArray
1104/12: myFancyArrayp[2 , 2 , :] = np.array([1.0 , 2.0 , 3.0 , 4.0])
1104/13: myFancyArray[2 , 2 , :] = np.array([1.0 , 2.0 , 3.0 , 4.0])
1104/14: myFancyArray
1104/15: myFancyArray = np.zeros((4, 4, 4))
1104/16: myFancyArray[2, 2, :] = np.array([1.0, 2.0, 3.0, 4.0])
1104/17: myFancyArray
1104/18: myFancyArray[2, 2, :]
1104/19: np.rand()
1104/20: myFancyArray = np.rand((4, 4, 4))
1104/21: myFancyArray = np.rand(4, 4, 4)
1104/22: np.random.rand(4 , 4 , 4)
1104/23: np.random.rand(4 , 4)
1104/24: np.random.rand(4 , 4 , 4 , 4)
1104/25: np.random.rand(4 , 4 , 4 , 4 , 4)
1104/26: newArray = np.random.rand(4 , 4 , 4 , 4 , 4)
1104/27: newArray[1 , 2 , 3 , 0 , :]
1104/28: m = np.zeros(4 , 4 , 4 , 4 , 4)
1104/29: m = np.zeros((4 , 4 , 4 , 4 , 4))
1104/30: m
1104/31: m.shape
1104/32: m[1 , 0 , 3 , :]
1104/33: m[1 , 0 , 3 , 2 , :]
1104/34: m
1104/35: np.indeces(m)
1104/36: np.indices(m)
1104/37: np.indices(m.shape)
1104/38: np.indices(2)
1104/39: np.indices((2 , 2))
1104/40: np.indices((2 , 2 , 2))
1104/41: np.indices((2 , 2 , 2))[0 , 1 , 1 , :]
1104/42: np.indices((2 , 3))
1104/43: i , j = np.indices((2 , 3))
1104/44: i
1104/45: j
1105/1: from tensorflow import keras
1105/2: modelA = keras.models.Sequential([])
1105/3: modelA = keras.models.Sequential([])
1105/4:
modelA = keras.models.Sequential(
    [
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
    ]
)
1105/5: modelA.summary()
1105/6:
model = keras.models.Sequential(
    [
        keras.layers.Dense(30, activation="relu", input_shape=X_train.shape[1:]),
        keras.layers.Dense(1),
    ]
)
1105/7: modelA.compile(loss="mse", optimizer="sgd", metrics=["MeanSquaredError"])
1105/8: modelA.summary()
1105/9: modelA.build()
1105/10:
modelA = keras.models.Sequential(
    [
        keras.layers.Dense(
            10, activation="selu", kernel_initializer="lecun_normal", input_shape=100
        ),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
    ]
)
1105/11: ?keras.layers.Dense
1105/12: ?keras.layers.InputLayer
1105/13: ?keras.layers.Input
1105/14:
modelA = keras.models.Sequential(
    [
        keras.layers.Input(shape=(10,)),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
    ]
)
1105/15: modelA.summary()
1105/16: modelA
1105/17: modelA.layers[1]
1105/18: modelA.layers[1].get_weights()
1105/19: modelA.layers[1].get_weights()[1]
1105/20: modelA.layers[1].get_weights()[0]
1105/21: modelA.layers[1].get_weights()[1]
1105/22: modelA.layers[1].get_weights()
1105/23: w , b = modelA.layers[1].get_weights()
1105/24: w.shape
1105/25: b.ahspe
1105/26: b.shape
1106/1: from tensorflow import keras
1106/2:
modelA = keras.models.Sequential(
    [
        keras.layers.Input(shape=(10,)),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
    ]
)
1106/3: ?modelA.evaluate
1106/4: ?modelA.predict
1106/5: modelA.predict(np.array([1.0 , 2.0 , 1.0 , 2.0 , 1.0 , 2.0 , 1.0 , 2.0 , 1.0 , 2.0]))
1106/6: import numpy as np
1106/7: modelA.predict(np.array([1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0]))
1106/8: modelA.compile(loss="mse", optimizer="sgd")
1106/9: modelA.predict(np.array([1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0]))
1106/10: modelA(np.array([1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0]))
1106/11: np.array([1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0])
1106/12:
modelA = keras.models.Sequential(
    [
        keras.layers.Input(shape=(10)),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
    ]
)
1106/13: modelA.summary()
1106/14: modelA(np.array([1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0]))
1106/15:
modelA = keras.models.Sequential(
    [
        keras.layers.Input(shape=(10)),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
    ]
)
1106/16: modelA.summary()
1106/17:
modelA = keras.models.Sequential(
    [
        keras.layers.Input(shape=10),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(10, activation="selu", kernel_initializer="lecun_normal"),
    ]
)
1106/18: modelA.summary()
1106/19: modelA(np.array([[1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0]]))
1106/20: modelA(np.array([[1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0]])).numpy
1106/21: modelA(np.array([[1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0]]))
1106/22: test = modelA(np.array([[1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0]]))
1106/23: test.numpy()
1106/24: test = modelA(np.array([[1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0]])).numpy()
1106/25: batch = np.random.rand(10 , 2)
1106/26: batch
1106/27: batch = np.random.rand(2 , 10)
1106/28: batch
1106/29: modelA(batch)
1106/30: modelA(batch[0:1])
1106/31:
modelA = keras.models.Sequential(
    [
        keras.layers.Input(shape=5),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
    ]
)
1106/32:
modelB = keras.models.Sequential(
    [
        keras.layers.Input(shape=5),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
    ]
)
1106/33: modelA.layers[1].get_weights()
1106/34: modelB.layers[1].get_weights()
1106/35: batch = np.random.rand(2, 10)
1106/36: batch = np.random.rand(100, 5)
1106/37: resultA = modelA(batch)
1106/38: resultA
1106/39: modelB.compile(loss="mse", optimizer="sgd")
1107/1: from tensorflow import keras
1107/2:
modelA = keras.models.Sequential(
    [
        keras.layers.Input(shape=5),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
    ]
)
1107/3:
modelA = keras.models.Sequential(
    [
        keras.layers.Input(shape=5),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
    ]
)
1107/4:
modelB = keras.models.Sequential(
    [
        keras.layers.Input(shape=5),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
    ]
)
1107/5: modelB.compile(loss="mse", optimizer="sgd")
1107/6: x_data = np.random.rand(100, 5)
1107/7: import numpy as np
1107/8: x_data = np.random.rand(100, 5)
1107/9: y_data = modelA(x_data)
1107/10: historyB = modelB.fit(x_data , y_data , epochs=100)
1107/11: modelB.layers[1].get_weights
1107/12: modelB.layers[1].get_weights()
1107/13: modelA.layers[1].get_weights()
1107/14: modelB(x_data[0])
1107/15: modelB(x_data[0 , :])
1107/16: x_data.shape
1107/17: modelB(x_data)
1107/18: modelB(x_data[0:1])
1107/19: modelA(x_data[0:1])
1107/20: historyB = modelB.fit(x_data, y_data, epochs=100)
1107/21: historyB = modelB.fit(x_data, y_data, epochs=100)
1107/22: historyB = modelB.fit(x_data, y_data, epochs=100)
1107/23: historyB = modelB.fit(x_data, y_data, epochs=100)
1107/24: modelB(x_data[0:1])
1107/25: modelA(x_data[0:1])
1107/26: y_data[0:1]
1107/27: import matplotlib.pyplot as plt
1107/28: x_test = np.random.rand(100, 5)
1107/29: y_test = modelA(x_test)
1107/30: ?modelB.evaluate
1107/31: modelB.evaluate(x_test , y_test)
1107/32: modelB(x_data[10:11])
1107/33: modelA(x_data[10:11])
1107/34: historyB
1107/35: ?historyB
1107/36:
modelA = keras.models.Sequential(
    [
        keras.layers.Input(shape=5),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
    ]
)
1107/37:
modelB = keras.models.Sequential(
    [
        keras.layers.Input(shape=5),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
        keras.layers.Dense(5, activation="selu", kernel_initializer="lecun_normal"),
    ]
)
1107/38: x_train = np.random.rand(10000, 5)
1107/39: y_train = modelA(x_train)
1107/40: x_test = np.random.rand(2000, 5)
1107/41: y_test = modelA(x_test)
1107/42: optimizer = keras.optimizers.SGD(learning_rate=0.001 , momentum=0.9)
1107/43: modelB.compile(loss="mse", optimizer=optimizer)
1107/44: modelA.layers[1:]
1107/45: modelA.layers[1].get_weights()
1107/46: modelBWeights = []
1107/47:
def update(w, model):
    return w + list(map(lambda l: l.get_weights(), model.layers[1:]))
1107/48: modelBWeights = update(modelBWeights , modelA)
1107/49: modelBWeights
1107/50: modelBWeights = update(modelBWeights, modelA)
1107/51: modelBWeights
1107/52: modelBWeights[0]
1107/53: modelBWeights[1]
1107/54: modelBWeights[10]
1107/55:
def update(w, model):
    return w + [list(map(lambda l: l.get_weights(), model.layers[1:]))]
1107/56: modelBWeights = []
1107/57: modelBWeights = update(modelBWeights, modelA)
1107/58: modelBWeights = update(modelBWeights, modelA)
1107/59: modelBWeights[0]
1107/60: modelBWeights[1]
1107/61: modelBWeights[2]
1107/62: modelBWeights = []
1107/63:
for i in range(200):
    modelB.fit(x_train, y_train, epochs=1)
    modelBWeights = update(modelBWeights, modelB)
    print(i)
1107/64: x_train.shape
1107/65: len(modelBWeights)
1107/66: modelBWeights[0]
1107/67: modelBWeights[0][1]
1107/68: modelBWeights[2][1]
1107/69: modelBWeights[10][1]
1107/70: modelBWeights[10][1].numpy()
1107/71: modelBWeights[10][1]
1107/72: modelBWeights[10][1][0]
1107/73: modelBWeights[10][1][0] - modelA.layers[1][0]
1107/74: modelBWeights[10][1][0] - modelA.layers[1].get_weights()[0]
1107/75: np.abs(modelBWeights[10][1][0] - modelA.layers[1].get_weights()[0])
1107/76: np.abs(modelBWeights[1][1][0] - modelA.layers[1].get_weights()[0])
1107/77: np.abs(modelBWeights[100][1][0] - modelA.layers[1].get_weights()[0])
1107/78: np.abs(modelBWeights[200][1][0] - modelA.layers[1].get_weights()[0])
1107/79: np.abs(modelBWeights[199][1][0] - modelA.layers[1].get_weights()[0])
1107/80: np.sqrt(modelBWeights[199][1][0] - modelA.layers[1].get_weights()[0])
1107/81: (modelBWeights[199][1][0] - modelA.layers[1].get_weights()[0]) ** 2
1107/82: (modelBWeights[199][1][0] - modelA.layers[1].get_weights()[0]) ** 2
1107/83: (modelBWeights[199][1][0] - modelA.layers[1].get_weights()[0])
1107/84: 0.514 0.514
1107/85: 0.514 * 0.514
1107/86: np.sqrt((modelBWeights[199][1][0] - modelA.layers[1].get_weights()[0]) ** 2)
1107/87: np.sqrt((modelBWeights[1][1][0] - modelA.layers[1].get_weights()[0]) ** 2)
1107/88: np.sqrt((modelBWeights[2][1][0] - modelA.layers[1].get_weights()[0]) ** 2)
1107/89: np.sqrt((modelBWeights[2][3][0] - modelA.layers[3].get_weights()[0]) ** 2)
1107/90: np.sqrt((modelBWeights[100][3][0] - modelA.layers[3].get_weights()[0]) ** 2)
1107/91: plt.matshow(np.sqrt((modelBWeights[100][3][0] - modelA.layers[3].get_weights()[0]) ** 2))
1107/92: plt.show()
1107/93: plt.matshow(np.sqrt((modelBWeights[0][1][0] - modelA.layers[1].get_weights()[0]) ** 2))
1107/94: plt.show()
1108/1: from scipy.optimize import linprog
1108/2: import numpy as np
1108/3: c = [-1, 4]
1108/4: c = [1.0, 10.0]
1108/5: c = [-1.0, -10.0]
1109/1: from pulp import *
1109/2: ?LpProblem
1109/3: prob = LpProblem("Budget" , LpMinimize)
1109/4: prob
1109/5: pd
1109/6: import pandas as pd
1109/7: df = pd.read_excel("/home/kacper/Downloads/diet - medium.xls" , nrows = 17)
1110/1: from pulp import *
1110/2: import numpy as np
1110/3: import pandas as pd
1110/4: df = pd.read_excel("/home/kacper/Downloads/diet - medium.xls", nrows=17)
1110/5: df
1110/6: type(df)
1110/7: ls
1110/8: df['Foods']
1110/9: prob = LpProblem("Budget", LpMinimize)
1110/10: food_items = list(df["Foods"])
1110/11: food_items
1110/12: costs = dict(zip(food_items , df["Price/Serving"]))
1110/13: costs
1110/14: calories = dict(zip(food_items , df["Calories"]))
1110/15: calories
1110/16: fat = dict(zip(food_items , df["Total_Fat (g)"]))
1110/17: fat
1110/18: carbs = dict(zip(food_items, df["Carbohydrates (g)"]))
1110/19: carbs
1110/20: food_vars = LpVariable.dicts("Food", food_items, lowBound=0, cat="Continuous")
1110/21: food_items
1110/22: prob += lpSum([costs[i] * food_vars[i] for i in food_items])
1110/23: prob += lpSum([calories[f] * food_vars[f] for f in food_items]) >= 800.0
1110/24: prob += lpSum([calories[f] * food_vars[f] for f in food_items]) <= 1300.0
1110/25: prob += lpSum([fat[f] * food_vars[f] for f in food_items]) >= 20.0, "FatMinimum"
1110/26: prob += lpSum([fat[f] * food_vars[f] for f in food_items]) <= 50.0, "FatMaximum"
1110/27: prob += lpSum([carbs[f] * food_vars[f] for f in food_items]) >= 130.0, "CarbsMinimum"
1110/28: prob += lpSum([carbs[f] * food_vars[f] for f in food_items]) <= 200.0, "CarbsMaximum"
1110/29: prob += lpSum([fiber[f] * food_vars[f] for f in food_items]) >= 60.0, "FiberMinimum"
1110/30: prob
1110/31: prob.solve()
1111/1: from pulp import *
1111/2: import pandas as pd
1111/3: prob = LpProblem("Budget", LpMinimize)
1111/4: df = pd.read_excel("/home/kacper/Downloads/diet - medium.xls", nrows=17)
1111/5: costs = dict(zip(food_items, df["Price/Serving"]))
1111/6: food_items = list(df["Foods"])
1111/7: costs = dict(zip(food_items, df["Price/Serving"]))
1111/8: calories = dict(zip(food_items, df["Calories"]))
1111/9: fat = dict(zip(food_items, df["Total_Fat (g)"]))
1111/10: food_vars = LpVariable.dicts("Food", food_items, lowBound=0, cat="Continuous")
1111/11: prob += lpSum([costs[i] * food_vars[i] for i in food_items])
1111/12: prob += lpSum([calories[f] * food_vars[f] for f in food_items]) >= 800.0
1111/13: prob += lpSum([calories[f] * food_vars[f] for f in food_items]) <= 1300.0
1111/14: prob.solve()
1111/15: prob
1111/16:
for v in prob.variables():
    if v.varValue > 0:
        print(v.name, " = ", v.varValue)
1112/1: import pulp
1112/2: ?pulp.LpBinary
1112/3: a = pulp.LpVariable("a", lowBound=0, cat=pulp.LpBinary)
1112/4: b = pulp.LpVariable("b", lowBound=0, cat=pulp.LpBinary)
1112/5: problem = pulp.LpProblem("p" , LpMaximize)
1112/6: problem = pulp.LpProblem("p" , pulpLpMaximize)
1112/7: problem = pulp.LpProblem("p" , pulp.LpMaximize)
1112/8: problem += 100 * a + 200 * b, "Objective Function"
1112/9: problem += a + b == 1, "One or the other Constraint"
1112/10: problem
1112/11: problem.status
1112/12: pulp.LpStatus[problem.status]
1112/13: problem.solve()
1112/14: problem
1112/15: a.varValue
1112/16: b.varValue
1112/17: pulp.value(problem.objective)
1112/18: pulp.LpStatus[problem.status]
1113/1: import pandas as pd
1113/2: import pulp
1113/3: a = pulp.LpVariable("a", lowBound=0, cat=pulp.LpBinary)
1113/4: b = pulp.LpVariable("b", lowBound=0, cat=pulp.LpBinary)
1113/5: problem = pulp.LpProblem("p", pulp.LpMaximize)
1113/6: problem += 100 * a + 200 * b, "Objective Function"
1113/7: problem += a + b == 1, "One or the other Constraint"
1113/8: problem.solve()
1114/1: import pulp
1115/1: import tensorflow as tf
1115/2:
def cube(x):
    return x**3
1115/3: tf_cube = tf.function(cube)
1115/4: tf_cube(3)
1115/5: X = tf.range(10)
1115/6: dataset = tf.data.Dataset.from_tensor_slices(X)
1115/7: dataset
1115/8:
for item in dataset:
    print(item)
1115/9: datasetNew = dataset.repeat(3).batch(7, drop_remainder=True)
1115/10:
for item in datasetNew:
    print(item)
1115/11: datasetNewNew = datasetNew.map(lambda x: x * 2)
1115/12:
for item in datasetNewNew:
    print(item)
1116/1: import optimize_budget
1116/2: optimize_budget.df
1117/1: import pandas as pd
1117/2: df = pd.read_excel("temp.ods")
1117/3: df
1117/4: df[0]
1117/5: df
1117/6: df.iloc[0]
1117/7: df.iloc[1]
1117/8: df.iloc[2]
1117/9: df.iloc[3]
1117/10: df.iloc[2]
1117/11: df.head()
1117/12: df.iloc[2].head()
1117/13: df.iloc[2]
1118/1: import pandas as pd
1118/2: df = pd.read_excel("temp.ods")
1118/3: df
1118/4: df["class"]
1118/5: df["v1"]
1118/6: df["v3"]
1118/7: df.iloc[1]
1118/8: df.iloc[1][0]
1118/9: df.iloc[1][1]
1118/10: df.iloc[1][2]
1118/11: df.iloc[1][3]
1118/12: df.iloc[1][1:4]
1118/13: df.size
1118/14: df
1118/15: df.shape
1118/16: import pulp
1119/1: import pandas as pd
1119/2: df = pd.read_excel("temp.ods")
1119/3: df.iloc[0]
1119/4: df.iloc[0].shape
1119/5: df.iloc[0][15]
1119/6: type(df.iloc[0][15])
1119/7: nan
1119/8: import numpy
1119/9: import numpy as np
1119/10: np.nan
1119/11:
for i in range(100):
    if i == 10:
        break
1119/12: i
1119/13: 10 % 3
1119/14: 0 % 3
1119/15: 1 % 3
1119/16: 2 % 3
1119/17: 3 % 3
1119/18: 1 % 3
1119/19: np.nan
1119/20: type(np.nan)
1119/21: isinstance(np.nan, float)
1121/1: import numpy as np
1121/2: ?np.linspace
1121/3: np.linspace(-np.pi , np.pi , 100)
1123/1: import scipy.optimize as so
1123/2: weights = [10.0, 2.0]
1123/3: import numpy as np
1123/4: weights = np.array([10.0, 2.0])
1123/5: variable_type = np.array([1 , 1])
1123/6: so.linprog(weights, integrality=variable_type)
1123/7: so.linprog(weights, integrallity=variable_type)
1123/8: so.linprog(weights, integrality=variable_type)
1123/9: ?so.linprog
1123/10: ?so.milp
1123/11: so.__version__
1123/12: so.__spec__
1124/1: import numpy as np
1124/2: np.random.rand(2 , 2)
1124/3: np.random.rand(2 , 2 , dtype = np.float64)
1124/4: np.random.rand(2, 2)
1124/5: np.random.rand(2, 2).dtype
1124/6: np.random.rand((2,2))
1124/7: a = np.random.rand(2, 2)
1124/8: a.shape
1124/9: np.random.rand(a.shape)
1124/10: ?np.random.rand
1124/11: np.random.rand(*a.shape)
1124/12: np.random.rand(*a.shape)
1124/13: np.random.rand(*a.shape)
1124/14: np.random.rand(*a.shape)
1125/1: mu, sigma = 0.0, 1.0
1125/2: import numpy as np
1125/3: np.random.normal(mu , sigma , 10)
1125/4: np.random.normal(mu, sigma, (2, 2))
1125/5: mu, sigma = 0.0, 0.0
1125/6: np.random.normal(mu, sigma, (2, 2))
1126/1: import tensorflow as tf
1126/2: from tensorflow import keras
1126/3: model = keras.models.Sequential([keras.layers.Dense(1, input_shape=[1])])
1126/4: model
1126/5: model.summary()
1126/6: model.get_layer()
1126/7: model.layers
1126/8: type(model)
1126/9: isinstance(mode, keras.engine.sequential.Sequential)
1126/10: isinstance(model , keras.engine.sequential.Sequential)
1126/11: type(model)
1126/12: ?keras.engine.sequential.Sequential
1126/13: keras.engine.sequential.Sequential
1126/14: model.get_config()
1126/15: config['layers']
1126/16: config = model.get_config()
1126/17: config['layers']
1126/18: config["layers"][0]
1126/19: config["layers"][1]
1126/20: config["layers"][2]
1126/21: [l['a'] for l in [{'b' : 1}, {'a' : 1 , 'b':123}]]
1126/22: [l["a"] for l in [{"b": 1}, {"a": 1, "b": 123}] if ("a" in l)]
1126/23: [l["a"] for l in [{"b": 1}, {"a": 1, "b": 123}] if "a" in l]
1126/24: list(zip([1 , 2] , [3 , 4]))
1126/25: list(zip([1 , 2] , [3 , 4] , [5 , 6]))
1128/1: import tensorflow as tf
1128/2: from tensorflow import keras
1128/3: model = keras.models.Sequential([keras.layers.Dense(1, input_shape=[1])])
1128/4: model.compile(loss="mse", optimizer="sgd", metrics=["MeanSquaredError"])
1128/5: model.summary()
1128/6: history = model.fit([0.1, 0.2], [1.1, 1.2], epochs=1)
1128/7: history
1128/8: history.history
1128/9: history.on_epoch_end()
1128/10: history.params
1129/1: import tensorflow as tf
1129/2: from tensorflow import keras
1129/3: model = keras.models.Sequential([keras.layers.Dense(1, input_shape=[1])])
1129/4: model.su
1129/5: model.summary()
1129/6: a = model.summary()
1129/7: a
1129/8: ?model.summary
1129/9: model.inputs
1130/1: import tensorflow as tf
1130/2: from tensorflow import keras
1130/3: input_A = keras.layers.Input(shape=[5] , name = "input_A")
1130/4: input_B = keras.layers.Input(shape=[6], name="input_B")
1130/5: hidden1 = keras.layers.Dense(30, activation="relu")(input_B)
1130/6: hidden2 = keras.layers.Dense(30, activation="relu")(hidden1)
1130/7: concat = keras.layers.concatenate([input_A, hidden2])
1130/8: output = keras.layers.Dense(1 , name = "output")(concat)
1130/9: model = keras.Model(inputs=[input_A, input_B], outputs=[output])
1130/10: model.summary()
1130/11: config = model.get_config()
1130/12: config
1130/13: config["layers"]
1130/14: config["layers"]
1130/15: [l["config"] for l in config["layers"]]
1130/16: [l.get_weights() for l in model.layers]
1130/17: ?model.get_input_at
1130/18: ?model.get_config()
1130/19: ?model.get_config
1130/20: model.get_config()
1131/1: import tensorflow as tf
1131/2: from tensorflow import keras
1131/3: model = keras.models.Sequential([])
1131/4:
model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.SimpleRNN(1),
    ]
)
1131/5: model.summary()
1131/6: 20 * 20 + 20
1131/7: model.get_config()
1131/8: config = model.get_config()
1131/9: config["layers"]
1131/10: config["layers"][1]
1131/11: config["layers"][1].get_weights()
1131/12: model.get_weights()
1131/13: list(map(lambda a: a.shape, model.get_weights()))
1131/14: model.summary()
1131/15:
def generate_time_series(batch_size, n_steps):
    import numpy as np

    freq1, freq2, offsets1, offsets2 = np.random.rand(4, batch_size, 1)
    time = np.linspace(0, 1, n_steps)
    time
1131/16:
def generate_time_series(batch_size, n_steps):
    import numpy as np

    freq1, freq2, offsets1, offsets2 = np.random.rand(4, batch_size, 1)
    time = np.linspace(0, 1, n_steps)
    return time
1131/17: generate_time_series(10, 10)
1131/18:
def generate_time_series(batch_size, n_steps):
    import numpy as np

    freq1, freq2, offsets1, offsets2 = np.random.rand(4, batch_size, 1)
    time = np.linspace(0, 1, n_steps)
    series = 0.5 * np.sin((time - offsets1) * (freq1 * 10 + 10))
    series += 0.2 * np.sin((time - offsets2) * (freq2 * 20 + 20))
    series += 0.1 * (np.random.rand(batch_size, n_steps) - 0.5)
    return series
1131/19: generate_time_series(10, 10)
1131/20: generate_time_series(1, 10)
1131/21: import matplotlib.pyplot as plt
1131/22: generate_time_series(1, 100)
1131/23: plt.plot(generate_time_series(1, 100)[0, :])
1131/24: plt.show()
1131/25:
def generate_time_series(batch_size, n_steps):
    import numpy as np

    freq1, freq2, offsets1, offsets2 = np.random.rand(4, batch_size, 1)
    time = np.linspace(0, 1, n_steps)
    series = 0.5 * np.sin((time - offsets1) * (freq1 * 10 + 10))
    series += 0.2 * np.sin((time - offsets2) * (freq2 * 20 + 20))
    series += 0.1 * (np.random.rand(batch_size, n_steps) - 0.5)
    return series[..., np.newaxis].astype(np.float32)
1131/26: generate_time_series(1, 100)
1131/27: generate_time_series(2, 10)
1131/28: n_steps = 50
1131/29: series = generate_time_series(10000, n_steps + 1)
1131/30: x_train , y_train = series[:7000 , :n_steps] , series[7000: , -1]
1131/31: y_train
1131/32: y_train.shape
1131/33: x_valid, y_valid = series[7000:9000, :n_steps], series[7000:9000, -1]
1131/34: x_test, y_test = series[9000:, :n_steps], series[9000:, -1]
1131/35: history = model.fit(x_train, y_train, epochs=20)
1131/36: model.compile(loss="mse")
1131/37: history = model.fit(x_train, y_train, epochs=20)
1131/38: x_train , y_train = series[:7000 , :n_steps] , series[:7000 , -1]
1131/39: x_valid, y_valid = series[7000:9000, :n_steps], series[7000:9000, -1]
1131/40: x_test, y_test = series[9000:, :n_steps], series[9000:, -1]
1131/41: model.compile(loss="mse")
1131/42: history = model.fit(x_train, y_train, epochs=20)
1131/43: history = model.fit((x_train, x_train), epochs=20, validation_data=(x_valid, y_valid))
1131/44: history = model.fit(x_train, x_train, epochs=20, validation_data=(x_valid, y_valid))
1131/45:
model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.SimpleRNN(1),
    ]
)
1131/46: model.compile(loss="mse")
1131/47: history = model.fit(x_train, x_train, epochs=20, validation_data=(x_valid, y_valid))
1131/48:
model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.SimpleRNN(1),
    ]
)
1131/49: model.compile(loss="mse")
1131/50: history = model.fit(x_train, x_train, epochs=20, validation_data=(x_valid, y_valid))
1132/1: %autoreload 2
1132/2: %load_ext autoreload
1132/3: %autoreload 2
1132/4: import tensorflow as tf
1132/5: from tensorflow import keras
1132/6: ls
1132/7: input_A = keras.layers.Input(shape=[5], name="input_A")
1132/8: input_B = keras.layers.Input(shape=[6], name="input_B")
1132/9: hidden1 = keras.layers.Dense(30, activation="relu")(input_B)
1132/10: hidden2 = keras.layers.Dense(30, activation="relu")(hidden1)
1132/11: concat = keras.layers.concatenate([input_A, hidden2])
1132/12: output = keras.layers.Dense(1, name="output")(concat)
1132/13: model = keras.Model(inputs=[input_A, input_B], outputs=[output])
1132/14: model.summary()
1132/15: model.get_weights()
1132/16: model.layers
1132/17: len(model.layers)
1132/18: len(model.get_weights())
1132/19: model.layers[0]
1132/20: model.layers[0]
1132/21: model.get_weights()[0]
1132/22: model.get_weights()[-1]
1132/23: model.get_weights()[-2]
1132/24: model.layers[1]
1132/25: model.summary()
1132/26: ?model.get_config
1132/27: ?model.get_config
1132/28: model.get_config()
1132/29: congig = model.get_config()
1132/30: config = model.get_config()
1132/31: config['layers']
1132/32: len(config["layers"])
1132/33: for l in config['layers']
1132/34:
for l in config["layers"]:
    print(l)
1132/35:
for l in config["layers"]:
    print(l["name"])
1132/36: ?model.get_weights
1132/37: for l in model.layers
1132/38:
for l in model.layers:
    print(l)
1132/39:
for l in model.layers:
    print(l.get_config())
1132/40:
for l in model.layers:
    config = l.get_config()
    print(config["name"])
    print(l.get_weights())
1132/41: model.summary()
1132/42: import tfvis
1132/43: tfvis.save_html(model)
1132/44: tfvis.save_html(model)
1132/45:
model1 = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.SimpleRNN(1),
    ]
)
1132/46: tfvis.save_html(model1)
1132/47:
model1 = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(2, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(2, return_sequences=True),
        keras.layers.SimpleRNN(1),
    ]
)
1132/48:
model1 = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(2, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(2, return_sequences=True),
        keras.layers.SimpleRNN(1),
    ]
)
1132/49: tfvis.save_html(model1)
1132/50: tfvis.save_html(model1)
1132/51: tfvis.save_html(model1)
1132/52: model1.summary()
1132/53: tfvis.save_html(model)
1132/54: tfvis.save_html(model1)
1132/55: tfvis.save_html(model)
1132/56: tfvis.save_html(model1)
1132/57: tfvis.save_html(model)
1132/58: tfvis.save_html(model)
1132/59: tfvis.save_html(model)
1132/60: model.summary()
1132/61: model.summary()
1132/62: tfvis.save_html(model)
1132/63: tfvis.save_html(model1)
1132/64: tfvis.save_html(model)
1132/65: tfvis.save_html(model)
1132/66: tfvis.save_html(model)
1132/67: tfvis.save_html(model)
1132/68: tfvis.save_html(model)
1132/69: tfvis.save_html(model)
1132/70: tfvis.save_html(model)
1132/71: tfvis.save_html(model)
1132/72: tfvis.save_html(model)
1132/73: tfvis.save_html(model)
1132/74: tfvis.save_html(model)
1132/75: tfvis.save_html(model)
1132/76: a = {}
1132/77: a.update('a')
1132/78: a = set()
1132/79: a
1132/80: a.update("a")
1132/81: a
1132/82: a
1132/83: tfvis.save_html(model)
1132/84: tfvis.save_html(model1)
1132/85: tfvis.save_html(model)
1132/86: tfvis.save_html(model)
1132/87: a = set([])
1132/88: a
1132/89: a.update("a")
1132/90: a
1132/91: a.update("a")
1132/92: a
1132/93: a
1132/94: tfvis.save_html(model)
1132/95: tfvis.save_html(model)
1132/96: tfvis.save_html(model)
1132/97: a = set()
1132/98: a.update("123")
1132/99: a
1132/100: a.add("123")
1132/101: a
1132/102: tfvis.save_html(model)
1132/103: tfvis.save_html(model1)
1132/104: tfvis.save_html(model1)
1132/105: tfvis.save_html(model)
1132/106: tfvis.save_html(model)
1132/107: tfvis.save_html(model)
1132/108: tfvis.save_html(model)
1132/109: tfvis.save_html(model1)
1132/110: tfvis.save_html(model1)
1132/111: tfvis.save_html(model1)
1132/112: tfvis.save_html(model1)
1132/113: tfvis.save_html(model1)
1132/114: tfvis.save_html(model1)
1133/1: %load_ext autoreload
1133/2: %autoreload 2
1133/3: import tensorflow as tf
1133/4: from tensorflow import keras
1133/5: import numpy as np
1133/6: import tfvis
1133/7: a = {}
1133/8: b = [a]
1133/9: a.update({1 : 2})
1133/10: b
1133/11: a = set()
1133/12: b = [a]
1133/13: a.add("123")
1133/14: a
1133/15: b
1133/16: {"123"}
1133/17: type(a)
1133/18: type({"123"})
1133/19: input_A = keras.layers.Input(shape=[5], name="input_A")
1133/20: input_B = keras.layers.Input(shape=[6], name="input_B")
1133/21: hidden1 = keras.layers.Dense(30, activation="relu")(input_B)
1133/22: hidden2 = keras.layers.Dense(30, activation="relu")(hidden1)
1133/23: concat = keras.layers.concatenate([input_A, hidden2])
1133/24: output = keras.layers.Dense(1, name="output")(concat)
1133/25: model.summary()
1133/26: model = keras.Model(inputs=[input_A, input_B], outputs=[output])
1133/27: model.summary()
1133/28: tfvis.save_html(model)
1133/29: tfvis.save_html(model)
1133/30: tfvis.save_html(model)
1133/31: tfvis.get_nodes(model)
1133/32: tfvis.get_wb(model)
1133/33: tfvis.get_wb(model)
1133/34: tfvis.get_wb(model)
1133/35: tfvis.get_info(model)
1133/36: tfvis.save_visualization("temp" , model)
1133/37: tfvis.save_visualization("temp", model)
1133/38: tfvis.save_visualization("temp", model)
1133/39: tfvis.save_visualization("temp", model)
1133/40: tfvis.save_visualization("temp", model)
1133/41: tfvis.save_visualization("temp", model)
1133/42: tfvis.save_visualization("temp", model)
1133/43: tfvis.save_visualization("temp", model)
1133/44: tfvis.save_visualization("temp", model)
1133/45: tfvis.save_visualization("temp", model)
1133/46:
model1 = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(2, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(2, return_sequences=True),
        keras.layers.SimpleRNN(1),
    ]
)
1133/47: model1.summary()
1133/48: tfvis.save_visualization("temp", model1)
1133/49: tfvis.save_visualization("temp", model1)
1133/50: tfvis.save_visualization("temp", model1)
1133/51: tfvis.save_visualization("temp", model1)
1133/52: tfvis.save_visualization("temp", model1)
1133/53: tfvis.save_visualization("temp", model1)
1133/54: tfvis.save_visualization("temp", model1)
1133/55: tfvis.save_visualization("temp", model1)
1133/56: tfvis.save_visualization("temp", model1)
1133/57: tfvis.save_visualization("temp", model1)
1133/58: tfvis.save_visualization("temp", model1)
1133/59: tfvis.save_visualization("temp", model1)
1133/60: tfvis.save_visualization("temp", model1)
1133/61: tfvis.save_visualization("temp", model1)
1133/62: tfvis.save_visualization("temp", model1)
1133/63: tfvis.save_visualization("temp", model1)
1133/64: tfvis.save_visualization("temp", model1)
1133/65: tfvis.save_visualization("temp", model1)
1133/66: tfvis.save_visualization("temp", model1)
1133/67: tfvis.save_visualization("temp", model1)
1133/68: tfvis.save_visualization("temp", model1)
1133/69: tfvis.save_visualization("temp", model1)
1133/70: tfvis.save_visualization("temp", model1)
1133/71: tfvis.save_visualization("temp", model1)
1133/72: tfvis.save_visualization("temp", model1)
1133/73: tfvis.save_visualization("temp", model1)
1133/74: tfvis.save_visualization("temp", model1 , first_iteration = True , last_iteration = True)
1133/75: tfvis.save_visualization("temp", model1, first_iteration=True, last_iteration=True)
1133/76: tfvis.save_visualization("temp", model1)
1133/77: tfvis.save_visualization("temp", model1)
1133/78: tfvis.save_visualization("temp", model1)
1133/79: tfvis.save_visualization("temp", model1)
1133/80: tfvis.save_visualization("temp", model)
1133/81: import os
1133/82: tfvis.save_visualization("temp", model)
1133/83: tfvis.save_visualization("temp", model)
1134/1: import tensorflow as tf
1134/2: from tensorflow import keras
1134/3: ?keras.layers.SimpleRNN
1134/4:
model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(
            20, return_sequences=True, input_shape=[None, 1], name="first_layer"
        ),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.SimpleRNN(1),
    ]
)
1134/5: model.summary()
1135/1: None == "true"
1135/2: 1 == "true"
1136/1: str(None)
1136/2: import json
1136/3: json.dumps({1 : None} , indent=2)
1137/1: import numpy as np
1137/2: import matplotlib.pyplot as plt
1137/3: plt.plot([[1, 1], [2, 2], [3, 3]])
1137/4: plt.plot([[1, 3], [2, 2], [3, 1]])
1137/5: plt.show()
1138/1: a = "asdasdsdadsasd"
1138/2: a[:12]
1138/3: a[:11]
1138/4: type(a[:11])
1140/1: import matplotlib.pyplot as plt
1140/2: import simple_rnn
1140/3: simple_rnn.generate_time_series(2, 4)
1140/4: simple_rnn.generate_time_series(2, 4).shape
1140/5: BATCH_SIZE = 2
1140/6: N_STEPS = 16
1140/7: x = np.linspace(0 , 1 , N_STEPS)
1140/8: import numpy as np
1140/9: x = np.linspace(0, 1, N_STEPS)
1140/10: series = generate_time_series(BATCH_SIZE , N_STEPS)
1140/11: series = simple_rnn.generate_time_series(BATCH_SIZE , N_STEPS)
1140/12: series
1140/13: plt.plot(x, series[0].flatten())
1140/14: plt.show()
1140/15: BATCH_SIZE = 10
1140/16: N_STEPS = 128
1140/17: x = np.linspace(0, 1, N_STEPS)
1140/18: series = simple_rnn.generate_time_series(BATCH_SIZE, N_STEPS)
1140/19: plt.plot(x, series[0].flatten())
1140/20: plt.show()
1141/1: import tensorflow as tf
1141/2: from tensorflow import keras
1141/3:
model1 = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(2, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(2, return_sequences=True),
        keras.layers.SimpleRNN(1),
    ]
)
1141/4: ?model.evaluate
1141/5: ?model1.evaluate
1143/1: import tensorflow as tf
1144/1: import tensorflow as tf
1144/2: from tensorflow import keras
1144/3: ?keras.layers.SimpleRNN
1145/1: import os
1145/2: os.path.isfile("12313")
1146/1: import matplotlib.pyplot as plt
1146/2: fig = plt.figure()
1146/3: ax = fig.add_subplot(1 , 1 , 1)
1146/4:
plt.text(
    0.1,
    0.85,
    "no history",
    horizontalalignment="left",
    verticalalignment="center",
    transform=ax.transAxes,
)
1146/5: plt.show()
1147/1: import tensorflow as tf
1147/2: from tensorflow import keras
1147/3: import matplotlib.pyplot as plt
1147/4: import numpy as np
1147/5: x = tf.Variable(3.0)
1147/6: x
1147/7:
with tf.GradientTape() as tape:
    y = x**2
    print(y)
1147/8: tape.gradient(y, x)
1147/9: tape.gradient(y, x).numpy()
1147/10: tape.gradient(y, x)
1147/11: x = tf.Variable(3.0)
1147/12:
with tf.GradientTape() as tape:
    y = x**2
    print(y)
1147/13: dy_dx = tape.gradient(y, x)
1147/14: dy_dx.numpy()
1147/15: x = tf.Variable(3.0)
1147/16:
with tf.GradientTape() as tape:
    y = x**2
    print(y)
1147/17: tape.watched_variables()
1147/18: tape.watched_variables()
1147/19: tape.batch_jacobian()
1147/20: tape.watched_variables()
1147/21: y
1147/22: w = tf.Variable(tf.random.normal((3, 2)), name="w")
1147/23: b = tf.Variable(tf.zeros(2, dtype=tf.float32), name="b")
1147/24: x = [[1.0, 2.0, 3.0]]
1147/25: w = tf.Variable(tf.random.normal((3, 2)), name="w")
1147/26: b = tf.Variable(tf.zeros(2, dtype=tf.float32), name="b")
1147/27: x = [[1.0, 2.0, 3.0]]
1147/28:
with tf.GradientTape(persistent=True) as tape:
    y = x @ w + b
    print(type(y))
    print(y)
    loss = tf.reduce_mean(y**2)
1147/29: [dl_dw, dl_db] = tape.gradient(loss, [w, b])
1147/30: w.shape
1147/31: dl_dw.shape
1147/32: dl_dw.numpy()
1147/33: tf.constant([[1.0, 2.0, 3.0]])
1147/34: ?keras.callbacks.TensorBoard
1148/1: import tensorflow as tf
1148/2: ?tf.Session
1148/3: ?tf.Session
1149/1: import tensorflow as tf
1149/2: x = tf.cast([1.0 , 2.0] dtype = tf.float32)
1149/3: x = tf.cast([1.0 , 2.0] , dtype = tf.float32)
1149/4: x = tf.cast([1.0, 2.0], dtype=tf.float32)
1149/5: w = tf.cast([[1.0 , 2.0 , 3.0],[4.0 , 5.0 , 6.0],[7.0 , 8.0 , 9.0]] , dtype = tf.float32)
1149/6: x
1149/7: w
1149/8: w = tf.cast([[1.0 , 2.0 , 3.0],[4.0 , 5.0 , 6.0]] , dtype = tf.float32)
1149/9: x
1149/10: w
1149/11: tf.matmul(x, w)
1149/12: x @ w
1149/13: w @ x
1149/14: tf.transpose(w)
1149/15: x @ tf.transpose(w)
1149/16: x
1149/17: w
1149/18: x = tf.cast([[1.0, 2.0]], dtype=tf.float32)
1149/19: x
1149/20: tf.matmul(x, w)
1150/1: import tensorflow as tf
1150/2: ?tf.reshape
1150/3: x = tf.cast([[1.0, 2.0]], dtype=tf.float32)
1150/4: x = tf.cast([[1.0, 2.0]], dtype=tf.float32)
1150/5: tf.reshape(x , (-1 , 1))
1150/6: tf.reshape([[1.0 , 2.0]] , (-1 , 1))
1150/7: ?tf.reshape
1150/8: ?tf.compat.v1.losses.sigmoid_cross_entropy
1150/9: x = tf.cast([[1.0, 2.0 , 3.0]] , [4.0 , 5.0 , 6.0], dtype=tf.float32)
1150/10: x = tf.cast([[1.0, 2.0, 3.0]], [4.0, 5.0, 6.0], dtype=tf.float32)
1150/11: x = tf.cast([[1.0, 2.0, 3.0]], [4.0, 5.0, 6.0]], dtype=tf.float32)
1150/12: x = tf.cast([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], dtype=tf.float32)
1150/13: x
1150/14: tf.reshape(x , (-1 , 1))
1151/1: 28 * 28
1152/1: from sklearn.datasets import fetch_openml
1152/2: ?fetch_openml
1153/1: import numpy as np
1153/2: np.array([1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0])
1153/3: arr = np.array([1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0])
1153/4: arr[1:3]
1155/1: import numpy as np
1155/2: arr = np.array([[1 , 2 , 3] , [4 , 5 , 6]])
1155/3: arr
1155/4: arr.reshape(arr.shape[0] , 1 , arr.shape[1])
1156/1: import tensorflow as tf
1156/2: ?tf.compat.v1.losses.sigmoid_cross_entropy
1156/3: ?tf.compat.v1.losses.sigmoid_cross_entropy
1157/1: from sklearn.preprocessing import OneHotEncoder
1157/2: cat_encoder = OneHotEncoder()
1157/3: cat_encoder.fit_transform([1 , 2 ,1 , 0])
1157/4: ?OneHotEncoder
1157/5: cat_encoder.fit_transform([[1] , [2] , [3] , [1]])
1157/6: cat_encoder.fit_transform([[1], [2], [3], [1]]).to_array()
1157/7: cat_encoder.fit_transform([[1], [2], [3], [1]]).toarray()
1157/8: type(cat_encoder.fit_transform([[1], [2], [3], [1]]).toarray())
1158/1: import numpy as np
1158/2: x = np.load('x_download.npy')
1158/3: y = np.load('y_download.npy')
1158/4: x
1158/5: y
1158/6: y = y[: , np.newaxis , np.newaxis]
1158/7: y
1158/8: y = np.load("y_download.npy")
1158/9: y = y[:, np.newaxis]
1158/10: from sklearn.preprocessing import OneHotEncoder
1158/11: cat_encoder = OneHotEncoder()
1158/12: y[0:2]
1158/13: y = cat_encoder.fit_transform(y)
1158/14: t[0:2]
1158/15: y[0:2]
1158/16: y = y.toarray()
1158/17: y[0:2]
1159/1: import tensorflow as tf
1159/2: ?tf.compat.v1.losses.sigmoid_cross_entropy
1160/1: import tensorflow as tf
1160/2: ?tf.compat.v1.losses.sigmoid_cross_entropy
1160/3: tf.compat.v1.losses.sigmoid_cross_entropy([[0 , 1 , 0]] , [[[2]]])
1160/4: tf.compat.v1.losses.sigmoid_cross_entropy([[0 , 1 , 0]] , [[2]])
1160/5: tf.compat.v1.losses.sigmoid_cross_entropy([[0 , 1 , 0]] , [[0 , 1 , 0]])
1160/6: tf.compat.v1.losses.sigmoid_cross_entropy(np.array([[0 , 1 , 0]] , dtype = np.float32) , [[0 , 1 , 0]])
1160/7: import numpy as np
1160/8:
tf.compat.v1.losses.sigmoid_cross_entropy(
    np.array([[0, 1, 0]], dtype=np.float32), [[0, 1, 0]]
)
1161/1: import tensorflow as tf
1161/2: import numpy as np
1161/3:
tf.compat.v1.losses.sigmoid_cross_entropy(
    np.array([[0, 1, 0]], dtype=np.float32), np.array([[0, 1, 0]], dtype=np.float32)
)
1161/4:
tf.compat.v1.losses.sigmoid_cross_entropy(
    np.array([[0, 1, 0]], dtype=np.float32), np.array([[0, 0, 1]], dtype=np.float32)
)
1162/1: import numpy as np
1162/2: a = np.array([1.0 , 2.0 , 3.0])
1162/3: b = np.array([2.0 , 1.0 , 4.0])
1162/4: a - b
1162/5: np.sqrt(a - b)
1162/6: c = np.sqrt(a - b)
1162/7: c
1162/8: np.isnan(c)
1162/9: a = np.array([[1.0 , 2.0 , 3.0]])
1162/10: b = np.array([[2.0 , 1.0 , 4.0]])
1162/11: c = np.sqrt(a - b)
1162/12: c
1162/13: np.isnan(c)
1162/14: np.where(np.isnan(c))
1162/15: np.argwhere(np.isnan(c))
1162/16: c[np.argwhere(np.isnan(c))]
1162/17: np.argwhere(np.isnan(c))
1162/18: c
1162/19: c[np.isnan(c)]
1162/20: a[np.isnan(c)]
1163/1: import numpy as np
1163/2: [i for i in range('z')]
1163/3: import string
1163/4: string.asci
1163/5: string.asci_letters
1163/6: string.ascii_letters
1163/7: import random
1163/8: random.choice(string.ascii_letters)
1163/9: random.choice(string.ascii_letters)
1163/10: random.choice(string.ascii_letters)
1163/11: "".join([random.choice(string.ascii_letters) for _ in range(16)])
1164/1: %load_ext autoreload
1164/2: %autoreload 2
1164/3: import svgpresentation
1164/4: import svgpresentation
1164/5: svgpresentation.SVG_PREFIX
1164/6: print(svgpresentation.SVG_PREFIX)
1164/7: print(svgpresentation.SVG_PREFIX)
1164/8: print(svgpresentation.SVG_PREFIX)
1164/9: print(svgpresentation.SVG_TEMPLATE)
1164/10: "1231".replace("1" , "aaa")
1164/11: import svgpresentation as sp
1164/12: sp.make_svg("123" , -1 , 1 , -1 , 1)
1164/13: sp.make_svg("123", -1, 1, -1, 1)
1164/14: print(sp.make_svg("123", -1, 1, -1, 1))
1164/15: print(sp.make_svg(["123"], -1, 1, -1, 1))
1164/16: print(sp.make_svg(["123"], -1, 1, -1, 1))
1164/17: print(sp.make_svg(["123"], -1, 1, -1, 1))
1164/18: print(sp.make_svg(["123"], -1, 1, -1, 1))
1164/19: print(sp.make_svg(["123"], -1, 1, -1, 1))
1164/20: print(sp.make_svg(["123"], -1, 1, -1, 1))
1164/21: print(sp.make_svg(["123"], -1, 1, -1, 1))
1164/22: print(sp.make_svg(["123"], -1, 1, -1, 1))
1164/23: a = [[1 , 2] , [3 , 4] , [5 , [6 , 7]]]
1164/24: import itertools
1164/25:
for item in itertools.chain.from_iterable(a):
    print(item)
1164/26: sp.svgable()
1164/27: sp.svgable().get_svg()
1164/28: print(sp.make_svg([sp.svgable()], -1, 1, -1, 1))
1164/29:
def check(obj):
    for x in obj:
        yield x
1164/30:
for x in check([0, 1, 2, 3, 4]):
    print(x)
1164/31: type(a)
1164/32: isinstance(a, list)
1164/33: ls
1164/34: sp.traverse_objects(a)
1164/35:
for (i, x) in sp.traverse_objects(a):
    print(i, x)
1164/36:
for (i, x) in sp.traverse_objects(a):
    print(i, x)
1164/37:
for (i, x) in sp.traverse_objects(a):
    print(i, x)
1164/38:
for (i, l, x) in sp.traverse_objects(a):
    print(i, l, x)
1164/39:
for (i, l, x) in sp.traverse_objects(a):
    print(i, l, x)
1164/40:
for (i, l, x) in sp.traverse_objects(a):
    print(i, l, x)
1164/41: a
1164/42: a = [[1, 2], [3, 4], [5, [6, 7, 8]]]
1164/43:
for (i, l, x) in sp.traverse_objects(a):
    print(i, l, x)
1164/44: a = [[1, 2], [3], [5, [6, 7, 8]]]
1164/45:
for (i, l, x) in sp.traverse_objects(a):
    print(i, l, x)
1164/46: a = [[1, 2], [3], [], [5, [6, 7, 8]]]
1164/47:
for (i, l, x) in sp.traverse_objects(a):
    print(i, l, x)
1164/48:
for (i, l, x) in sp.traverse_objects(a):
    print(i, l, x)
1164/49:
for (i, l, d, x) in sp.traverse_objects(a):
    print(i, l, d, x)
1164/50:
for (i, l, d, x) in sp.traverse_objects(a):
    print(i, l, d, x)
1164/51:
for (i, l, d, x) in sp.traverse_objects(0, a):
    print(i, l, d, x)
1164/52: a
1164/53: a = [[1, 2], [3], 4, [5, [6, 7, 8]]]
1164/54:
for (i, l, d, x) in sp.traverse_objects(0, a):
    print(i, l, d, x)
1164/55:
for (i, l, d, x) in sp.traverse_objects(0, a):
    print(i, l, d, x)
1164/56:
for (i, l, d, x) in sp.traverse_objects(0, a):
    print(i, l, d, x)
1164/57:
for (i, l, d, x) in sp.traverse_objects(a):
    print(i, l, d, x)
1164/58:
for (i, l, d, x) in sp.traverse_objects(a):
    print(i, l, d, x)
1164/59: print(sp.make_svg(sp.svgable(), -1, 1, -1, 1))
1164/60: print(sp.make_svg([sp.svgable()], -1, 1, -1, 1))
1164/61: print(sp.make_svg([sp.svgable()], -1, 1, -1, 1))
1164/62: print(sp.make_svg([sp.svgable()]))
1164/63: sp.nonsense(1 , 1 , 0.1)
1164/64: sp.nonsense(1, 1, 0.1).get_svg()
1164/65: print(sp.nonsense(1, 1, 0.1).get_svg())
1164/66: print(sp.nonsense(1, 1, 0.1).get_svg())
1164/67: print(sp.nonsense(1, 1, 0.1).get_svg())
1164/68: print(sp.nonsense(1, 1, 0.1).get_svg())
1164/69: min(1.0, 10.0)
1164/70: print(sp.rect(1.0 , 1.0 , 2.0 , 2.0).get_svg())
1164/71: print(sp.make_svg(sp.svgable(), -1, 1, -1, 1))
1164/72: print(sp.make_svg([sp.rect(1 , 1 , 2 , 2)], -1, 1, -1, 1))
1164/73: sp.rect(1 , 1 , 2 , 3)
1164/74: sp.rect(1, 1, 2, 3).make_svg()
1164/75: sp.rect(1, 1, 2, 3).get_svg()
1164/76: print(sp.rect(1, 1, 2, 3).get_svg())
1164/77: print(sp.make_svg([sp.rect(1 , 1 , 2 , 2)]))
1164/78: dict()
1164/79:
for el in dict():
    print(el)
1164/80: print(sp.rect(1, 1, 2, 3).get_svg())
1164/81: print(sp.rect(1, 1, 2, 3).get_svg())
1164/82: print(sp.rect(1, 1, 2, 3).get_svg())
1164/83: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg())
1164/84: {"1": 1}
1164/85: "1" in {"1" : 1}
1164/86: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg())
1164/87: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg({"height" : 100}))
1164/88: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg(global_style = {"height" : 100}))
1164/89: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg())
1164/90: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg())
1164/91: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg())
1164/92: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg())
1164/93: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg(global_style=dict()))
1164/94: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg(global_style={"123": 123}))
1164/95: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg(global_style={"height": 123}))
1164/96: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg(global_style={"height": 123}))
1164/97: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg(global_style={"height": 123}))
1164/98: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg(global_style={"height": 123}))
1164/99: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg(global_style={"height": 123}))
1164/100: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg(global_style={"height": 123}))
1164/101: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg(global_style={"height": 123}))
1164/102: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg(global_style={"height": 123}))
1164/103: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg(global_style={"height": 123}))
1164/104: print(sp.rect(1.0, 1.0, 2.0, 3.0).get_svg(global_style={"height": 123}))
1166/1: from manim_presentation import Slide
1167/1: from main import *
1167/2: from manim import *
1167/3: ?Line
1167/4: ?Brace
1167/5: ?Circle
1168/1: import cairo
1168/2: surface = cairo.SVGSurphace("example.svg", 200, 200)
1168/3: surface = cairo.SVGSurface("example.svg", 200, 200)
1168/4: context = cairo.Context(surface)
1168/5: context
1168/6: surface
1168/7: x, y, x1, y1 = 0.1, 0.5, 0.4, 0.9
1168/8: x2, y2, x3, y3 = 0.6, 0.1, 0.9, 0.5
1168/9: ?context.scale
1168/10: context.scale(200, 200)
1168/11: context.set_line_width(0.04)
1168/12: context.move_to(x, y)
1168/13: context.curve_to(x1, y1, x2, y2, x3, y3)
1168/14: context.stroke()
1168/15: context.set_source_rgba(1, 0.2, 0.2, 0.6)
1168/16: context.set_line_width(0.02)
1168/17: context.move_to(x, y)
1168/18: context.line_to(x1, y1)
1168/19: context.move_to(x2, y2)
1168/20: context.line_to(x3, y3)
1168/21: context.stroke()
1168/22: ls
1168/23: ?surface.finish
1168/24: ?surface.write_to_png()
1168/25: surface.write_to_png()
1168/26: surface.finish()
1168/27: ls
1169/1: import pylatex
1170/1: ?str.find
1171/1: "123123"[0]
1171/2: "123123"[1:2]
1171/3: "123123"[1:3]
1172/1: import numpy as np
1172/2: np.array([[1.0 , 2.0 , 3.0] , [4.0 , 5.0 , 6.0] , [7.0 , 8.0 , 9.0]])
1172/3: a = np.array([[1.0 , 2.0 , 3.0] , [4.0 , 5.0 , 6.0] , [7.0 , 8.0 , 9.0]])
1172/4: a
1172/5: a * 2
1172/6: a = np.matrix([[1.0 , 2.0 , 3.0] , [4.0 , 5.0 , 6.0] , [7.0 , 8.0 , 9.0]])
1172/7: a
1172/8: type(a)
1172/9: a * np.matrix([1.0 , 2.0 , 3.0])
1172/10: a * np.matrix([1.0, 2.0, 3.0]).transpose()
1173/1: import numpy as np
1174/1: import numpy as np
1174/2: np.norm([1.0 , 1.0])
1174/3: np.linalg.norm([1.0, 1.0])
1176/1: import numpy as np
1176/2: ?np.cdot
1176/3: ?np.dot
1177/1: import numpy as np
1177/2: np.dot([[1 , 2],[3 , 4]] , [1 , 0])
1177/3: np.dot([[1 , 2],[3 , 4]] , [ , 1])
1177/4: np.dot([[1 , 2],[3 , 4]] , [0 , 1])
1177/5: np.dot([[1 , 2],[3 , 4]] , [1 , 1])
1177/6: np.dot([[1 , 2],[3 , 4]] , [[1] , [1]])
1179/1: a = True
1179/2: b = True
1179/3: c = [1 , 2 , 3]
1179/4: a and 1 in c and not b
1179/5: b = False
1179/6: a and 1 in c and not b
1179/7: 1 in c and a and not b
1179/8: (1 in c and a and not b) == (a and 1 in c and not b)
1179/9: a = True
1179/10: b = True
1179/11: x = 1
1179/12: (x in c and a and not b) == (a and x in c and not b)
1179/13: a = True
1179/14: b = True
1179/15: x = 100
1179/16: (x in c and a and not b) == (a and x in c and not b)
1179/17: a = True
1179/18: b = False
1179/19: x = 1
1179/20: (x in c and a and not b) == (a and x in c and not b)
1179/21: a = True
1179/22: b = False
1179/23: x = 100
1179/24: (x in c and a and not b) == (a and x in c and not b)
1179/25: a = False
1179/26: b = True
1179/27: x = 1
1179/28: (x in c and a and not b) == (a and x in c and not b)
1179/29: a = False
1179/30: b = True
1179/31: x = 100
1179/32: (x in c and a and not b) == (a and x in c and not b)
1179/33: a = False
1179/34: b = False
1179/35: x = 1
1179/36: (x in c and a and not b) == (a and x in c and not b)
1179/37: a = False
1179/38: b = False
1179/39: x = 100
1179/40: (x in c and a and not b) == (a and x in c and not b)
1180/1: a = [0 , 1 , 2 , 3 , 4]
1180/2: a.pop(0)
1180/3: a
1180/4: a.pop(-1)
1180/5: a
1180/6: a.append(1)
1180/7: a
1181/1: a = []
1181/2: a.pop(-1)
1182/1: a = 1
1182/2: b = 2
1182/3: c = 3
1182/4: l = [a , b , c]
1182/5: l
1182/6: a = 2
1182/7: l
1182/8: a = [1]
1182/9: b = [2]
1182/10: c = [3]
1182/11: l = [a, b, c]
1182/12: l
1182/13: a = [123]
1182/14: l
1183/1: import numpy as np
1183/2: arr1 = np.array([[2, 5], [3, 5]])
1183/3: arr2 = np.array([[1, 2], [2, 6]])
1183/4: np.outer(arr1, arr2)
1183/5: arr1[0].arr2[0]
1183/6: np.dot(arr1[0] , arr2[0])
1183/7: np.dot(arr1[0] , arr2[1])
1183/8: np.dot(arr1[0] , arr2[2])
1183/9: np.dot.outer
1183/10: np.multiply
1183/11: np.matmul
1183/12: np.matmul(arr1[0] , arr2[0])
1183/13: np.matmul.outer(arr1 , arr2)
1183/14: np.matmul.outer
1183/15: ?np.matmul.outer
1183/16: arr1
1183/17: arr2
1183/18: np.matmul.outer(arr1, arr2)
1183/19: np.dot(arr1 , arr2)
1183/20: np.dot(arr1[0] , arr2[0])
1183/21: np.dot(arr1[0], arr2[0])
1183/22: np.dot(arr1[0], arr2[1])
1184/1: arr1 = np.array([[2, 5], [3, 5]])
1184/2: import numpy as np
1184/3: arr1 = np.array([[2, 5], [3, 5]])
1184/4: arr2 = np.array([[1, 2], [2, 6]])
1184/5: arr1.shape
1184/6: arr2.shape
1184/7: arr1 = np.array([[2, 5], [3, 5] , [6 , 7]])
1184/8: arr2 = np.array([[1, 2], [2, 6] , [7 , 9]])
1184/9: np.dot(arr1[0], arr2[1])
1184/10: np.dot(arr1, arr2)
1184/11: np.dot(arr1, np.transpose(arr2))
1184/12: np.dot(arr1[0], arr2[0])
1184/13: np.dot(arr1[0], arr2[2])
1184/14: np.dot(arr1[0], arr2[1])
1184/15: np.dot(arr1[0], arr2[2])
1184/16: np.dot(arr1[1], arr2[0])
1184/17: np.dot(arr1[1], arr2[1])
1184/18: np.dot(arr1[1], arr2[2])
1184/19: np.dot(arr1[2], arr2[0])
1184/20: np.dot(arr1[2], arr2[1])
1184/21: np.dot(arr1[2], arr2[0])
1184/22: np.dot(arr1[2], arr2[1])
1184/23: np.dot(arr1[2], arr2[2])
1184/24: np.dot(arr1[2], arr2[0])
1184/25: np.dot(arr1[2], arr2[1])
1184/26: np.dot(arr1[2], arr2[2])
1185/1: import numpy as np
1185/2: arr1 = np.array([[2, 5], [3, 5], [6, 7]])
1185/3: arr2 = np.array([[1, 2], [2, 6], [7, 9]])
1185/4: np.add(arr1, arr2)
1185/5: np.add.outer(arr1, arr2)
1185/6: np.add.subtract(arr1, arr2)
1185/7: np.add.outer(arr1, arr2)
1185/8: np.subtract.outer(arr1, arr2)
1185/9: sub = np.subtract.outer(arr1, arr2)
1185/10: sub[0, 0]
1185/11: arr1[0] - arr2[0]
1185/12: arr1
1185/13: arr2
1185/14: sub = np.subtract.outer(arr1, arr1)
1185/15: sub
1186/1: import numpy as np
1186/2: np.array([1 , 2 ,3 , 4])
1186/3: arr = np.array([1 , 2 ,3 , 4])
1186/4: np.repeat(arr, 2)
1186/5: np.repeat(arr, 4)
1186/6: np.repeat(arr, 4).reshape(4 , 4)
1187/1: import numpy as np
1187/2: arr = np.array([1, 2, 3, 4])
1187/3: arr1 = np.repeat(arr, 4).reshape(4 , 4)
1187/4: np.diagonal(arr1)
1187/5: ?np.argpartition
1187/6: ?np.arange
1188/1: import numpy as np
1188/2: ?np.arange
1188/3: np.arange(10)
1188/4: np.random.randint(2)
1188/5: np.random.randint(2)
1188/6: np.random.randint(2)
1188/7: np.random.randint(2)
1188/8: np.random.randint(2)
1188/9: np.random.randint(2)
1188/10: np.random.randint(2)
1188/11: np.random.randint(3)
1188/12: np.random.randint(3)
1188/13: np.random.randint(3)
1188/14: np.random.randint(3)
1188/15: np.random.randint(3)
1188/16: np.random.randint(3)
1188/17: np.random.randint(3)
1188/18: np.random.randint(3)
1188/19: np.random.randint(3)
1188/20: np.random.randint(3)
1188/21: np.random.randint(3)
1188/22: np.random.rand()
1188/23: np.random.rand(3)
1188/24: np.random.rand(3) - 0.5
1188/25: np.random.rand(3) - 0.5
1188/26: np.random.rand(3) - 0.5
1188/27: np.random.rand(3) - 0.5
1188/28: np.random.rand(3) - 0.5
1188/29: np.random.rand(3) - 0.5
1188/30: np.random.rand(3) - 0.5
1188/31: arr = [(1 , 2) , (10 , 3) , (2 , 5)]
1188/32: arr.sort(key = lambda x : x[0])
1188/33: arr
1188/34: arr[:2]
1188/35: importexit
1189/1: range(1, 2 + 1)
1189/2: list(range(1, 2 + 1))
1190/1: from matplotlib.animation import FuncAnimation
1190/2: ?FuncAnimation
1191/1: import numpy as np
1191/2: np.square([1 , 2 , 3])
1191/3: import os
1192/1: import numpy as np
1192/2: np.norm([1.0, 1.0])
1192/3: np.norm([1.0, 1.0])
1193/1: import numpy as np
1193/2: a = [1, 1]
1193/3: b = [0, 0]
1193/4: a = np.array([1.0, 1.0])
1193/5: b = np.array([2.0, 2.0])
1193/6: np.sqrt(np.dot(a - b , a - b))
1193/7: b = np.array([2.0, 3.0])
1193/8: np.sqrt(np.dot(a - b, a - b))
1193/9: np.sqrt(1.0 + 2.0)
1193/10: np.sqrt(1.0 + 4.0)
1194/1: import numpy as np
1194/2: ?np.save
1195/1: import numpy as np
1195/2: ?np.save
1196/1:
def fun(**kwargs):
    kwargs.setdefault("a", 123)
    return kwargs["a"]
1196/2: fun()
1196/3: fun(a=321)
1197/1: from cadquery import *
1198/1: ccharge = 0.0
1198/2: ccharge == 0
1199/1: import numpy as np
1199/2: np.finfo(np.float32)
1199/3: np.finfo(np.float32).eps
1199/4: np.finfo(np.float64).eps
1200/1: import numpy as np
1200/2: np.finfo(np.float64).eps
1200/3: np.finfo(np.float32).eps
1201/1: import time
1201/2: time.ctime()
1201/3: time.ctime()
1201/4: time.time()
1201/5: time.clock()
1201/6: time.clock
1202/1: import timeit
1202/2:
def pythonMath(n):
    tab = [1.0 for _ in range(n)]
    for i in range(n)
1202/3:
def pythonMath(n):
    tab = [1.0 for _ in range(n)]
    for i in range(n):
        tab[i] += 1.0
1202/4: pythonMath(100)
1202/5: pythonMath(10000)
1202/6: pythonMath(100000)
1202/7: pythonMath(1000000)
1202/8: pythonMath(10000000)
1202/9: pythonMath(100000000)
1202/10: import time
1202/11:
def pythonMath(n):
    tab = [1.0 for _ in range(n)]
    start = time.time()
    for i in range(n):
        tab[i] += 1.0
    end = time.end()
    print(start - end)
1202/12: pythonMath(100000000)
1202/13:
def pythonMath(n):
    tab = [1.0 for _ in range(n)]
    start = time.time()
    for i in range(n):
        tab[i] += 1.0
    end = time.time()
    print(start - end)
1202/14:
def pythonMath(n):
    tab = [1.0 for _ in range(n)]
    start = time.time()
    for i in range(n):
        tab[i] += 1.0
    end = time.time()
    return end - start
1202/15: pythonMath(100000000)
1202/16: time.time
1202/17: time.time()
1202/18: time.time()
1202/19: time.time()
1202/20: time.time()
1202/21: time.time()
1202/22: import numpy as np
1202/23:
def numpyMath(n):
    tab = [1.0 for _ in range(n)]
    tabNP = np.array(tab)
    start = time.time()
    tabNP += 1.0
    end = time.time()
    return end - start
1202/24: pythonMath(100000000)
1202/25: numpyMath(100000000)
1203/1: import testNumpy
1203/2: testNumpy.pythonMatMul(10)
1203/3: %load_ext autoreload
1203/4: %autoreload 2
1203/5: import testNumpy
1203/6: testNumpy.pythonMatMul(10)
1203/7: testNumpy.pythonMatMul(10)
1204/1: %load_ext autoreload
1204/2: %autoreload 2
1204/3: import testNumpy
1204/4: testNumpy.pythonMatMul(10)
1204/5: testNumpy.pythonMatMul(10)
1204/6: testNumpy.pythonMatMul(10)
1204/7: testNumpy.pythonMatMul(100)
1204/8: testNumpy.pythonMatMul(1000)
1204/9: testNumpy.pythonMatMul(100)
1204/10: testNumpy.pythonMatMul(200)
1204/11: testNumpy.numpyMatMul(200)
1204/12: testNumpy.numpyMatMul(200)
1204/13: testNumpy.numpyMatMul(1000)
1204/14: testNumpy.numpyMatMul(1000)
1204/15: testNumpy.numpyMatMul(2000)
1205/1: import numpy as np
1205/2: ?np.matmul
1205/3: import array
1205/4: array.array("i", [1, 2, 3])
1205/5: np.empty([2, 2], dtype=np.float64)
1205/6: np.empty([2, 2], dtype=np.float64)
1205/7: np.zeros([2, 2], dtype=np.float64)
1205/8: np.arange(10)
1205/9: np.arange(100).reshape(10, 10)
1206/1: import numpy as np
1206/2: import time
1206/3:
def pythonIncrement(n):
    tab = [1.1 for _ in range(n)]
    start = time.time()
    for i in range(n):
        tab[i] += 1.1
    end = time.time()
    return end - start
1206/4: pythonIncrement(1000)
1206/5: pythonIncrement(10000)
1206/6: pythonIncrement(100000)
1206/7: pythonIncrement(1000000)
1206/8: pythonIncrement(10000000)
1206/9:
def numpyIncrement(n):
    tab = np.array([1.1 for _ in range(n)])
    start = time.time()
    tab += 1.1
    end = time.time()
    return end - start
1206/10: pythonIncrement(10000000)
1206/11: pythonIncrement(100000000)
1206/12: numpyIncrement(100000000)
1206/13:
def pythonMatMul(n):
    matA = [[1.0 for _ in range(n)] for _ in range(n)]
    matB = [[1.0 for _ in range(n)] for _ in range(n)]
    matC = [[0.0 for _ in range(n)] for _ in range(n)]
    start = time.time()
    for row in range(n):
        for col in range(n):
            for k in range(n):
                matC[row][col] += matA[row][k] * matB[k][col]
    end = time.time()
    return end - start
1206/14: pythonMatMul(10)
1206/15: pythonMatMul(100)
1206/16: pythonMatMul(500)
1206/17:
def numpyMatMul(n):
    matA = np.array([[1.0 for _ in range(n)] for _ in range(n)])
    matB = np.array([[1.0 for _ in range(n)] for _ in range(n)])
    start = time.time()
    matC = np.matmul(matA, matB)
    end = time.time()
    return end - start
1206/18: numpyMatMul(100)
1206/19: numpyMatMul(500)
1206/20: numpyMatMul(1000)
1206/21: pythonMatMul(1000)
1209/1: import numpy as np
1209/2: arr = np.array([1, 2, 3])
1209/3: arr
1209/4: print(arr)
1209/5: print([1, 2, 3])
1209/6: arr = np.array([[1 , 2 , 3] , [4 , 5 , 6]])
1209/7: arr
1209/8: type(arr)
1209/9: arr = np.array((1 , 2 , 3))
1209/10: arr
1209/11: arr = np.array([[1 , 2 , 3 , 4] , [5 ,6 , 7 , 8] , [9 , 10 , 11 , 12] , [13 , 14 , 15 , 16]])
1209/12: arr
1209/13: arr = np.array([[1 , 2 , 3 , 4] , [5 ,6 , 7 , 8] , [9 , 10 , 11 , 12] , [13 , 14 , 15]])
1209/14: arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, "16"]])
1209/15: arr
1209/16: arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])
1209/17: arrpy = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
1209/18: arrpy[2]
1209/19: arrpy[2][2]
1209/20: arr[2 , 2]
1209/21: arrpy[2][1]
1209/22: arr[2 , 1]
1209/23: arr[:2 , :2]
1209/24: arr
1209/25: arr[[1 , 1 , 0 , 3] , [3 , 2 , 1 , 0]]
1209/26: a = np.array([[1, 2], [3, 4]])
1209/27: b = np.array([[4 , 3] , [2 , 1]])
1209/28: print(a)
1209/29: print(b)
1209/30: pyb = [[4, 3], [2, 1]]
1209/31: pya = [[1, 2], [3, 4]]
1209/32: type(a)
1209/33: a + 1
1209/34: type(a + 1)
1209/35: a + 1
1209/36: a
1209/37: pya + 1
1209/38: b - 2
1209/39: b
1209/40: a
1209/41: a.sum()
1209/42: b.sum()
1209/43: b
1209/44: a + b
1209/45: a
1209/46: b
1209/47: pya + pyb
1209/48: pya
1209/49: pyb
1209/50: x = np.array([1, 2])
1209/51: print(x)
1209/52: type(x)
1209/53: x.dtype
1209/54: y = np.array([1.0, 2.0])
1209/55: type(y)
1209/56: y.dtype
1209/57: z = np.array([1, 2] , dtype = np.float64)
1209/58: z
1209/59: z.dtype
1209/60: v = np.array([1 , 2] , dtype = np.imag)
1209/61: v = np.array([1 + j , 2 - j])
1209/62: v = np.array([1 + 1j , 2 - 1j])
1209/63: v
1209/64: print(v)
1209/65: v.dtype
1209/66: v = np.array([1 , 2] , dtype = np.complex128)
1209/67: v
1209/68: v = np.array([-1 , -2] , dtype = np.complex128)
1209/69: v
1209/70: np.sqrt(v)
1209/71: a = np.array([[1, 2], [3, 4]])
1209/72: print(a)
1209/73: print(a.T)
1209/74: b = np.zeros([2 , 2] , dtype = np.float64)
1209/75: b
1209/76: b = np.zeros([200 , 200] , dtype = np.float64)
1209/77: print(b)
1209/78: b = np.ones([200 , 200] , dtype = np.float64)
1209/79: print(b)
1209/80: b = np.zeros([200, 200], dtype=np.float64)
1209/81: print(b)
1209/82: print(b + 1.0)
1209/83: b.dtype
1209/84: b.shape
1209/85: np.array([1, 2]).shape
1209/86: np.array([1, 2 , 3]).shape
1209/87: np.array([[1], [2] , [3]]).shape
1209/88: np.array([[[1]], [[2]] , [[3]]]).shape
1210/1: import numpy as np
1210/2: np.array([1, 2, 3, 3, 4, 4, 5, 5, 5])
1210/3: arr = np.array([1, 2, 3, 3, 4, 4, 5, 5, 5])
1210/4: np.argmax(arr = 3)
1210/5: np.argmax(arr == 3)
1210/6: np.argmax(arr == 2)
1210/7: np.argmin(arr == 2)
1210/8: np.argmin(arr == 1)
1210/9: np.argmin(arr == 2)
1210/10: np.searchsorted(arr , 2)
1210/11: arr
1210/12: np.searchsorted(arr , 1)
1210/13: np.searchsorted(arr , 2)
1210/14: np.searchsorted(arr , 3)
1210/15: np.searchsorted(arr , 4)
1210/16: np.searchsorted(arr , 5)
1211/1: import numpy as np
1211/2: import matplotlib.pyplot as plt
1211/3: hits = np.load("trajHits_13.npy")
1211/4: cat trajHits_13.npy
1211/5: hits
1212/1: import numpy as np
1213/1: cd ..
1214/1: import numpy as np
1214/2: import matplotlib.pyplot as plt
1214/3: hits = np.load("trajHits_13.npy")
1214/4: geom = np.load("trajGeom_13.npy")
1214/5: hits = np.load("trajHits_16.npy")
1214/6: geom = np.load("trajGeom_16.npy")
1214/7: hits
1214/8: geom
1214/9: hits = np.load("trajHits_21.npy")
1214/10: geom = np.load("trajGeom_21.npy")
1214/11: geom
1214/12: hits
1214/13: geom = np.load("trajGeom_22.npy")
1214/14: geom
1214/15: geom = np.load("trajGeom_23.npy")
1214/16: geom
1214/17: geom = np.load("trajGeom_25.npy")
1214/18: geom
1214/19: geom = np.load("trajGeom_25.npy")
1214/20: geom
1214/21: np.load("trajGeom_25.npy")
1214/22: np.load("trajGeom_26.npy")
1214/23: np.load("trajGeom_27.npy")
1214/24: np.load("trajGeom_28.npy")
1214/25: np.load("trajGeom_29.npy")
1214/26: np.load("trajGeom_30.npy")
1214/27: np.load("trajGeom_31.npy")
1214/28: np.load("trajGeom_32.npy")
1214/29: np.load("trajGeom_33.npy")
1214/30: np.load("trajGeom_34.npy")
1214/31: np.load("trajGeom_35.npy")
1214/32: np.load("trajGeom_36.npy")
1214/33: np.load("trajGeom_37.npy")
1214/34: np.load("trajGeom_38.npy")
1214/35: np.load("trajGeom_44.npy")
1214/36: np.load("trajGeom_45.npy")
1214/37: np.load("trajGeom_94.npy")
1214/38: np.load("trajHits_94.npy")
1214/39: np.load("trajGeom_82.npy")
1214/40: np.load("trajHits_82.npy")
1214/41: np.load("trajGeom_82.npy")
1214/42: np.load("trajGeom_83.npy")
1214/43: np.load("trajGeom_71.npy")
1214/44: np.load("trajHits_71.npy")
1215/1: import matplotlib.pyplot as plt
1215/2: import numpy as np
1215/3: np.load("trajHits_94.npy")
1215/4: hits = np.load("trajHits_94.npy")
1215/5: plt.scatter(hits[: , 0] , hits[: , 1] , hits[: , 2])
1215/6: hits[: , 0]
1215/7: hits[: , 1]
1215/8: hits[: , 2]
1215/9: fig = plt.figure()
1215/10: ax = plt.axes(projection="3D")
1215/11: ax = plt.axes(projection="3d")
1216/1: import numpy as np
1216/2: import matplotlib.pyplot as plt
1216/3: hits = np.load("trajHits_94.npy")
1216/4: ax = plt.axes(projection="3d")
1216/5: ax.scatter3D(hits[: , 0] , hits[: , 1] , hits[: , 2])
1216/6: plt.show()
1216/7: plt.xlim([-2.0 , 2.0])
1216/8: plt.ylim([-2.0 , 2.0])
1216/9: plt.zlim([-7.0 , 7.0])
1216/10:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-2.0, 2.0)
    ax.set_ylim3d(-2.0, 2.0)
    ax.set_zlim3d(-7.0, 7.0)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2])
    plt.show()
1216/11: plotnum(94)
1217/1: import numpy as np
1217/2: import matplotlib.pyplot as plt
1217/3:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-2.0, 2.0)
    ax.set_ylim3d(-2.0, 2.0)
    ax.set_zlim3d(-7.0, 7.0)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2])
    plt.show()
1217/4: plotnum(94)
1217/5: plotnum(92)
1217/6: plotnum(91)
1217/7: plotnum(82)
1217/8:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2])
    plt.show()
1217/9: plotnum(94)
1217/10: plotnum(94)
1217/11:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    print(geom)
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2])
    plt.show()
1217/12: plotnum(91)
1217/13: plotnum(2)
1217/14: plotnum(3)
1217/15: from unraveltools import _unravelWithParameters
1217/16:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    unra = _unravelWithParameters(rx, ry, nu, hits[0, 3], hits)
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2], color="green")
    ax.scatter3D(unra[:, 0], unra[:, 1], unra[:, 2], color="blue")
    plt.show()
1217/17: plotnum(3)
1217/18:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    unra = _unravelWithParameters(rx, ry, nu, hits[0, 2], hits)
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2], color="green")
    ax.scatter3D(unra[:, 0], unra[:, 1], unra[:, 2], color="blue")
    plt.show()
1217/19:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    unra = _unravelWithParameters(rx, ry, nu, hits[0, 2], hits)
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2], color="green")
    ax.scatter3D(unra[:, 0], unra[:, 1], unra[:, 2], color="blue")
    plt.show()
1217/20: plotnum(3)
1217/21: plotnum(93)
1217/22: plotnum(93)
1217/23: plotnum(94)
1217/24:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    print("nu : ", nu)
    unra = _unravelWithParameters(rx, ry, nu, hits[0, 2], hits)
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2], color="green")
    ax.scatter3D(unra[:, 0], unra[:, 1], unra[:, 2], color="blue")
    plt.show()
1217/25: plotnum(94)
1217/26: plotnum(71)
1217/27: plotnum(72)
1217/28: plotnum(73)
1217/29: plotnum(74)
1217/30: plotnum(81)
1217/31: plotnum(82)
1218/1: import matplotlib.pyplot as plt
1218/2: import numpy as np
1218/3:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    print("nu : ", nu)
    unra = _unravelWithParameters(rx, ry, nu, hits[0, 2], hits)
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2], color="green")
    ax.scatter3D(unra[:, 0], unra[:, 1], unra[:, 2], color="blue")
    plt.show()
1218/4: plotnum(94)
1218/5: from unraveltools import _unravelWithParameters
1218/6: plotnum(94)
1218/7: plotnum(93)
1218/8: plotnum(82)
1218/9: plotnum(83)
1218/10: plotnum(83)
1219/1: import numpy as np
1219/2: import matplotlib.pyplot as plt
1219/3:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    print("nu : ", nu)
    unra = _unravelWithParameters(rx, ry, nu, hits[0, 2], hits)
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2], color="green")
    ax.scatter3D(unra[:, 0], unra[:, 1], unra[:, 2], color="blue")
    plt.show()
1219/4: plotnum(83)
1219/5: from unraveltools import _unravelWithParameters
1219/6: plotnum(83)
1219/7: plotnum(94)
1219/8:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    print("nu : ", nu)
    unra = _unravelWithParameters(-rx, -ry, nu, hits[0, 2], hits)
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2], color="green")
    ax.scatter3D(unra[:, 0], unra[:, 1], unra[:, 2], color="blue")
    plt.show()
1219/9: plotnum(94)
1219/10:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    print("nu : ", nu)
    unra = _unravelWithParameters(rx, ry, -nu, hits[0, 2], hits)
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2], color="green")
    ax.scatter3D(unra[:, 0], unra[:, 1], unra[:, 2], color="blue")
    plt.show()
1219/11: plotnum(94)
1219/12:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    print("nu : ", nu)
    unra = _unravelWithParameters(-rx, -ry, -nu, hits[0, 2], hits)
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2], color="green")
    ax.scatter3D(unra[:, 0], unra[:, 1], unra[:, 2], color="blue")
    plt.show()
1219/13: plotnum(94)
1219/14:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    print("nu : ", nu)
    print("geom : ", geom)
    unra = _unravelWithParameters(-rx, -ry, -nu, hits[0, 2], hits)
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2], color="green")
    ax.scatter3D(unra[:, 0], unra[:, 1], unra[:, 2], color="blue")
    plt.show()
1219/15: plotnum(94)
1219/16:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    vx, vy, vz = geom[5:]
    print("nu : ", nu)
    unra = _unravelWithParameters(vx - (rx - vx), vy - (ry - vy), nu, hits[0, 2], hits)
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2], color="green")
    ax.scatter3D(unra[:, 0], unra[:, 1], unra[:, 2], color="blue")
    plt.show()
1219/17: plotnum(94)
1219/18: plotnum(93)
1219/19:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    print(geom)
    unra = _unravelWithParameters(rx, ry, nu, hits[0, 2], hits)
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2], color="green")
    ax.scatter3D(unra[:, 0], unra[:, 1], unra[:, 2], color="blue")
    plt.show()
1219/20: plotnum(93)
1219/21: plotnum(92)
1219/22: plotnum(93)
1219/23: plotnum(94)
1220/1: import numpy as np
1220/2: import matplotlib.pyplot as plt
1220/3: from unraveltools import _unravelWithParameters
1220/4:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    print(geom)
    unra = _unravelWithParameters(rx, ry, nu, hits[0, 2], hits)
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2], color="green")
    ax.scatter3D(unra[:, 0], unra[:, 1], unra[:, 2], color="blue")
    plt.show()
1220/5: plotnum(94)
1220/6: plotnum(93)
1220/7: plotnum(92)
1220/8: plotnum(91)
1220/9: plotnum(11)
1220/10: plotnum(12)
1220/11: plotnum(13)
1220/12: plotnum(14)
1220/13: plotnum(15)
1220/14: plotnum(16)
1220/15: plotnum(17)
1220/16: plotnum(18)
1220/17: plotnum(19)
1220/18: plotnum(20)
1220/19: plotnum(83)
1220/20: plotnum(82)
1220/21: plotnum(55)
1220/22: plotnum(54)
1220/23: plotnum(4)
1220/24: plotnum(83)
1221/1: import numpy as np
1221/2: 52 * 0.02
1221/3: hit = np.array([-0.28546118, 0.10389963, 2.9485])
1221/4: np.floor(hit[0] / 0.02) + 52
1221/5: np.floor(hit[1] / 0.02) + 52
1221/6: np.floor(hit[2] / 0.02) + 148
1221/7: 2.9485 - 2.5485
1221/8: 2.5485 - 1.498
1222/1: import numpy as np
1222/2: import matplotlib.pyplot as plt
1222/3: from unraveltools import _unravelWithParameters
1222/4:
def plotnum(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    print(geom)
    unra = _unravelWithParameters(rx, ry, nu, hits[0, 2], hits)
    ax = plt.axes(projection="3d")
    ax.set_xlim3d(-1.2, 1.2)
    ax.set_ylim3d(-1.2, 1.2)
    ax.set_zlim3d(-3.3, 3.3)
    ax.scatter3D(hits[:, 0], hits[:, 1], hits[:, 2], color="green")
    ax.scatter3D(unra[:, 0], unra[:, 1], unra[:, 2], color="blue")
    plt.show()
1222/5:
def plotnum1(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    print(geom)
    unra = _unravelWithParameters(rx, ry, nu, hits[0, 2], hits)
    plt.scatter(unra[:, 0], unra[:, 1], unra[:, 2])
    plt.show()
1222/6: plotnum1(82)
1222/7:
def plotnum1(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    print(geom)
    unra = _unravelWithParameters(rx, ry, nu, hits[0, 2], hits)
    plt.scatter(unra[:, 0], unra[:, 1])
    plt.show()
1222/8: plotnum1(82)
1222/9: plotnum(82)
1222/10: q
1222/11: q
1222/12: q
1222/13:
def plotnum1(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    print(geom)
    unra = _unravelWithParameters(rx, ry, nu, hits[0, 2], hits)
    print(unra)
    # plt.scatter(unra[:, 0], unra[:, 1])
    # plt.show()
1222/14: plotnum(82)
1222/15: plotnum1(82)
1222/16:
def plotnum1(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    print(geom)
    unra = _unravelWithParameters(rx, ry, nu, hits[0, 2], hits)
    print(unra)
    plt.scatter(unra[:, 0], unra[:, 1])
    plt.show()
1222/17: plotnum1(82)
1222/18: plotnum1(82)
1222/19:
def plotnum1(i):
    hits = np.load("trajHits_" + str(i) + ".npy")
    geom = np.load("trajGeom_" + str(i) + ".npy")
    rx, ry, nu = geom[2:5]
    print(geom)
    unra = _unravelWithParameters(rx, ry, nu, hits[0, 2], hits)
    print(unra)
1222/20: plotnum1(55)
1222/21: plotnum1(48)
1223/1: import os
1223/2: os.mkdir
1224/1: import os
1224/2: os.listdir("/home/kacper/Documents")
1224/3: a = [1, 3, 2, 3]
1224/4: a.sort
1224/5: a.sort()
1224/6: a
1224/7: os.path.join("1" , "2" , "3")
1225/1: import numpy as np
1225/2: b = np.load("buffered_frames.npy")
1225/3: b.shape
1225/4: b.dtype
1225/5: b[0]
1226/1: import numpy as np
1226/2: a = np.load("output.npy")
1226/3: a
1227/1: import os
1227/2: ?os.path.mkdir
1227/3: ?os.mkdir
1228/1: from datetime import time
1228/2: time.time()
1228/3: time.time
1223/3: import time
1223/4: time.time()
1229/1: import numpy as np
1230/1: import numpy as np
1230/2: a = np.load("buffered_frames_time.npy")
1230/3: a
1230/4: a.dtype
1230/5: a[-1] - a[-2]
1230/6: a[-1] - a[-3]
1230/7: a[-1] - a[-4]
1231/1: a = 10
1231/2: 16.0 / 9.0
1231/3: 1920.0 / 1080.0
1232/1: import numpy as np
1232/2: ls
1232/3: np.load("buffered_frames.npy").shape
1232/4: np.load("buffered_frames_time.npy").shape
1232/5: np.load("d_buffered_frames.npy").shape
1232/6: np.load("buffered_frames.npy").shape
1232/7: np.load("buffered_frames_time.npy").shape
1232/8: np.load("d_buffered_frames.npy").shape
1232/9: np.load("buffered_frames.npy").shape
1232/10: np.load("buffered_frames_time.npy").shape
1232/11: np.load("d_buffered_frames.npy").shape
1232/12: np.load("d_buffered_frames_time.npy").shape
1233/1: import numpy as np
1233/2: np.load("output.npy").shape
1233/3: np.load("d_output.npy").shape
1234/1: import numpy as np
1234/2: np.load("buffered_frames.npy").shape
1234/3: np.load("buffered_frames_time.npy").shape
1234/4: np.load("d_buffered_frames.npy").shape
1234/5: np.load("d_buffered_frames_time.npy").shape
1235/1: import numpy as np
1235/2: np.load("output.npy").shape
1235/3: np.load("d_output.npy").shape
1236/1: "this is a lower case string".upper()
1237/1: import tensorflow as tf
1237/2: ?tf.nn.conv2d
1237/3: import matplotlib.pyplot as plt
1237/4: from sklearn.datasets import load_sample_image
1237/5: china = load_sample_image("China.jpg") / 255
1237/6: china = load_sample_image("Chiny.jpg") / 255
1237/7: china = load_sample_image("china.jpg") / 255
1237/8: china
1237/9: type(china)
1237/10: china = load_sample_image("china.jpg") / 255
1237/11: flower = load_sample_image("flower.jpg") / 255
1237/12: china.shape
1237/13: ?plt.imshow
1237/14: plt.imshow(china[:, :, 0])
1237/15: plt.show()
1237/16: plt.imshow(flower[:, :, 0])
1237/17: plt.show()
1237/18: import numpy as np
1237/19: images = np.array([china , flower])
1237/20: images.shape
1237/21: batch_size, height, width, channels = images.shape
1237/22: filters = np.zeros(shape = (7 , 7 , channels , 2) , dtype = np.float32)
1237/23: filters[:, 7, :, 0] = 1.0
1237/24: filters[:, 3, :, 0] = 1.0
1237/25: filters = np.zeros(shape=(7, 7, channels, 2), dtype=np.float32)
1237/26: filters[:, 3, :, 0] = 1.0
1237/27: filters[3, :, :, 1] = 1.0
1237/28:
def showarray(a):
    plt.imshow(a)
    plt.show()
1237/29: filters.shape
1237/30: showarray(filters[:, :, 0, 0])]
1237/31: showarray(filters[:, :, 0, 0])
1237/32: showarray(filters[:, :, 0, 1])
1237/33: outputs = tf.nn.conv2d(images, filters, strides=1, padding="SAME")
1237/34: outputs
1237/35: type(outputs)
1237/36: o = outputs.numpy()
1237/37: o.shape
1237/38: showarray(o[0, :, :, 0])
1237/39: showarray(o[0, :, :, 1])
1237/40: showarray(o[1, :, :, 0])
1237/41: showarray(o[1, :, :, 1])
1237/42: images.shape
1237/43: import tensorflow.keras as keras
1237/44: ?keras.layers.Conv2D
1237/45: model = keras.models.Sequential([keras.layers.Conv2D(filters = 32 , kernel_size=3 , strides=1 , padding="same" , activation="relu")])
1237/46: model.summary()
1237/47: model.build()
1237/48: ?model.build
1237/49: model.build(input_shape=china.shape)
1237/50: model.build(input_shape=images.shape)
1237/51: model.summary()
1237/52: model.build(input_shape=(100 , 100))
1237/53: ?model.summary
1237/54: model.summary(expand_nested = True)
1237/55: model.summary(expand_nested = True , show_trainable=True)
1237/56: model.summary(expand_nested = True , show_trainable=True , print_fn=True)
1237/57:
model = keras.models.Sequential(
    [
        keras.layers.Conv2D(
            filters=200, kernel_size=5, strides=1, padding="same", activation="relu"
        )
    ]
)
1237/58: model.build(input_shape=(150 , 100 , 3))
1237/59: model.build(input_shape=(3 , 150 , 100))
1237/60: model.build(input_shape=(150 , 100))
1237/61: model = keras.models.Sequential()
1237/62:
model.add(
    keras.layers.Conv2D(
        filters=200, kernel_size=5, strides=1, padding="same", activation="relu"
    )
)
1237/63: model = keras.models.Sequential()
1237/64:
model.add(
    keras.layers.Conv2D(
        filters=200,
        kernel_size=5,
        strides=1,
        padding="same",
        activation="relu",
        input_shape=(286, 384, 1),
    )
)
1237/65: model.summary()
1237/66:
model.add(
    keras.layers.Conv2D(
        filters=200,
        kernel_size=5,
        strides=1,
        padding="same",
        activation="relu",
        input_shape=(150, 100, 1),
    )
)
1237/67: model = keras.models.Sequential()
1237/68:
model.add(
    keras.layers.Conv2D(
        filters=200,
        kernel_size=5,
        strides=1,
        padding="same",
        activation="relu",
        input_shape=(150, 100, 1),
    )
)
1237/69: model.build()
1237/70: model.summary(expand_nested=True, show_trainable=True, print_fn=True)
1237/71: model.summary(expand_nested=True, show_trainable=True)
1237/72: model = keras.models.Sequential()
1237/73:
model.add(
    keras.layers.Conv2D(
        filters=200,
        kernel_size=5,
        strides=1,
        padding="same",
        activation="relu",
        input_shape=(150, 100, 3),
    )
)
1237/74: model.build()
1237/75: model.summary(expand_nested=True, show_trainable=True)
1237/76: ?keras.layers.Conv2D
1238/1: from hangar
1239/1: import tensorflow as tf
1239/2: import tensorflow.keras as keras
1239/3: import tensorflow as tf
1239/4: ?tf.data.Dataset.list_files
1239/5: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1239/6: dataset = tf.data.Dataset.list_files(pth + "*/input/buffered_frames.npy")
1239/7: dataset
1239/8:
for el in dataset:
    print(el)
1239/9: dataset = tf.data.Dataset.list_files(pth + "*/input/buffered_frames.npy" , shuffle=True)
1239/10: input = tf.data.Dataset.list_files(pth + "*/input/buffered_frames.npy" , shuffle=True)
1239/11: ipt = tf.data.Dataset.list_files(pth + "*/input/buffered_frames.npy" , shuffle=True)
1239/12: ipt
1239/13: ipt = ipt.map(lambda pth: np.load(pth))
1239/14: import numpy as np
1239/15: ipt = ipt.map(lambda pth: np.load(pth))
1239/16: ipt = tf.data.Dataset.list_files(pth + "*/input/buffered_frames.npy", shuffle=True)
1239/17:
for el in ipt:
    print(str(el))
1239/18:
for el in ipt:
    print(str(el[0]))
1239/19: ipt[0]
1239/20: els = []
1239/21:
for el in ipt:
    els.append(el)
1239/22: els[0]
1239/23: els[0].numpy()
1239/24: type(els[0].numpy())
1239/25: ipt = tf.data.Dataset.list_files(pth + "*/input/buffered_frames.npy", shuffle=True)
1239/26: ipt = ipt.map(lambda pth: np.load(pth.numpy()))
1239/27: ipt = ipt.map(lambda pth: np.load(pth.numpy))
1239/28: ipt = ipt.map(lambda pth: print(pth))
1239/29: ptf
1239/30: pth
1239/31: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1239/32: list_fls = tf.data.Dataset.list_files(pth + "*", shuffle=False)
1239/33: list_fls
1239/34: ?tf.data.Dataset.list_files
1239/35: ?tf.data.Dataset.from_tensor_slices
1239/36: ?tf.data.Dataset.from_tensor_slices
1239/37: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1239/38: list_fls = tf.data.Dataset.list_files(pth + "[!I]*", shuffle=False)
1239/39:
for els in list_fls:
    print(els.numpy())
1239/40: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1239/41: list_fls = tf.data.Dataset.list_files(pth + "[!I]*", shuffle=False)
1239/42: len(list_fls)
1239/43: ?list_fls.shuffle
1239/44: list_fls = list_fls.shuffle(len(list_fls), reshuffle_each_iteration=False)
1239/45:
for file in list_fls:
    print(file.numpy())
1239/46:
def process_path(file_path):
    return file_path
1239/47: new_fls = list_fls.map(process_path)
1239/48:
for file in new_fls:
    print(file.numpy())
1239/49:
def process_path(file_path):
    return file_path.decode("UTF-8")
1239/50: new_fls = list_fls.map(process_path)
1239/51:
def process_path(file_path):
    return file_path.numpy().decode("UTF-8")
1239/52: new_fls = list_fls.map(process_path)
1239/53: tf.__version__
1239/54: tf.config.run_functions_eagerly(True)
1239/55: new_fls = list_fls.map(process_path)
1240/1: %load_ext autoreload
1240/2: %autoreload 2
1240/3: import os
1240/4: os.listdir("/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/")
1240/5: os.listdir("/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/").remove("INFO")
1240/6: fls = os.listdir("/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/")
1240/7: fls.remove("INFO")
1240/8: fls
1240/9: import random
1240/10: ?random.shuffle
1240/11: random.Random
1240/12: random.Random(4)
1240/13: random.Random(4).shuffle([1 , 2 , 3 , 4])
1240/14: x = [1 , 2 , 3 , 4]
1240/15: random.Random(4).shuffle(x)
1240/16: x
1240/17: random.Random(4).shuffle(x)
1240/18: x
1240/19: x = [1, 2, 3, 4]
1240/20: random.Random(4).shuffle(x)
1240/21: x = [1, 2, 3, 4]
1240/22: random.Random(4).shuffle(x)
1240/23: x
1240/24: x = [1, 2, 3, 4]
1240/25: random.Random(0).shuffle(x)
1240/26: x
1240/27: [1 , 2 , 3 , 4][2:]
1240/28: [1 , 2 , 3 , 4][2:3]
1240/29: map(lambda x : 2 * x , [1 ,2 , 3 , 4])
1240/30: np.array(map(lambda x: 2 * x, [1, 2, 3, 4]))
1240/31: import numpy as np
1240/32: np.array(map(lambda x: 2 * x, [1, 2, 3, 4]))
1240/33: from simpleTools import InputGenerator
1240/34: from simpleTools import InputGenerator
1240/35: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1240/36: ?InputGenerator
1240/37: ?InputGenerator
1240/38: data = InputGenerator(pth, 1)
1240/39:
for el in data:
    print(type(el))
1240/40: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1240/41: data = InputGenerator(pth, 1)
1240/42:
for el in data:
    print(type(el))
1240/43: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1240/44: data = InputGenerator(pth, 1)
1240/45:
for el in data:
    print(type(el))
1240/46: data[0]
1240/47: data[10]
1240/48: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1240/49: data = InputGenerator(pth, 1)
1240/50: data[10]
1240/51: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1240/52: data = InputGenerator(pth, 1)
1240/53: data[10]
1240/54: 0.2989 + 0.5870 + 0.1140
1240/55: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1240/56: data = InputGenerator(pth, 1)
1240/57: data[10]
1240/58: data[10][0]
1240/59: data = InputGenerator(pth, 1)
1240/60: data[10][0]
1240/61: data = InputGenerator(pth, 1)
1240/62: data[10][0]
1240/63: data = InputGenerator(pth, 1)
1240/64: data[10][0]
1240/65: data = InputGenerator(pth, 1)
1240/66: data[10][0]
1240/67: data = InputGenerator(pth, 1)
1240/68: data[10][0]
1240/69: data[10][1]
1240/70: data = InputGenerator(pth, 1)
1240/71: data[10][1]
1240/72: data[10][1][100:200 , 100:200]
1240/73: data[10][1].shape
1240/74: data[10][0].shape
1240/75: data[10][1][0 , 100:200 , 100:200]
1240/76: import matplotlib.pyplot as plt
1240/77: plt.imshow(data[10][1][0])
1240/78: plt.show()
1240/79: data = InputGenerator(pth, 1)
1240/80: data[10][1][0, 100:200, 100:200]
1240/81: data[10][0]
1240/82: data[10][1]
1240/83: data[10][1].dtype
1240/84: data = InputGenerator(pth, 1)
1240/85: data[10][1].dtype
1240/86: ?np.floor
1240/87: np.floor(123.0)
1240/88: [0 , 1 , 2 , 3 , 4 , 5 , 6][1:None]
1240/89: np.floor(2.5)
1240/90: np.ceil(3.1)
1240/91: np.floor(3.1)
1240/92: np.ceil(2.5)
1240/93: np.floor(3.1)
1240/94: np.ceil(2.5)
1240/95: np.floor(4.1)
1240/96: np.ceil(4.1)
1240/97: np.floor(5.5)
1240/98: [0 , 1 , 2 , 3 , 4 , 5 , 6][None:None]
1240/99: (np.floor(3.1) , np.ceil(5.5))
1240/100: (np.floor(5.5) , np.ceil(10.5))
1240/101: (np.ceil(3.1) , np.floor(5.5))
1240/102: (np.ceil(5.5) , np.floor(10.5))
1240/103: (np.floor(3.1) , np.floor(5.5))
1240/104: (np.floor(5.5) , np.floor(10.5))
1240/105: data = InputGenerator(pth, 1)
1240/106: data = InputGenerator(pth, 1)
1240/107: len(data)
1240/108: data[64]
1240/109: data = InputGenerator(pth, 1 , end = 0.8)
1240/110: data = InputGenerator(pth, 1, end=0.8)
1240/111: len(data)
1240/112: data = InputGenerator(pth, 1, end=0.8 , seed = 1)
1240/113: len(data)
1240/114: data.fls
1240/115: data = InputGenerator(pth, 1, start = 0.8 , seed = 1)
1240/116: f1 = InputGenerator(pth, 1, end = 0.8 , seed = 1)
1240/117: f1 = InputGenerator(pth, 1, end=0.8, seed=1).fls
1240/118: f2 = InputGenerator(pth, 1, start=0.8, seed=1).fls
1240/119: f1
1240/120: f2
1240/121: f1 + f2
1240/122: len(f1 + f2)
1240/123: list(map(lambda x: int(x), f1 + f2))
1240/124: list(map(lambda x: int(x), f1 + f2)).sort()
1240/125: l = list(map(lambda x: int(x), f1 + f2))
1240/126: l.sort()
1240/127: l
1240/128: data = InputGenerator(pth, 1, start=0.8, seed=1)
1240/129: data.show(2)
1240/130: data.show(2)
1240/131: data.show(2)
1240/132: data = InputGenerator(pth, 1, start=0.8, seed=1)
1240/133: data.show(2)
1240/134: data.show(2)
1240/135: data.show(2)
1240/136: data = InputGenerator(pth, 1, start=0.8, seed=1)
1240/137: data.show(2)
1240/138: data.show(2)
1240/139: f, axarr = plt.subplots(1, 2)
1240/140: axarr
1240/141: axarr[0]
1240/142: ?plt.imshow
1240/143: data.show(2)
1240/144: data.show(2)
1240/145: model = keras.models.Sequential()
1240/146: import tensorflow as tf
1240/147: import tensorflow.keras as keras
1240/148: model = keras.models.Sequential()
1240/149: ?keras.layers.Conv2D
1240/150: model = keras.models.Sequential()
1240/151: data = InputGenerator(pth, 1, start=0.8, seed=1)
1240/152: data.show(2)
1240/153: data.show(2)
1240/154: data = InputGenerator(pth, 1, start=0.8, seed=1)
1240/155: data.show(2)
1240/156: data = InputGenerator(pth, 1, start=0.8, seed=1)
1240/157: data.show(2)
1240/158:
for x, y in data:
    print(x.shape, y.shape)
1240/159: data = InputGenerator(pth, 5, start=0.8, seed=1)
1240/160:
for x, y in data:
    print(x.shape, y.shape)
1240/161: ?keras.layers.Conv2D
1240/162: a = np.array([[1, 2], [3, 4]])
1240/163: a.shape
1240/164: a
1240/165: a.reshape((..., 1))
1240/166: a[... , 1]
1240/167: a[... , 2]
1240/168: a[... , 0]
1240/169: a
1240/170: a[... , 0]
1240/171: a[... , 1]
1240/172: a[: , 1]
1240/173: a[: , 0]
1240/174: a[: , : , ...]
1240/175: a[:, :, ...].shape
1240/176: a[:, :, ... , ...].shape
1240/177: data = InputGenerator(pth, 5, start=0.8, seed=1)
1240/178:
for x, y in data:
    print(x.shape, y.shape)
1240/179: data = InputGenerator(pth, 1, start=0.8, seed=1)
1240/180:
for x, y in data:
    print(x.shape, y.shape)
1240/181: model = keras.models.Sequential()
1240/182:
model.add(
    keras.layers.Conv2D(
        1, 5, activation="relu", padding="same", input_shape=(1080, 1920, 1)
    )
)
1240/183: model.summary(expand_nested=True, show_trainable=True)
1240/184: model.compile(optimizer="adam", loss=keras.losses.MeanSquaredError())
1240/185: train = InputGenerator(pth, 10, start=0.8, seed=1)
1240/186: train = InputGenerator(pth, 8, start=0.8, seed=1)
1240/187: train = InputGenerator(pth, 8, start=0.8, seed=1)
1240/188: train = InputGenerator(pth, 8, end=0.8, seed=1)
1240/189: len(train)
1240/190: train = InputGenerator(pth, 8, end=0.8, seed=1)
1240/191: len(train)
1240/192: [0 , 1 , 2 , 3 , 4 , 5][None : 3]
1240/193: [0 , 1 , 2 , 3 , 4 , 5][None : 4]
1240/194: train = InputGenerator(pth, 8, end=0.8, seed=1)
1240/195: train = InputGenerator(pth, 8, end=0.8, seed=1)
1240/196: valid = InputGenerator(pth, 8, start=0.8, seed=1)
1240/197: len(train)
1240/198: len(valid)
1240/199: ?model.fit_generator
1240/200: ?model.fit
1240/201: model.fit(x=train, epochs=50, validation_data=valid)
1240/202: train = InputGenerator(pth, 1, end=0.8, seed=1)
1240/203: valid = InputGenerator(pth, 1, start=0.8, seed=1)
1240/204: model = keras.models.Sequential()
1240/205:
model.add(
    keras.layers.Conv2D(
        1, 5, activation="relu", padding="same", input_shape=(1080, 1920, 1)
    )
)
1240/206: model.compile(optimizer="adam", loss=keras.losses.MeanSquaredError())
1240/207: model.fit(x=train, epochs=50, validation_data=valid)
1240/208: model = keras.models.Sequential()
1240/209:
model.add(
    keras.layers.Conv2D(
        1, 15, activation="relu", padding="same", input_shape=(1080, 1920, 1)
    )
)
1240/210: model.compile(optimizer="adam", loss=keras.losses.MeanSquaredError())
1240/211: model.summary()
1240/212: model.fit(x=train, epochs=50, validation_data=valid)
1240/213: model.fit(x=train, epochs=50, validation_data=valid)
1240/214: test[0][0]
1240/215: valid[0][0]
1240/216: valid[0][0].shape
1240/217: model.summary()
1240/218: model(valid[0][0])
1240/219: model(valid[0][0]).shape
1240/220: tr = model(valid[0][0]).shape
1240/221: plt.imshow(tr[0, :, :, 0])
1240/222: tr
1240/223: tr = model(valid[0][0])
1240/224: plt.imshow(tr[0, :, :, 0])
1240/225: plt.show()
1240/226: plt.show()
1240/227: plt.imshow(tr[0, :, :, 0])
1240/228: plt.show()
1240/229: plt.imshow(valid[0][0][: , : , 0])
1240/230: plt.show()
1240/231: valid[0][0].shape
1240/232: valid[0][0][0 , : , : , 0]
1240/233: valid[0][0][0, :, :, 0].shape
1240/234: plt.imshow(valid[0][0][0, :, :, 0])
1240/235: plt.show()
1240/236: tr
1240/237: model = keras.models.Sequential()
1240/238:
model.add(
    keras.layers.Conv2D(
        1, 15, activation="relu", padding="same", input_shape=(1080, 1920, 1)
    )
)
1240/239:
model.add(
    keras.layers.Conv2D(
        1, 3, activation="relu", padding="same", input_shape=(1080, 1920, 1)
    )
)
1240/240: model.compile(optimizer="adam", loss=keras.losses.MeanSquaredError())
1240/241: model.summary()
1240/242: model.fit(x=train, epochs=2, validation_data=valid)
1240/243: tr = model(valid[0][0])
1240/244: plt.imshow(tr[0, :, :, 0])
1240/245: plt.show()
1240/246: ?plt.imshow
1240/247: import matplotlib
1240/248: ?matplotlib.colors.Colormap
1240/249: ?matplotlib.colors.cnames
1240/250: plt.imshow(tr[0, :, :, 0], cmap="Greys")
1240/251: plt.show()
1240/252: model = keras.models.Sequential()
1240/253:
model.add(
    keras.layers.Conv2D(
        1, 15, activation="relu", padding="same", input_shape=(1080, 1920, 1)
    )
)
1240/254:
model.add(
    keras.layers.Conv2D(
        1, 3, activation="relu", padding="same", input_shape=(1080, 1920, 1)
    )
)
1240/255: model.compile(optimizer="adam", loss=keras.losses.BinaryCrossentropy(from_logits=True))
1240/256: model.fit(x=train, epochs=2, validation_data=valid)
1240/257: train[0]
1240/258: train[0][1]
1240/259: train[0][1].shape
1240/260: l = keras.losses.BinaryFocalCrossentropy(from_logits=False)
1240/261: l(train[0][1] , train[0][2])
1240/262: l(train[0][0] , train[0][1])
1240/263: l(train[0][0], train[0][1]).numpy()
1240/264: l(train[0][1], train[0][0])
1240/265: l(train[0][1], train[0][0]).numpy()
1240/266: l(train[0][0], train[0][0]).numpy()
1240/267: l(train[0][1] , train[0][1])
1240/268: train[0][1].dtype
1240/269: l(train[0][1] , train[0][1])
1240/270: l(train[0][1] , train[0][0])
1240/271: l(train[0][1], train[0][0]).numpy()
1240/272: l(train[0][1], train[0][1]).numpy()
1240/273: l(train[0][1], train[0][1].astype(np.float32)).numpy()
1240/274: l(train[0][1], train[0][0].astype(np.float32)).numpy()
1240/275: train = InputGenerator(pth, 1, end=0.8, seed=1)
1240/276: valid = InputGenerator(pth, 1, start=0.8, seed=1)
1240/277: model = keras.models.Sequential()
1240/278:
model.add(
    keras.layers.Conv2D(
        1, 3, activation="relu", padding="same", input_shape=(1080, 1920, 1)
    )
)
1240/279: model.compile(optimizer="adam", loss=l)
1240/280: model(train[0][0])
1240/281: l(train[0][1], model(train[0][0]))
1240/282: l(train[0][1], model(train[0][0]))
1240/283: l(train[0][1], model(train[0][0])).numpy()
1240/284: model.fit(x=train, epochs=1, validation_data=valid)
1240/285: model.fit(x=train, epochs=1, validation_data=valid)
1240/286: model.fit(x=train, epochs=2, validation_data=valid)
1240/287: tr = model(valid[0][0])
1240/288: plt.imshow(tr[0, :, :, 0], cmap="Greys")
1240/289: plt.show()
1240/290: model.fit(x=train, epochs=10, validation_data=valid)
1240/291: tr = model(valid[0][0])
1240/292: plt.imshow(tr[0, :, :, 0], cmap="Greys")
1240/293: plt.show()
1240/294: train = InputGenerator(pth, 1, end=0.8, seed=1)
1240/295: train = InputGenerator(pth, 1, end=0.8, seed=1)
1240/296: model.weights
1240/297: ?keras.losses.BinaryCrossentropy
1240/298: pth
1240/299: from simpleTools import run
1240/300: run(pth)
1240/301: run(pth)
1240/302: run(pth)
1240/303: l = keras.losses.BinaryFocalCrossentropy(from_logits=False)
1240/304: ?keras.losses.BinaryFocalCrossentropy
1240/305: ?keras.losses.BinaryFocalCrossentropy
1240/306: run(pth)
1240/307: ?keras.losses.BinaryFocalCrossentropy
1240/308: ?keras.losses.BinaryFocalCrossentropy
1240/309: ?keras.losses.BinaryCrossentropy
1240/310: run(pth)
1240/311: run(pth)
1240/312: run(pth)
1240/313: ?keras.losses.BinaryFocalCrossentropy
1240/314: run(pth)
1240/315: ?keras.losses.BinaryFocalCrossentropy
1240/316: ?keras.losses.BinaryFocalCrossentropy
1240/317: ?keras.losses.BinaryFocalCrossentropy
1240/318: ui
1240/319: run(pth)
1241/1: import numpy as np
1242/1: import numpy as np
1242/2: import tensorflow as tf
1242/3: import tensorflow.keras as keras
1244/1: import numpy as np
1244/2: import tensorflow as tf
1244/3: import tensorflow.keras as keras
1244/4: import matplotlib.pyplot as plt
1244/5: from simpleTools import *
1244/6: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1244/7: run(pth)
1244/8: run(pth)
1245/1: %load_ext autoreload
1245/2: %autoreload 2
1245/3: import numpy as np
1245/4: import tensorflow as tf
1245/5: import tensorflow.keras as keras
1245/6: import matplotlib.pyplot as plt
1245/7: from simpleTools import *
1245/8: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1245/9: run(pth)
1245/10: run(pth)
1245/11: run(pth)
1245/12: run(pth)
1245/13: run(pth)
1245/14: t, v, m = run(pth)
1245/15: v[0][0]
1245/16: v[0][0][: , : , 0]
1245/17: v[0][0].shape
1245/18: plt.imshow(v[0][0][0][:, :, 0])
1245/19: plt.show()
1245/20: plt.imshow(v[0][1][0][:, :, 0])
1245/21: plt.show()
1245/22: plt.imshow(m(v[0][0])[0][:, :, 0])
1245/23: plt.show()
1245/24: plt.imshow(m(v[0][0])[0][:, :, 0], interpolation=None)
1245/25: plt.show()
1245/26: plt.imshow(m(v[0][0])[0][:, :, 0], interpolation=None)
1245/27: plt.legend()
1245/28: plt.imshow(m(v[0][0])[0][:, :, 0], interpolation=None)
1245/29: plt.colorbar()
1245/30: plt.show()
1245/31: r = m(v[0][0])[0][:, :, 0]
1245/32: r = (r < 0.2) * r
1245/33: r = m(v[0][0])[0][:, :, 0]
1245/34: type(r)
1245/35: r = m(v[0][0])[0][:, :, 0].numpy()
1245/36: type(r)
1245/37: r = (r < 0.2) * r
1245/38: plt.imshow(r, interpolation=None)
1245/39: plt.show()
1245/40: r = m(v[0][0])[0][:, :, 0].numpy()
1245/41: r = (r < 0.3)
1245/42: plt.imshow(r, interpolation=None)
1245/43: plt.show()
1245/44: r = (r < 0.25)
1245/45: r = m(v[0][0])[0][:, :, 0].numpy()
1245/46: r = r < 0.25
1245/47: r = m(v[0][0])[0][:, :, 0].numpy() < 0.25
1245/48: plt.imshow(r, interpolation=None)
1245/49: r = m(v[0][0])[0][:, :, 0].numpy() < 0.25
1245/50: plt.imshow(r, interpolation=None)
1245/51: plt.show()
1245/52: v[0].show()
1245/53: v.show(0)
1245/54: [0 , 1 , 2][1:1]
1245/55: t, v, m = run(pth)
1245/56: t, v, m = run(pth)
1245/57: t.show(0, 0, model=m)
1245/58: t.show(0, 0, model=m)
1245/59: t.show(0, 0, model=m)
1245/60: t.show(0, 0, model=m)
1245/61: t.show(0, 0, model=m)
1245/62: t.show(0, 0, model=m)
1245/63: t.show(0, 0, model=m)
1246/1: %load_ext autoreload
1246/2: %autoreload 2
1246/3: import tensorflow as tf
1246/4: import tensorflow.keras as keras
1246/5: import numpy as np
1246/6: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1246/7: train = InputGenerator(pth, 1, end=0.8, seed=1)
1246/8: from simpleTools import *
1246/9: train = InputGenerator(pth, 1, end=0.8, seed=1)
1246/10: valid = InputGenerator(pth, 1, start=0.8, seed=1)
1246/11: train.show(10 , 0)
1246/12: ipt = keras.layers.Input(shape=(1080, 1920, 1))
1246/13: conv1 = keras.layers.Conv2D(1, 15, activation="sigmoid", padding="same")(ipt)
1246/14: conv1
1246/15: conv2 = keras.layers.Conv2D(1, 2, activation="sigmoid", padding="same")(ipt)
1246/16: concat = keras.layers.Concatenate()([conv1, conv2])
1246/17: model = keras.Model(inputs=[ipt], outputs=[concat])
1246/18: model.summary()
1246/19: ipt = keras.layers.Input(shape=(1080, 1920, 1))
1247/1: import tensorflow as tf
1247/2: import tensorflow.keras as keras
1247/3: ?keras.layers.Conv2D
1246/20: conv1 = keras.layers.Conv2D(1, 5, activation="relu", padding="same" , dilation_rate = 1)(ipt)
1246/21: conv2 = keras.layers.Conv2D(1, 5, activation="relu", padding="same" , dilation_rate = 10)(ipt)
1246/22: conv3 = keras.layers.Conv2D(1, 5, activation="relu", padding="same" , dilation_rate = 50)(ipt)
1246/23: concat = keras.layers.Concatenate()([conv1, conv2 , conv3])
1246/24: model = keras.Model(inputs=[ipt], outputs=[concat])
1246/25: model.summary()
1246/26: out = keras.layers.Conv2D(1, 3, activation="sigmoid", padding="same")(concat)
1246/27: model = keras.Model(inputs=[ipt], outputs=[cout])
1246/28: model = keras.Model(inputs=[ipt], outputs=[out])
1246/29: model.summary()
1246/30: loss = keras.losses.BinaryFocalCrossentropy(from_logits=False)
1246/31: model.compile(optimizer="adam", loss=loss)
1246/32: model.fit(x=train, epochs=10, validation_data=valid)
1246/33: valid.show(0 , 0 , model = model)
1246/34: out = keras.layers.Conv2D(1, 3, activation="relu", padding="same")(concat)
1246/35: loss = keras.losses.MeanSquaredError()
1246/36: model = keras.Model(inputs=[ipt], outputs=[out])
1246/37: model.compile(optimizer="adam", loss=loss)
1246/38: model.fit(x=train, epochs=20, validation_data=valid)
1246/39: valid.show(0, 0, model=model)
1246/40: t, v, m = run(pth)
1246/41: t, v, m = run(pth)
1246/42: v[0].show(0 , 0 , model = m)
1246/43: v[0]
1246/44: v.show(0, 0, model=m)
1246/45: v.show(0, 0, model=m)
1246/46: t, v, m = run(pth)
1246/47: t, v, m = run(pth)
1246/48: t, v, m = run(pth)
1248/1: import tensorflow as tf
1248/2: import tensorflow.keras as keras
1248/3: import numpy as np
1248/4: from simpleTools import *
1248/5: t, v, m = run(pth)
1248/6: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1248/7: t, v, m = run(pth)
1250/1:
if True:
    print(1)
else:
    print(2)
1251/1: import numpy as np
1251/2: np.random.rand(2 , 2)
1251/3: np.random.rand(2, 2)
1251/4: np.random.rand(2, 2)
1251/5: np.random.rand(2, 2)
1253/1: import tensorflow as tf
1253/2: import tensorflow.keras as keras
1253/3: import numpy as np
1253/4: train = InputGenerator(pth, 1, end=0.8, seed=1)
1253/5: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1253/6: train = InputGenerator(pth, 1, end=0.8, seed=1)
1253/7: from simpleTools import *
1253/8: train = InputGenerator(pth, 1, end=0.8, seed=1)
1254/1: %load_ext autoreload
1254/2: %autoreload 2
1254/3: import tensorflow as tf
1254/4: import tensorflow.keras as keras
1254/5: import numpy as np
1254/6: from simpleTools import *
1254/7: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1254/8: train = InputGenerator(pth, 1, end=0.8, seed=1)
1254/9: ipt = keras.layers.Input(shape=(1080, 1920, 1))
1254/10: conv = keras.layers.Conv2D(1, 5, activation="relu", padding="same" , dilation_rate = 1)(ipt)
1254/11: model = keras.Model(inputs=[ipt], outputs=[conv])
1254/12: model.summary
1254/13: ?keras.layers.Conv2D
1254/14: conv = keras.layers.Conv2D(1, 5, activation="relu", padding="valid" , dilation_rate = 1)(ipt)
1254/15: model = keras.Model(inputs=[ipt], outputs=[conv])
1254/16: model.summary
1254/17: model.summary()
1254/18: conv = keras.layers.Conv2D(1, 5, activation="relu", padding="valid" , dilation_rate = 10)(ipt)
1254/19: model.summary()
1254/20: model = keras.Model(inputs=[ipt], outputs=[conv])
1254/21: model.summary()
1254/22:
conv = keras.layers.Conv2D(1, 5, activation="relu", padding="valid", dilation_rate=10)(
    ipt
)
1254/23:
class myConv(keras.layers.Layer):
    def __init__(self):
        self.conv = keras.layers.Conv2D(
            1, 5, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        return self.conv(inputs)
1254/24: conv = myConv()
1254/25: model = keras.Model(inputs=[ipt], outputs=[conv])
1254/26:
class myConv(keras.layers.Layer):
    def __init__(self):
        self.conv = keras.layers.Conv2D(
            1, 5, activation="relu", padding="same", dilation_rate=1
        )

    def call(self, inputs):
        return self.conv(inputs)
1254/27: conv = myConv()
1254/28: model = keras.Model(inputs=[ipt], outputs=[conv])
1254/29: conv = myConv()(ipt)
1254/30: conv = myConv()
1254/31: conv = conv(ipt)
1254/32:
class myConv(keras.layers.Layer):
    def __init__(self):
        super().__init__()
        self.conv = keras.layers.Conv2D(
            1, 5, activation="relu", padding="same", dilation_rate=1
        )

    def call(self, inputs):
        return self.conv(inputs)
1254/33: conv = myConv()
1254/34: conv = conv(ipt)
1254/35: model = keras.Model(inputs=[ipt], outputs=[conv])
1254/36: model.summary()
1254/37:
class myConv(keras.layers.Layer):
    def __init__(self):
        super().__init__()
        self.conv = keras.layers.Conv2D(
            1, 5, activation="relu", padding="same", dilation_rate=1
        )

    def call(self, inputs):
        print(inputs.shape)
        return self.conv(inputs)
1254/38: conv = myConv()
1254/39: conv = conv(ipt)
1254/40: a = tf.constant([[1 , 2],[3 , 4]] , tf.int32)
1254/41: a
1254/42: tf.tile(a, b)
1254/43: tf.tile(a, a)
1254/44: ?tf.concat
1254/45: ?tf.concat
1254/46: tf.concat([a, a])
1254/47: ?tf.concat
1254/48: tf.concat([a, a] , 0)
1254/49: tf.concat([a, a] , 1)
1254/50:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        self.size = size
        super().__init__()
        self.conv = keras.layers.Conv2D(
            1, 5, activation="relu", padding="same", dilation_rate=1
        )

    def call(self, inputs):
        print(inputs.shape)
        return self.conv(inputs)
1254/51:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 5, activation="relu", padding="same", dilation_rate=1
        )

    def call(self, inputs):
        print(inputs.shape)
        img = shape[0, :, :, 0]
        return self.conv(inputs)
1254/52: conv = myConv()
1254/53: conv = myConv(2)
1254/54: conv = conv(ipt)
1254/55:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 5, activation="relu", padding="same", dilation_rate=1
        )

    def call(self, inputs):
        print(inputs.shape)
        img = inputs[0, :, :, 0]
        return self.conv(inputs)
1254/56:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 5, activation="relu", padding="same", dilation_rate=1
        )

    def call(self, inputs):
        print(inputs.shape)
        img = inputs[0, :, :, 0]
        return self.conv(inputs)
1254/57: conv = myConv()
1254/58: conv = myConv(2)
1254/59: conv = conv(ipt)
1254/60: model = keras.Model(inputs=[ipt], outputs=[conv])
1254/61: model.summary()
1255/1: import tensorflow as tf
1255/2: a = tf.constant([[1, 2], [3, 4]], tf.int32)
1255/3: a
1255/4: tf.reverse(a , 0)
1255/5: tf.reverse(a , [0])
1255/6: a
1255/7: tf.reverse(a , [1])
1255/8: tf.reverse(a , [0 , 1])
1255/9: a = tf.constant([[[1, 2], [3, 4]] , [[5 , 6] , [7 , 8]]], tf.int32)
1255/10: a
1255/11: tf.concat([a , a] , axis = 1)
1255/12: tf.concat([a , a] , axis = 2)
1255/13: tf.concat([a, a], axis=1)
1255/14: tf.reverse(a , [1])
1255/15: a
1255/16: [0 , 1 , 2 , 3 , 4 , 5][:2]
1255/17: [0 , 1 , 2 , 3 , 4 , 5][-2:]
1255/18: a = tf.constant([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], tf.int32)
1255/19: tf.reverse(a , [1 , 2])
1255/20: a
1255/21: tf.reverse(a , [1])
1255/22: a
1255/23: a
1255/24: tf.concat([a, a], axis=1)
1255/25: a
1255/26: tf.concat([a, a], axis=1)
1255/27: tf.concat([a, a], axis=2)
1255/28: [0 , 1 , 2 , 3 , 4 , 5][:2]
1255/29: [0 , 1 , 2 , 3 , 4 , 5][2:-2]
1255/30: [0 , 1 , 2 , 3 , 4 , 5][-2:]
1254/62:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 5, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, images):
        s = self.size
       
        #
        
        ul = inputs[: , :s , :s , :]
        ulN = tf.reflect(ul , [1])
        ulE = tf.reflect(ul , [2])
        ulNE = tf.reflect(ul , [1 , 2])
        
        ur = inputs[: , -s: , :s , :]
        urN = tf.reflect(ur , [1])
        urW = tf.reflect(ur , [2])
        urNW = tf.reflect(ur , [1 , 2])

        uc = inputs[: , s : -s , :s , :]
        ucN = tf.reflect(uc , [1])
       
        #

        cl = inputs[: , :s , : , :]
        clE = tf.reflect(cl , [2])
        cr = inputs[: , -s: , : , :]
        crW = tf.reflect(cr , [2])

        #

        ll = inputs[: , :s , -s: , :]
        llS = tf.reflect(ll , [1])
        llE = tf.reflect(ll , [2])
        llSE = tf.reflect(ll , [1 , 2])
        
        lr = inputs[: , -s: , -s: , :]
        lrS = tf.reflect(lw , [1])
        lrW = tf.reflect(lw , [2])
        lrSW = tf.reflect(lw , [1 , 2])
      
        lc = inputs[: , -s : s : -s:]
        lcS = tf.reflect(lc , [1])

        #

        upperRow = tf.concat([ul , uc , ur] , axis = 2)
        middleRow = tf.concat([cl , inputs , cr] , axis = 2)
        bottomRow = tf.concat([ll , lc , lr] , axis = 2)

        return self.conv(tf.concat([upperRow , middleRow , bottomRow] , axis = 1))
1254/63:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 5, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, images):
        s = self.size
       
        #
        
        ul = inputs[: , :s , :s , :]
        ulN = tf.reflect(ul , [1])
        ulE = tf.reflect(ul , [2])
        ulNE = tf.reflect(ul , [1 , 2])
        
        ur = inputs[: , -s: , :s , :]
        urN = tf.reflect(ur , [1])
        urW = tf.reflect(ur , [2])
        urNW = tf.reflect(ur , [1 , 2])

        uc = inputs[: , s : -s , :s , :]
        ucN = tf.reflect(uc , [1])
       
        #

        cl = inputs[: , :s , : , :]
        clE = tf.reflect(cl , [2])
        cr = inputs[: , -s: , : , :]
        crW = tf.reflect(cr , [2])

        #

        ll = inputs[: , :s , -s: , :]
        llS = tf.reflect(ll , [1])
        llE = tf.reflect(ll , [2])
        llSE = tf.reflect(ll , [1 , 2])
        
        lr = inputs[: , -s: , -s: , :]
        lrS = tf.reflect(lw , [1])
        lrW = tf.reflect(lw , [2])
        lrSW = tf.reflect(lw , [1 , 2])
      
        lc = inputs[: , -s : s : -s:]
        lcS = tf.reflect(lc , [1])

        #

        upperRow = tf.concat([ul , uc , ur] , axis = 2)
        middleRow = tf.concat([cl , inputs , cr] , axis = 2)
        bottomRow = tf.concat([ll , lc , lr] , axis = 2)

        return self.conv(tf.concat([upperRow , middleRow , bottomRow] , axis = 1))
1254/64:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 5, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, images):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reflect(ul, [1])
        ulE = tf.reflect(ul, [2])
        ulNE = tf.reflect(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reflect(ur, [1])
        urW = tf.reflect(ur, [2])
        urNW = tf.reflect(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reflect(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reflect(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reflect(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reflect(ll, [1])
        llE = tf.reflect(ll, [2])
        llSE = tf.reflect(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reflect(lw, [1])
        lrW = tf.reflect(lw, [2])
        lrSW = tf.reflect(lw, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reflect(lc, [1])

        #

        upperRow = tf.concat([ul, uc, ur], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/65: conv = myConv(2)
1254/66:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 5, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, images):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reflect(ul, [1])
        ulE = tf.reflect(ul, [2])
        ulNE = tf.reflect(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reflect(ur, [1])
        urW = tf.reflect(ur, [2])
        urNW = tf.reflect(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reflect(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reflect(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reflect(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reflect(ll, [1])
        llE = tf.reflect(ll, [2])
        llSE = tf.reflect(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reflect(lw, [1])
        lrW = tf.reflect(lw, [2])
        lrSW = tf.reflect(lw, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reflect(lc, [1])

        #

        upperRow = tf.concat([ul, uc, ur], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/67:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, images):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reflect(ul, [1])
        ulE = tf.reflect(ul, [2])
        ulNE = tf.reflect(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reflect(ur, [1])
        urW = tf.reflect(ur, [2])
        urNW = tf.reflect(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reflect(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reflect(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reflect(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reflect(ll, [1])
        llE = tf.reflect(ll, [2])
        llSE = tf.reflect(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reflect(lw, [1])
        lrW = tf.reflect(lw, [2])
        lrSW = tf.reflect(lw, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reflect(lc, [1])

        #

        upperRow = tf.concat([ul, uc, ur], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/68: conv = myConv(2)
1254/69: conv = conv(ipt)
1254/70:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, images):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reflect(ul, [1])
        ulE = tf.reflect(ul, [2])
        ulNE = tf.reflect(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reflect(ur, [1])
        urW = tf.reflect(ur, [2])
        urNW = tf.reflect(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reflect(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reflect(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reflect(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reflect(ll, [1])
        llE = tf.reflect(ll, [2])
        llSE = tf.reflect(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reflect(lw, [1])
        lrW = tf.reflect(lw, [2])
        lrSW = tf.reflect(lw, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reflect(lc, [1])

        #

        upperRow = tf.concat([ul, uc, ur], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/71:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, images):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reflect(ul, [1])
        ulE = tf.reflect(ul, [2])
        ulNE = tf.reflect(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reflect(ur, [1])
        urW = tf.reflect(ur, [2])
        urNW = tf.reflect(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reflect(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reflect(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reflect(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reflect(ll, [1])
        llE = tf.reflect(ll, [2])
        llSE = tf.reflect(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reflect(lw, [1])
        lrW = tf.reflect(lw, [2])
        lrSW = tf.reflect(lw, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reflect(lc, [1])

        #

        upperRow = tf.concat([ul, uc, ur], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/72:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, images):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reflect(ul, [1])
        ulE = tf.reflect(ul, [2])
        ulNE = tf.reflect(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reflect(ur, [1])
        urW = tf.reflect(ur, [2])
        urNW = tf.reflect(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reflect(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reflect(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reflect(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reflect(ll, [1])
        llE = tf.reflect(ll, [2])
        llSE = tf.reflect(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reflect(lw, [1])
        lrW = tf.reflect(lw, [2])
        lrSW = tf.reflect(lw, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reflect(lc, [1])

        #

        upperRow = tf.concat([ul, uc, ur], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/73:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, images):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reflect(ul, [1])
        ulE = tf.reflect(ul, [2])
        ulNE = tf.reflect(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reflect(ur, [1])
        urW = tf.reflect(ur, [2])
        urNW = tf.reflect(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reflect(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reflect(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reflect(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reflect(ll, [1])
        llE = tf.reflect(ll, [2])
        llSE = tf.reflect(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reflect(lw, [1])
        lrW = tf.reflect(lw, [2])
        lrSW = tf.reflect(lw, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reflect(lc, [1])

        #

        upperRow = tf.concat([ul, uc, ur], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/74:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, images):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reflect(ul, [1])
        ulE = tf.reflect(ul, [2])
        ulNE = tf.reflect(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reflect(ur, [1])
        urW = tf.reflect(ur, [2])
        urNW = tf.reflect(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reflect(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reflect(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reflect(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reflect(ll, [1])
        llE = tf.reflect(ll, [2])
        llSE = tf.reflect(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reflect(lw, [1])
        lrW = tf.reflect(lw, [2])
        lrSW = tf.reflect(lw, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reflect(lc, [1])

        #

        upperRow = tf.concat([ul, uc, ur], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/75:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reflect(ul, [1])
        ulE = tf.reflect(ul, [2])
        ulNE = tf.reflect(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reflect(ur, [1])
        urW = tf.reflect(ur, [2])
        urNW = tf.reflect(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reflect(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reflect(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reflect(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reflect(ll, [1])
        llE = tf.reflect(ll, [2])
        llSE = tf.reflect(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reflect(lw, [1])
        lrW = tf.reflect(lw, [2])
        lrSW = tf.reflect(lw, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reflect(lc, [1])

        #

        upperRow = tf.concat([ul, uc, ur], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/76: conv = myConv(2)
1254/77: conv = conv(ipt)
1254/78:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lw, [1])
        lrW = tf.reverse(lw, [2])
        lrSW = tf.reverse(lw, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ul, uc, ur], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/79:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lw, [1])
        lrW = tf.reverse(lw, [2])
        lrSW = tf.reverse(lw, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ul, uc, ur], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/80:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lw, [1])
        lrW = tf.reverse(lw, [2])
        lrSW = tf.reverse(lw, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ul, uc, ur], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/81:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lw, [1])
        lrW = tf.reverse(lw, [2])
        lrSW = tf.reverse(lw, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ul, uc, ur], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/82: conv = myConv(2)
1254/83: conv = conv(ipt)
1254/84:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ul, uc, ur], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/85: conv = myConv(2)
1254/86: conv = conv(ipt)
1254/87:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/88: conv = myConv(2)
1254/89: conv = conv(ipt)
1254/90:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        print(ulNE.shape, ucN.shape, urNW.shape)
        upperRow = tf.concat([ulNE, ucN, urNW], axis=2)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/91: conv = myConv(2)
1254/92: conv = conv(ipt)
1255/31: a = tf.constant([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], tf.int32)
1255/32: a.shape
1255/33: a = tf.constant([[[1, 2 , 3], [4, 5 , 6] , [7 , 8 , 9]], [[10 , 11 , 12], [13 , 14 , 15] , [16 , 17 , 18]]], tf.int32)
1255/34: a
1255/35: a.shape
1255/36: a = tf.constant([[[1, 2 , 3], [4, 5 , 6] , [7 , 8 , 9] , [10 , 11 , 12]], [[13 , 14 , 15], [16 , 17 , 18] , [19 , 20 , 21] , [22 , 23 , 23]]], tf.int32)
1255/37: a
1255/38: a.shape
1255/39: a = tf.constant([[[[1], [2] , [3]], [[4], [5] , [6]] , [[7] , [8] , [9]] , [[10] , [11] , [12]]], [[[13] , [14] , [15]], [[16] , [17] , [18]] , [[19] , [20] , [21]] , [[22] , [23] , [23]]]], tf.int32)
1255/40: a.shape
1255/41:
a = tf.constant(
    [
        [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]],
        [[13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 23]],
    ],
    tf.int32,
)
1255/42:
a = tf.constant(
    [
        [[[1], [2], [3]], [[4], [5], [6]], [[7], [8], [9]], [[10], [11], [12]]],
        [
            [[13], [14], [15]],
            [[16], [17], [18]],
            [[19], [20], [21]],
            [[22], [23], [23]],
        ],
    ],
    tf.int32,
)
1255/43: a.shape
1255/44: a.shape
1255/45: tf.concat([a, a], axis=2)
1255/46: tf.concat([a, a], axis=2).shape
1255/47: a.shape
1254/93:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        print(ulNE.shape, ucN.shape, urNW.shape)
        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/94: conv = myConv(2)
1254/95: conv = conv(ipt)
1254/96:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        print(ulNE.shape, ucN.shape, urNW.shape)
        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/97:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        print(ulNE.shape, ucN.shape, urNW.shape)
        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/98:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        print(ulNE.shape, ucN.shape, urNW.shape)
        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([cl, inputs, cr], axis=2)
        bottomRow = tf.concat([ll, lc, lr], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/99:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=2)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/100: conv = myConv(2)
1254/101: conv = conv(ipt)
1254/102:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=2)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/103:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=2)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/104:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=2)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=2)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=1))
1254/105:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
1254/106: conv = myConv(2)
1254/107: conv = conv(ipt)
1254/108:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
1254/109:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, -s:s:-s, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
1254/110:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, s:-s, :-s, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
1254/111: conv = myConv(2)
1254/112: conv = conv(ipt)
1254/113:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, s:-s, -s:, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
1254/114: conv = myConv(2)
1254/115: conv = myConv(2)
1254/116:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, , :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
1254/117:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, 1, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
1254/118:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, s:-s, -s:, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
1254/119: conv = myConv(2)
1254/120: conv = conv(ipt)
1254/121:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, s:-s, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, s:-s, -s:, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)
        print(upperRow.shape)
        print(middleRow.shape)
        print(bottomRow.shape)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
1254/122: conv = myConv(2)
1254/123: conv = conv(ipt)
1254/124:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, :, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, :, -s:, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)
        print(upperRow.shape)
        print(middleRow.shape)
        print(bottomRow.shape)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
1254/125: conv = myConv(2)
1254/126: conv = conv(ipt)
1254/127:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, :, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, :, -s:, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
1254/128: conv = myConv(2)
1254/129: conv = conv(ipt)
1254/130: model = keras.Model(inputs=[ipt], outputs=[conv])
1254/131: model.summary()
1254/132: conv = myConv(10)
1254/133: conv = conv(ipt)
1254/134: model = keras.Model(inputs=[ipt], outputs=[conv])
1254/135: model.summary()
1254/136: train = InputGenerator(pth, 1, end=0.8, seed=1)
1254/137: conv(train[0][0])
1254/138: model.compile(optimizer="adam", loss=loss)
1254/139: loss = keras.losses.MeanSquaredError()
1254/140: model.compile(optimizer="adam", loss=loss)
1254/141: model(train[0][0])
1254/142:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, :, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, :, -s:, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)

        r = self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2)).numpy()
        r.save("temp.npy")

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
1254/143: conv = myConv(10)
1254/144: conv = conv(ipt)
1255/48: a.numpy
1254/145:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, :, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, :, -s:, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)

        r = self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2)).numpy
        r.save("temp.npy")

        return self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
1254/146: conv = myConv(10)
1254/147: conv = conv(ipt)
1254/148:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, :, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, :, -s:, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)

        r = self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))

        return r
1254/149: conv = myConv(10)
1254/150: conv = conv(ipt)
1254/151: model = keras.Model(inputs=[ipt], outputs=[conv])
1254/152: model(train[0][0])
1254/153:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, :, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, :, -s:, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)

        r = self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
        r = r.numpy()
        r.save("temp.npy")

        return r
1254/154: conv = myConv(10)
1254/155: conv = conv(ipt)
1254/156: tf.config.run_functions_eagerly(True)
1254/157: conv = myConv(10)
1254/158: conv = conv(ipt)
1254/159:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, :, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, :, -s:, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)

        r = self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
        r = r.numpy()
        r.save("temp.npy")

        return r:vs
1254/160:
class myConv(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(
            1, 2 * size + 1, activation="relu", padding="valid", dilation_rate=1
        )

    def call(self, inputs):
        s = self.size

        #

        ul = inputs[:, :s, :s, :]
        ulN = tf.reverse(ul, [1])
        ulE = tf.reverse(ul, [2])
        ulNE = tf.reverse(ul, [1, 2])

        ur = inputs[:, -s:, :s, :]
        urN = tf.reverse(ur, [1])
        urW = tf.reverse(ur, [2])
        urNW = tf.reverse(ur, [1, 2])

        uc = inputs[:, :, :s, :]
        ucN = tf.reverse(uc, [1])

        #

        cl = inputs[:, :s, :, :]
        clE = tf.reverse(cl, [2])
        cr = inputs[:, -s:, :, :]
        crW = tf.reverse(cr, [2])

        #

        ll = inputs[:, :s, -s:, :]
        llS = tf.reverse(ll, [1])
        llE = tf.reverse(ll, [2])
        llSE = tf.reverse(ll, [1, 2])

        lr = inputs[:, -s:, -s:, :]
        lrS = tf.reverse(lr, [1])
        lrW = tf.reverse(lr, [2])
        lrSW = tf.reverse(lr, [1, 2])

        lc = inputs[:, :, -s:, :]
        lcS = tf.reverse(lc, [1])

        #

        upperRow = tf.concat([ulNE, ucN, urNW], axis=1)
        middleRow = tf.concat([clE, inputs, crW], axis=1)
        bottomRow = tf.concat([llSE, lcS, lrSW], axis=1)

        r = self.conv(tf.concat([upperRow, middleRow, bottomRow], axis=2))
        r = r.numpy()
        r.save("temp.npy")

        return r
1254/161: from myConv import myConv
1256/1: import numpy as np
1256/2: np.concatenate
1256/3: ?np.concatenate
1256/4: import tensorflow as tf
1256/5: import tensorflow.keras as keras
1256/6: import matplotlib.pyplot as plt
1257/1: import tensorflow as tf
1257/2: import tensorflow.keras as keras
1257/3: import numpy as np
1257/4: import matplotlib.pyplot as plt
1257/5: from simpleTools import *
1257/6: from myConv import expand
1257/7: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1257/8: train = InputGenerator(pth, 1, end=0.8, seed=1)
1257/9: np = train[0][0].numpy()
1257/10: np
1257/11: n = train[0][0]
1257/12: n
1257/13: n.shape
1257/14: plt.imshow(n[0 , : , : , 0])
1257/15: plt.show()
1257/16: e = expand(n, 10)
1257/17: plt.imshow(e[0 , : , : , 0])
1257/18: plt.show()
1257/19: e = expand(n, 100)
1257/20: plt.imshow(e[0, :, :, 0])
1257/21: plt.show()
1257/22: e = expand(n, 400)
1257/23: plt.imshow(e[0, :, :, 0])
1257/24: plt.show()
1257/25: %load_ext autoreload
1257/26: %autoreload 2
1257/27: from myConv import expand
1257/28: e = expand(n, 400)
1257/29: plt.imshow(e[0, :, :, 0])
1257/30: plt.show()
1257/31: e = expand(n, 400)
1257/32: plt.imshow(e[0, :, :, 0])
1257/33: plt.show()
1257/34: e = expand(n, 400)
1257/35: e = expand(n, 400)
1257/36: plt.imshow(e[0, :, :, 0])
1257/37: plt.show()
1257/38: from myConv import expand
1257/39: e = expand(n, 400)
1257/40: plt.imshow(e[0, :, :, 0])
1257/41: plt.show()
1257/42: [0 , 1 , 2 , 3][-1 , 1]
1257/43: [0 , 1 , 2 , 3][-1 : 1]
1257/44: [0 , 1 , 2 , 3 , 4 , 5 , 6][-1 : 1]
1257/45: e = expand(n, 400)
1257/46: plt.imshow(e[0, :, :, 0])
1257/47: plt.show()
1258/1: %load_ext autoreload
1258/2: %autoreload 2
1258/3: import tensorflow as tf
1258/4: import tensorflow.keras as keras
1258/5: import numpy as np
1258/6: from myConv import expand
1258/7: from simpleTools import *
1259/1: %load_ext autoreload
1259/2: %autoreload 2
1259/3: import tensorflow as tf
1259/4: import tensorflow.keras as keras
1259/5: import numpy as np
1259/6: from simpleTools import *
1260/1: %load_ext autoreload
1260/2: %autoreload 2
1260/3: import tensorflow as tf
1260/4: import tensorflow.keras as keras
1260/5: import numpy as np
1260/6: from myConv import expand
1260/7: from simpleTools import *
1260/8: import matplotlib
1260/9: pth = "/run/media/kacper/02CB-D5CE/simple_13-02-2023/b/"
1260/10: train = InputGenerator(pth, 1, end=0.8, seed=1)
1260/11: n = train[0][0]
1260/12: e = expand(n, 400)
1260/13: matplolib.pyplot.imshow(e[0, :, :, 0])
1260/14: matplotlib.pyplot.imshow(e[0 , : , :, 0])
1260/15: matplotlib.pyplot.show()
1260/16: e = expand(n, 400)
1260/17: matplotlib.pyplot.imshow(e[0, :, :, 0])
1260/18: matplotlib.pyplot.show()
1260/19: e = expand(n, 400)
1260/20: matplotlib.pyplot.imshow(e[0, :, :, 0])
1260/21: matplotlib.pyplot.show()
1260/22: matplotlib.pyplot.imshow(e[0, :, :, 0])
1260/23: matplotlib.pyplot.show()
1260/24: e = expand(n, 400)
1260/25: matplotlib.pyplot.imshow(e[0, :, :, 0])
1260/26: matplotlib.pyplot.show()
1260/27: matplotlib.pyplot.imshow(e[0, :, :, 0])
1260/28: matplotlib.pyplot.show()
1260/29: e = expand(n, 400)
1260/30: matplotlib.pyplot.imshow(e[0, :, :, 0])
1260/31: matplotlib.pyplot.show()
1260/32: e = expand(n, 400)
1260/33: matplotlib.pyplot.imshow(e[0, :, :, 0])
1260/34: matplotlib.pyplot.show()
1260/35: e = expand(n, 400)
1260/36: matplotlib.pyplot.imshow(e[0, :, :, 0])
1260/37: matplotlib.pyplot.show()
1260/38: e = expand(n, 400)
1260/39: matplotlib.pyplot.imshow(e[0, :, :, 0])
1260/40: matplotlib.pyplot.show()
1260/41: e = expand(n, 400)
1260/42: matplotlib.pyplot.imshow(e[0, :, :, 0])
1260/43: matplotlib.pyplot.show()
1260/44:
a = tf.constant(
    [
        [[[1], [2], [3]], [[4], [5], [6]], [[7], [8], [9]], [[10], [11], [12]]],
        [
            [[13], [14], [15]],
            [[16], [17], [18]],
            [[19], [20], [21]],
            [[22], [23], [23]],
        ],
    ],
    tf.int32,
)
1260/45: a.shape
1260/46: an = a.numpy()
1260/47: tf.reverse(a, [1])
1260/48: tf.reverse(a, [1]).numpy()
1260/49: tf.reverse(a, [1]).numpy() - np.flip(a , [1])
1260/50: tf.reverse(a, [2]).numpy() - np.flip(a , [2])
1260/51: np.abs(tf.reverse(a, [2]).numpy() - np.flip(a , [2]))
1260/52: np.abs(tf.reverse(a, [2]).numpy() - np.flip(a, [2])).max()
1260/53: np.abs(tf.reverse(a, [3]).numpy() - np.flip(a, [3])).max()
1260/54: np.abs(tf.reverse(a, [2 , 3]).numpy() - np.flip(a, [2 , 3])).max()
1260/55: e = expand(n, 400)
1260/56: matplotlib.pyplot.imshow(e[0, :, :, 0])
1260/57: matplotlib.pyplot.show()
1261/1: 10 % 2
1262/1: int(0.1)
1262/2: int(0.5)
1262/3: int(0.51)
1262/4: int(0.999)
1262/5: int(1.0)
1262/6: 10 / 4
1263/1: import tensorflow as tf
1263/2: import tensorflow.keras as keras
1263/3: import numpy as np
1263/4: import matplotlib.pyplot as plt
1263/5: ls
1263/6: keras.models.load_model('m_20-02-2023.h5')
1263/7: keras.models.load_model('m_20-02-2023.h5' , custom_objects={"MConv" : keras.layers.Conv2D})
1263/8: keras.models.load_model("m_20-02-2023.h5")
1263/9: ?keras.models.load_model
1263/10: keras.layers.Conv2D(1, 5, activetion="relu", padding="same")
1263/11: l = keras.layers.Conv2D(1, 5, activation="relu", padding="same")
1263/12: l.size
1263/13: l.get_weights()
1264/1: import tensorflow as tf
1267/1: eexit
1269/1: plt
1269/2:
class MyLayer(keras.layers.Layer):
    def __init__(self, size):
        self.conv = keras.layer.Conv2D(1, size, activation="relu", padding="same")

    def call(self, inputs):
        return self.conv(inputs)
1269/3: ipt = keras.layers.Input(shape=(100, 100, 1))
1269/4: conv1 = MyLayer(5)(ipt)
1269/5:
class MyLayer(keras.layers.Layer):
    def __init__(self, size):
        self.conv = keras.layers.Conv2D(1, size, activation="relu", padding="same")

    def call(self, inputs):
        return self.conv(inputs)
1269/6: ipt = keras.layers.Input(shape=(100, 100, 1))
1269/7: conv1 = MyLayer(5)(ipt)
1269/8:
class MyLayer(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.conv = keras.layers.Conv2D(1, size, activation="relu", padding="same")

    def call(self, inputs):
        return self.conv(inputs)
1269/9: ipt = keras.layers.Input(shape=(100, 100, 1))
1269/10: conv1 = MyLayer(5)(ipt)
1269/11: out = keras.layers.Conv2D(1, 3, activation="relu", padding="same")(conv1)
1269/12: model = keras.Model(inputs=[ipt], outputs=[out])
1269/13: model.summary()
1269/14: model.compile(optimizer="adam", loss=keras.losses.MeanAbsoluteError())
1269/15: pwd
1269/16: model.save("temp.h5")
1269/17:
class MyLayer(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(1, size, activation="relu", padding="same")

    def call(self, inputs):
        return self.conv(inputs)

    def get_config(self):
        return {"size": self.size}
1269/18: layer = keras.layers.Conv2D(2)
1269/19: layer = keras.layers.Conv2D(1 , 3)
1269/20: layer.get_config()
1269/21: layer.name
1269/22: layer.trainable
1269/23: layer.use_bias
1269/24:
class temp:
    def __init__(self):
        self.val = 123
1269/25:
class temp:
    def __init__(self):
        self.val = 123
1269/26:
class temp:
    def __init__(self):
        self.val = 123

    def get_conf(self):
        return self.__dict__
1269/27: a = temp()
1269/28: a.get_conf
1269/29: a.get_conf()
1269/30:
class MyLayer(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(1, size, activation="relu", padding="same")

    def call(self, inputs):
        return self.conv(inputs)

    def get_config(self):
        return {"size": self.size}
1269/31: layer.__dict__
1269/32:
class MyLayer(keras.layers.Layer):
    def __init__(self, size):
        super().__init__()
        self.size = size
        self.conv = keras.layers.Conv2D(1, size, activation="relu", padding="same")

    def call(self, inputs):
        return self.conv(inputs)

    def get_config(self):
        return {"size": self.size}
1269/33: model = keras.models.Sequential()
1269/34: model.add(MyLayer(3))
1269/35: model.compile(optimizer="adam", loss=keras.losses.MeanAbsoluteError())
1269/36: model.summary()
1269/37: model.build()
1269/38: model.build(input_shape = (1 , 100 , 100))
1269/39: model.build(input_shape = (1 , 100 , 100 , 1))
1269/40: model.summary()
1269/41: model.save("temp.h5")
1269/42: model1 = keras.models.load_model("temp.h5")
1269/43: model1 = keras.models.load_model("temp.h5", custom_objects={"MyLayer": MyLayer})
1269/44: model.get_layer(0)
1269/45: model.get_layer("my_layer_1")
1269/46: model.get_layer("my_layer_1")
1269/47: l = model.get_layer("my_layer_1")
1269/48: l.get_weights()
1269/49: l1 = model1.get_layer("my_layer_1")
1269/50: l1 = model1.get_layer("my_layer_2")
1269/51: l1.get_weights()
1269/52: inp = np.random.rand(1 , 100 , 100 , 1)
1269/53: model(inp)
1269/54: out = model(inp)
1269/55: out1 = model1(inp)
1269/56: out - out1
1270/1: from mconv import MConv
1270/2: model = keras.models.load_model("m_21-02-2023.h5" , custom_objects = {'MConv' : MConv})
1270/3: model
1270/4: ?model.build
1270/5: ?model.compile
1271/1: None == 123
1272/1: import tensorflow as tf
1272/2: import tensorflow.keras as keras
1272/3: t = keras.preprocessing.text.Tokenizer()
1272/4: ?t.fit_on_texts
1272/5: sentencec = ["sad sad asd a" , "saoi aoijsao ijda" , "skdjnjn kn ksakjn kjnkjsan" , "askdjn ksan ksajnkj nkjsa nkjsa nkj n"]
1272/6: sentences = ["sad sad asd a" , "saoi aoijsao ijda" , "skdjnjn kn ksakjn kjnkjsan" , "askdjn ksan ksajnkj nkjsa nkjsa nkj n"]
1272/7: t.fit_on_texts(sentences)
1272/8: t
1272/9: t.texts_to_sequences(sentences)
1272/10: t.texts_to_sequences(sentences)
1272/11: ?keras.layers.LSTM
1273/1: np.array([[1 , 2] , [3 ,4] ,[5 ,6]])
1273/2: a = np.array([[1 , 2] , [3 ,4] ,[5 ,6]])
1273/3: a - np.array([1 ,1])
1273/4: a = np.array([[1 , 2 , -2] , [3 ,4 , -4] ,[5 ,6 , -5]])
1273/5: a[: , 0:2]
1273/6: a[: , 0:2] - [1 , 1]
1273/7: np.linalg.norm(a[:, 0:2] - [1, 1])
1273/8: np.linalg.norm(a[:, 0:2] - [1, 1] , axis = 0)
1273/9: np.linalg.norm(a[:, 0:2] - [1, 1] , axis = 1)
1273/10: np.sqrt(4 * 4 + 5 * 5)
1273/11: a[:, 0:2] - [1, 1]
1273/12: np.linalg.norm([4 , 5])
1273/13: 4 * 4 + 5 * 5
1273/14: np.sqrt(41)
1274/1: np.count_nonzero(np.array([1 , 2 ,3 , 4 , 5 ,6]) <4 )
1274/2: np.count_nonzero(np.array([1 , 2 ,3 , 4 , 5 ,6]) <5 )
1276/1: import argparse
1276/2: ?argparse.ArgumentParser.add_argument
1276/3: np.float64
1278/1: plt.show()
1279/1: from unraveltools import *
1279/2: data = loadData("../data/out_temp_1/")
1279/3: t = extractRandomChargedTrack(data , eventId=10 , minHits=10)
1279/4: cx, cy, nu = getTrajectoryData(t)
1279/5: tzbar = t["hits"][3 ,0]
1279/6: tx = t["hits"][3 , 1]
1279/7: tzbar = t["hits"][3 , 0]
1279/8: tx = t["hits"][3 , 1]
1279/9: tzbar = t["hits"][3 , 2]
1279/10: tx = t["hits"][3 , 0]
1279/11: ty = t["hits"][3 , 1]
1279/12: event = extractEvent(data , 10)
1279/13: unraveled = unravelWithParameters(cx, cy, nu, tzbar, event["hits"])
1279/14: ?np.sort
1279/15: np.sort([[1 , 2],[2 , 1],[3 , 3],[4 , 4]] , axis = 1)
1279/16: np.sort([[1 , 2],[2 , 1],[3 , 3],[4 , 4]] , axis = 0)
1279/17: ?np.argsort
1279/18: arr = np.array([[1 , 2],[2 , 1],[3 , 3],[4 , 4]])
1279/19: arr
1279/20: arr[: , 1]
1279/21: arr[:, 1].argsort()
1279/22: xargsort = unraveled[:, 0].argsort()
1279/23: unraveledxsorted = unraveled[xargsort]
1279/24: unraveledxsorted[0:10]
1280/1: a = np.array([2 ,3 , 1 , 4 , 2 , 5])
1280/2: np.argwhere
1280/3: np.argwhere(a >= 2)
1280/4: np.argwhere(a >= 3)
1280/5: a[np.argwhere(a >= 3)]
1280/6: a[np.argwhere(a >= 3).flatten()]
1279/25:
for i in range(0, unraveledxsorted.shape[0] - 20):
    currentx = xdatasorted[i, 0]
    buffer = np.abs(unraveledxsorted[i : i + 20, 0] - currentx)
    where = np.argwhere(buffer < 0.00000009).flatten()
    if where.shape[0] >= 9:
        print(currentx, tx)
        break
1279/26:
for i in range(0, unraveledxsorted.shape[0] - 20):
    currentx = unraveledxsorted[i, 0]
    buffer = np.abs(unraveledxsorted[i : i + 20, 0] - currentx)
    where = np.argwhere(buffer < 0.00000009).flatten()
    if where.shape[0] >= 9:
        print(currentx, tx)
        break
1279/27:
for i in range(0, unraveledxsorted.shape[0] - 20):
    currentx = unraveledxsorted[i, 0]
    buffer = np.abs(unraveledxsorted[i : i + 20, 0] - currentx)
    where = np.argwhere(buffer < 0.00000009).flatten()
    if where.shape[0] >= 9:
        print(currentx, tx)
        break
1279/28:
for i in range(0, unraveledxsorted.shape[0] - 20):
    currentx = unraveledxsorted[i, 0]
    buffer = np.abs(unraveledxsorted[i : i + 20, 0] - currentx)
    where = np.argwhere(buffer < 0.00000009).flatten()
    if where.shape[0] >= 9:
        printi(currentx, tx, unraveledxsorted[1 : i + 20, 1][where])
        break
1279/29:
for i in range(0, unraveledxsorted.shape[0] - 20):
    currentx = unraveledxsorted[i, 0]
    buffer = np.abs(unraveledxsorted[i : i + 20, 0] - currentx)
    where = np.argwhere(buffer < 0.00000009).flatten()
    if where.shape[0] >= 9:
        print(currentx, tx, unraveledxsorted[1 : i + 20, 1][where])
        break
1279/30:
for i in range(0, unraveledxsorted.shape[0] - 20):
    currentx = unraveledxsorted[i, 0]
    currenty = unraveledxsorted[i, 1]
    bufferx = np.abs(unraveledxsorted[i : i + 20, 0] - currentx)
    buffery = np.abs(unraveledxsorted[i : i + 20, 1] - currenty)
    where = np.argwhere(bufferx < 0.00000009).flatten()
    if where.shape[0] >= 9:
        print(currentx, currenty)
        print(tx, ty)
        print(bufferx[where])
        print(buffery[where])
        break
1279/31:
for i in range(0, unraveledxsorted.shape[0] - 20):
    currentx = unraveledxsorted[i, 0]
    currenty = unraveledxsorted[i, 1]
    bufferx = np.abs(unraveledxsorted[i : i + 20, 0] - currentx)
    buffery = np.abs(unraveledxsorted[i : i + 20, 1] - currenty)
    where = np.argwhere(bufferx < 0.00000009).flatten()
    if where.shape[0] >= 9:
        print(currentx, currenty)
        print(tx, ty)
        print(unraveledxsorted[i : i + 1, 0][where])
        print(unraveledxsorted[i : i + 1, 1][where])
        break
1279/32:
for i in range(0, unraveledxsorted.shape[0] - 20):
    currentx = unraveledxsorted[i, 0]
    currenty = unraveledxsorted[i, 1]
    bufferx = np.abs(unraveledxsorted[i : i + 20, 0] - currentx)
    buffery = np.abs(unraveledxsorted[i : i + 20, 1] - currenty)
    where = np.argwhere(bufferx < 0.00000009).flatten()
    if where.shape[0] >= 9:
        print(currentx, currenty)
        print(tx, ty)
        print(unraveledxsorted[i : i + 20, 0][where])
        print(unraveledxsorted[i : i + 20, 1][where])
        break
1280/7: np.count(np.array([1 , 2 , 3 , 1 , 1 , 2 , 3 , 4 , 5]) < 2)
1280/8: 100000.0 / 2000
1280/9: np.intersect1d([0 , 1 , 2 , 3] , [3 , 4 , 5 , 6])
1280/10: list(range(-3 , 3))
1280/11: list(range(-3 , 3 + 1))
1280/12: np.norm
1280/13: np.linalg.norm([1 , 1])
1280/14: a = 2
1280/15: a /= 1
1280/16: a
1280/17: a = 2
1280/18: a += 1
1280/19: a
1280/20: np.matmul
1280/21: ?np.matmul
1280/22: np.matmul([[1 , 0],[0 , -1]] , [1 , 2])
1280/23: dangle = 0.0
1280/24: np.array([[np.cos[dangle], -np.sin[dangle]], [np.sin[dangle], np.cos[dangle]]])
1281/1: import os
1281/2: import sys
1281/3: ?os.mkdir
1281/4: '{0} {1} {2}'.format(1 , 2 , 3)
1282/1: s = 10
1282/2: [].join([1 , 2 ,3], [4 ,5 , 6])
1282/3: "".join("1" , "2" , "3")
1282/4: "".join(["1" , "2" , "3"])
1282/5: [s for s in range(5)]
1282/6: [[-s , s] for s in range(5)]
1282/7: [sublist for sublist in [[-s , s] for s in range(5)]]
1282/8: [item for sublist in [[-s , s] for s in range(5)] for item in sublist]
1282/9: [item for sublist in [[-s , s] for s in range(5)] for item in sublist][1:]
1283/1:
for i in range(3):
    for j in range(4)
1283/2:
for i in range(3):
    for j in range(4):
        for k in range(5):
            print(i, j, k)
1283/3:
for i in range(3):
    for j in range(4):
        for k in range(5):
            print(i, j, k)
            if k == 2:
                break
1284/1: print(a = 1)
1284/2: b = (a = 1)
1284/3: b = (a := 1)
1284/4: b
1284/5: a
1285/1: import os
1285/2: ?os.path.realpath
1286/1: ?np.array_repr
1286/2: ?np.array2string
1287/1: ?np.arctan2
1288/1: import subprocess
1286/3: import os
1286/4: os.path.dirname(os.path.realpath(__file__))
1288/2: import os
1288/3: subprocess.check_output(["git" , "rev-parse" , "HEAD"])
1288/4: str(subprocess.check_output(["git", "rev-parse", "HEAD"]))
1288/5: subprocess.check_output(["git", "rev-parse", "HEAD"])
1288/6: subprocess.check_output(["git", "rev-parse", "HEAD"])
1288/7: subprocess.check_output(["git", "rev-parse", "HEAD"]).replace("\n" , " ")
1289/1: [[i * 4 + j for i in range(4)] for j in range(4)]
1289/2: np.array([[i * 4 + j for i in range(4)] for j in range(4)])
1289/3: np.array([[j * 4 + i for i in range(4)] for j in range(4)])
1289/4: arr = np.array([[j * 4 + i for i in range(4)] for j in range(4)])
1289/5: arr
1289/6: np.roll(arr , 1 , axis = 0)
1289/7: np.roll(arr , -1 , axis = 0)
1289/8: np.roll(arr , -1 , axis = 1)
1289/9: np.roll(arr , 1 , axis = 1)
1289/10: np.roll(arr , 0 , axis = 1)
1289/11: np.roll(arr , 1 , axis = 1)
1289/12: arr
1290/1: import email
1290/2: import smtplib
1290/3: import ssl
1290/4: from email import encoders
1290/5: from email.mime.base import MIMEBase
1290/6: from email.mime.multipart import MIMEMultipart
1290/7: from email.mime.text import MIMEText
1291/1: import random
1291/2: random.random()
1292/1: import numpy as np
1293/1: ?np.ones
1293/2: htop
1293/3: q
1294/1: ?np.dot
1295/1: np.double
1296/1: 5!
1296/2: 1 * 2 * 3 * 4 * 5
1297/1: ?zip
1297/2: a = [[1 , 2 , 3] , [4 , 5 , 6]]
1297/3: zip(*a)
1297/4: list(zip(*a))
1297/5: list(map(list, zip(*a)))
1297/6:
def transpose(matrix):
    return list(map(list, zip(*matrix)))
1297/7: transpose(a)
1299/1: import numpy as np
1300/1: import cadquerry
1300/2: import cadquery
1301/1: import cadquery
1302/1: import cadquery
1303/1: cq.rect
1303/2: cq.Workplane("XY")
1303/3: ?cq.Workplane("XY").rect
1303/4: cq.Workplane("XY").rect
1305/1: import cq_editor
1305/2: cq_editor
1305/3: cq_editor.show_object
1306/1: import numpy as np
1306/2: np.ones((2 , 2))
1306/3: np.ones((2, 2)).flatten()
1306/4: np.ones((2, 2)).flatten().min()
1306/5: np.ones((2, 2)).flatten().minmax()
1306/6: from scipy.linalg import blas as FB
1306/7: ?FB.dgemm
1307/1:
import numpy as np
from scipy.linalg.blas import dgemm

# Create two 3x3 arrays
a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=np.float64)
b = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]], dtype=np.float64)

# Create a 3x3 output array
c = np.empty_like(a)

# Perform an in-place matrix multiplication
dgemm(alpha=1.0, a=a, b=b, beta=0.0, c=c, overwrite_c=True)

print(c)
1307/2: np.matmul(a, b)
1307/3:
import numpy as np
from scipy.linalg.blas import dgemm

# Create two 3x3 arrays
a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=np.float64)
b = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]], dtype=np.float64)

# Create a 3x3 output array
c = np.empty_like(a)

# Perform an in-place matrix multiplication
dgemm(alpha=1.0, a=a, b=b, beta=0.0, c=c, overwrite_c=1)

print(c)
1307/4:
import numpy as np
from scipy.linalg.blas import dgemm

# Create two 3x3 arrays
a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=np.float64)
b = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]], dtype=np.float64)

# Create a 3x3 output array
c = np.empty_like(a)

# Perform an in-place matrix multiplication
dgemm(alpha=1.0, a=a, b=b, beta=0.0, c=c, overwrite_c=1)

print(c)
1307/5: a.dot(b)
1307/6: np.matmul(a , b)
1307/7: c
1307/8: a.dot(b)
1307/9: import turtle
1308/1:
import turtle


def dragon_curve(n, length):
    if n == 0:
        turtle.forward(length)
    else:
        turtle.left(45)
        dragon_curve(n - 1, length / 2**0.5)
        turtle.right(90)
        dragon_curve(n - 1, length / 2**0.5)
        turtle.left(45)


# Set up the turtle window and pen
turtle.setup(width=800, height=600)
turtle.penup()
turtle.goto(-300, 0)
turtle.pendown()

# Generate the Dragon curve
dragon_curve(14, 400)

# Keep the turtle window open until it is closed by the user
turtle.mainloop()
1308/2: import pygame
1309/1: import pygame
1310/1:
import pygame
import math


def dragon_curve(n, length, start_pos, angle=0):
    if n == 0:
        end_pos = (
            start_pos[0] + length * math.cos(math.radians(angle)),
            start_pos[1] + length * math.sin(math.radians(angle)),
        )
        pygame.draw.line(screen, (255, 255, 255), start_pos, end_pos)
        return end_pos
    else:
        length = length / math.sqrt(2)
        end_pos = dragon_curve(n - 1, length, start_pos, angle)
        angle -= 45
        end_pos = dragon_curve(n - 1, length, end_pos, angle + 90)
        angle += 45
        return end_pos


# Initialize pygame and create a window
pygame.init()
screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption("Dragon Curve")

# Draw the Dragon curve
start_pos = (100, 300)
end_pos = dragon_curve(14, 300, start_pos)

# Keep the window open until it is closed by the user
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            quit()
    pygame.display.update()
1311/1:
import pygame
import math


def dragon_curve(n, length, start_pos, angle=0):
    if n == 0:
        end_pos = (
            start_pos[0] + length * math.cos(math.radians(angle)),
            start_pos[1] + length * math.sin(math.radians(angle)),
        )
        pygame.draw.line(screen, (255, 255, 255), start_pos, end_pos)
        return end_pos
    else:
        length = length / math.sqrt(2)
        end_pos = dragon_curve(n - 1, length, start_pos, angle)
        angle -= 45
        end_pos = dragon_curve(n - 1, length, end_pos, angle + 90)
        angle += 45
        return end_pos


# Initialize pygame and create a window
pygame.init()
screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption("Dragon Curve")

# Draw the Dragon curve
start_pos = (100, 300)
end_pos = dragon_curve(14, 300, start_pos)

# Keep the window open until it is closed by the user
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            quit()
    pygame.display.update()
1312/1: import numpy as np
1313/1: import numpy as np
1312/2: np.random.randint(0 , high = 10)
1312/3: np.random.randint(0, high=10)
1312/4: np.random.randint(0, high=10)
1312/5: np.random.randint(0, high=10)
1312/6: np.random.randint(0, high=10)
1312/7: np.random.randint(0, high=10)
1312/8: np.random.randint(0, high=10)
1312/9: np.random.randint(0, high=10)
1312/10: np.random.randint(0, high=10)
1312/11: np.random.randint(0, high=10)
1312/12: np.random.randint(0, high=10)
1312/13: np.random.randint(0, high=10)
1312/14: np.random.randint(0, high=10)
1312/15: np.random.randint(0, high=10)
1312/16: np.random.randint(0, high=10)
1312/17: np.random.randint(0, high=10)
1312/18: np.random.randint(0, high=10)
1312/19: np.random.randint(0, high=10)
1312/20: np.random.randint(0, high=10)
1312/21: np.random.randint(0, high=10)
1312/22: np.random.randint(0, high=10)
1312/23: np.random.randint(0, high=10)
1312/24: np.random.randint(0, high=10)
1312/25: np.random.randint(0, high=10)
1312/26: np.random.randint(0, high=10)
1312/27: np.random.randint(0, high=10)
1312/28: np.random.randint(0, high=10)
1312/29: np.random.randint(0, high=10)
1312/30: np.random.randint(0, high=10)
1312/31: np.random.randint(0, high=10)
1312/32: np.random.randint(0, high=10)
1312/33: np.random.randint(0, high=10)
1312/34: np.random.randint(0, high=10)
1312/35: np.random.randint(0, high=10)
1312/36: np.random.randint(0, high=10)
1312/37: np.random.randint(0, high=10)
1312/38: np.random.randint(0, high=10)
1312/39: np.random.randint(0, high=10)
1312/40: np.random.randint(0, high=10)
1312/41: np.random.randint(0, high=10)
1312/42: np.random.randint(0, high=10)
1312/43: np.random.randint(0, high=10)
1312/44: np.random.randint(0, high=10)
1312/45: np.random.randint(0, high=10)
1312/46: np.random.randint(0, high=10)
1312/47: np.random.randint(0, high=10)
1312/48: np.random.randint(0, high=10)
1312/49: np.random.randint(0, high=10)
1312/50: np.random.randint(0, high=10)
1312/51: np.random.randint(0, high=10)
1312/52: np.random.randint(0, high=10)
1312/53: np.random.randint(0, high=10)
1312/54: np.random.randint(0, high=10)
1312/55: np.random.randint(0, high=10)
1312/56: np.random.randint(0, high=10)
1312/57: np.random.randint(0, high=10)
1312/58: np.random.randint(0, high=10)
1312/59: np.random.randint(0, high=10)
1314/1: import numpy as np
1314/2: np.abs(-1)
1314/3: np.abs(-1).dtype
1315/1:
for i in range(4):
    for j in range(3):
        for k in range(10):
            print(i, j, k)
            if k == 2:
                break
1316/1: 0.0 == 0.0
1318/1:
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import time

fig = plt.figure()
ax = fig.add_subplot(111, projection="3d")

cube = np.array(
    [
        [0, 0, 0],
        [1, 0, 0],
        [1, 1, 0],
        [0, 1, 0],
        [0, 0, 0],
        [0, 0, 1],
        [1, 0, 1],
        [1, 1, 1],
        [0, 1, 1],
        [0, 0, 1],
        [1, 0, 1],
        [1, 0, 0],
        [1, 1, 0],
        [1, 1, 1],
        [0, 1, 1],
        [0, 1, 0],
    ]
)

for i in range(100):
    ax.clear()
    ax.set_xlim([-1, 2])
    ax.set_ylim([-1, 2])
    ax.set_zlim([-1, 2])
    ax.plot(cube[:, 0], cube[:, 1], cube[:, 2])
    ax.view_init(elev=i, azim=i)
    plt.draw()
    plt.pause(0.01)

plt.show()
1319/1: import ROOT
1319/2: geometryFile = ROOT.TFile("./fatras_particles_initial.root" , "READ")
1319/3: geometryTree = geometryFile("particles")
1319/4: geometryTree = geometryFile.Get("particles")
1319/5: geometryTree
1319/6: geometryTree.ls
1319/7: geometryTree.ls()
1319/8:
for event in geometryTree:
    print(event)
1319/9:
for event in geometryTree:
    print(event)
1319/10: len(geometryTree)
1319/11: geometryTree.ls()
1319/12:
for event in geometryTree:
    particle_id = event.particle_id
    print(len(particle_id))
1319/13:
for event in geometryTree:
    val = event.vx
    print(len(val))
1319/14:
for event in geometryTree:
    event_id, particle_id = event.event_id, event.particle_id
    print(len(particle_id))
1319/15:
for event in geometryTree:
    event_id, particle_id = event.event_id, event.particle_id
    vx, vy, vz = event.vx, event.vy, event.vz
    print(len(particle_id))
1319/16:
for event in geometryTree:
    event_id, particle_id = event.event_id, event.particle_id
    vx, vy, vz = event.vx, event.vy, event.vz
    px, py, pz = event.px, event.py, event.pz
    print(len(particle_id))
1319/17:
for event in geometryTree:
    event_id, particle_id = event.event_id, event.particle_id
    vx, vy, vz = event.vx, event.vy, event.vz
    px, py, pz = event.px, event.py, event.pz
    eta, phi, pt = event.eta, event.phi, event.pt
    print(len(particle_id))
1319/18:
for event in geometryTree:
    event_id, particle_id = event.event_id, event.particle_id
    vx, vy, vz = event.vx, event.vy, event.vz
    px, py, pz = event.px, event.py, event.pz
    eta, phi, pt = event.eta, event.phi, event.pt
    print(len(pt))
1319/19:
for event in geometryTree:
    event_id, particle_id = event.event_id, event.particle_id
    vx, vy, vz = event.vx, event.vy, event.vz
    px, py, pz = event.px, event.py, event.pz
    eta, phi, pt = event.eta, event.phi, event.pt
    mass, charge = event.m, event.q
    print(len(pt))
1319/20: hitsFile = ROOT.TFile("./hits.root" , "READ")
1319/21: hitsTree = hitsFile.Get("hits")
1319/22: hitsTree.GetEntries()
1319/23:
for event in hitsTree:
    tx, ty, tz = event.tx, event.ty, event.tz
    print(tx)
1319/24:
for event in hitsTree:
    tx, ty, tz = event.tx, event.ty, event.tz
1319/25:
for event in hitsTree:
    tx, ty, tz = event.tx, event.ty, event.tz
    event_id, particle_id = event.event_id, event.particle_id
1319/26:
for event in hitsTree:
    tx, ty, tz = event.tx, event.ty, event.tz
    event_id, particle_id = event.event_id, event.particle_id
    print(tx)
1319/27:
for event in hitsTree:
    tx, ty, tz = event.tx, event.ty, event.tz
    event_id, particle_id = event.event_id, event.particle_id
    print(tx / 1000.0)
1319/28:
for event in geometryTree:
    event_id, particle_id = event.event_id, event.particle_id
    vx, vy, vz = event.vx, event.vy, event.vz
    px, py, pz = event.px, event.py, event.pz
    eta, phi, pt = event.eta, event.phi, event.pt
    mass, charge = event.m, event.q
    print(len(pt))
1319/29:
for event in geometryTree:
    event_id, particle_id = event.event_id, event.particle_id
    vx, vy, vz = event.vx, event.vy, event.vz
    px, py, pz = event.px, event.py, event.pz
    eta, phi, pt = event.eta, event.phi, event.pt
    mass, charge = event.m, event.q
    print(vx[0])
1319/30:
for event in geometryTree:
    event_id, particle_id = event.event_id, event.particle_id
    vx, vy, vz = event.vx, event.vy, event.vz
    px, py, pz = event.px, event.py, event.pz
    eta, phi, pt = event.eta, event.phi, event.pt
    mass, charge = event.m, event.q
    print(vy[0])
1319/31:
for event in geometryTree:
    event_id, particle_id = event.event_id, event.particle_id
    vx, vy, vz = event.vx, event.vy, event.vz
    px, py, pz = event.px, event.py, event.pz
    eta, phi, pt = event.eta, event.phi, event.pt
    mass, charge = event.m, event.q
    print(vz[0])
1319/32:
for event in geometryTree:
    event_id, particle_id = event.event_id, event.particle_id
    vx, vy, vz = event.vx, event.vy, event.vz
    px, py, pz = event.px, event.py, event.pz
    eta, phi, pt = event.eta, event.phi, event.pt
    mass, charge = event.m, event.q
    print(vz[0])exit
1320/1: ls
1320/2: import ROOT
1320/3: geometryFile = ROOT.TFile("./pythia/fatras_particles_initial.root", "READ")
1320/4: geometryTree = geometryFile.Get("particles")
1320/5: ii = 0
1320/6:
for event in geometryTree:
    ii += 1
    event_id = event.event_id
    print(event_id[0])
1320/7: ii = 0
1320/8:
for event in geometryTree:
    ii += 1
    event_id = event.event_id
    print(event_id)
1320/9: ii
1321/1: import numpy as np
1321/2: np.random.randint(0 , 1 , size = 10)
1321/3: np.random.randint(0 , 2 , size = 10)
1321/4: np.random.randint(0, 2, size=10).dtype
1321/5: np.random.randint(0, 2, size=10 , dtype = np.uint8)
1321/6: np.binary_repr(%)
1321/7: np.random.randint(0, 2, size=10, dtype=np.uint8)
1321/8: np.binary_repr(np.random.randint(0, 2, size=10, dtype=np.uint8))
1321/9: list(map lambda x : np.binary_repr(x) , np.random.randint(0, 2, size=10, dtype=np.uint8))
1321/10: list(map(lambda x : np.binary_repr(x) , np.random.randint(0, 2, size=10, dtype=np.uint8)))
1321/11: np.random.randint(0, 2, size=10, dtype=np.uint8))
1321/12: np.random.randint(0, 2, size=10, dtype=np.uint8)
1321/13: np.binary_repr(np.random.randint(0, 2, size=10, dtype=np.uint8)[0])
1321/14: np.binary_repr(1)
1321/15: list(map(lambda x : np.binary_repr(x , width = 8) , np.random.randint(0, 2, size=10, dtype=np.uint8)))
1321/16:
" ".join(
    list(
        map(
            lambda x: np.binary_repr(x, width=8),
            np.random.randint(0, 2, size=10, dtype=np.uint8),
        )
    )
)
1321/17:
" ".join(
    list(
        map(
            lambda x: np.binary_repr(x, width=8),
            np.random.randint(0, 2, size=10, dtype=np.uint8),
        )
    )
)
1321/18:
" ".join(
    list(
        map(
            lambda x: np.binary_repr(x, width=8),
            np.random.randint(0, 2, size=10, dtype=np.uint8),
        )
    )
)
1321/19:
def binRepresentation(y):
    return " ".join(
        list(
            map(
                lambda x: np.binary_repr(x, width=8),
                y,
            )
        )
    )
1321/20:
def randBinVector(n):
    return np.random.randint(0, 2, size=10, dtype=np.uint8)
1321/21: a = randBinVector(10)
1321/22: b = randBinVector(10)
1321/23: binRepresentation(a)
1321/24: binRepresentation(b)
1321/25:
def randBinVector(n):
    return np.random.randint(0, 256, size=10, dtype=np.uint8)
1321/26: 2**8
1321/27: a = randBinVector(10)
1321/28: b = randBinVector(10)
1321/29: binRepresentation(a)
1321/30: binRepresentation(b)
1321/31:
def binXor(x, y):
    np.logical_xor(x, y)
1321/32: binRepresentation(binXor(a, b))
1321/33: np.a
1321/34: a
1321/35: b
1321/36: np.logical_xor(a, b)
1321/37: np.bitwise_xor(a, b)
1322/1: import numpy as np
1322/2:
def binRepresentation(y):
    return " ".join(
        list(
            map(
                lambda x: np.binary_repr(x, width=8),
                y,
            )
        )
    )
1322/3:
def randBinVector(n):
    return np.random.randint(0, 256, size=10, dtype=np.uint8)
1322/4:
def binXor(x, y):
    np.binary_xor(x, y)
1322/5: a = randBinVector(10)
1322/6: b = randBinVector(10)
1322/7: binRepresentation(x)
1322/8: binRepresentation(a)
1322/9: binRepresentation(b)
1322/10: binRepresentation(binXor(a, b))
1322/11:
def binXor(x, y):
    np.bitwise_xor(x, y)
1322/12: binRepresentation(a)
1322/13: binRepresentation(b)
1322/14: binRepresentation(binXor(a, b))
1322/15: np.bitwise_xor(a, b)
1322/16: binRepresentation(np.bitwise_xor(a, b))
1322/17:
def binXor(x, y):
    np.bitwise_xor(x, y)
1322/18: binRepresentation(a)
1322/19: binRepresentation(b)
1322/20: binRepresentation(np.bitwise_xor(a, b))
1322/21:
def binXum(x, y):
    np.bitwise_or(x, y)
1322/22:
def binSum(x, y):
    np.bitwise_or(x, y)
1322/23: binRepresentation(a)
1322/24: binRepresentation(b)
1322/25: binRepresentation(binSum(a, b))
1322/26: binSum(a, b)
1322/27:
def binSum(x, y):
    return np.bitwise_or(x, y)
1322/28: binRepresentation(a)
1322/29: binRepresentation(b)
1322/30: binRepresentation(binSum(a, b))
1323/1: import torch
1324/1: ?sorted
1325/1: 1.0 / 0.0
1325/2: a = 1.0 / 0.0
1325/3: a
1325/4: from math import isnan
1325/5: ?isnan
1325/6: float('nan')
1325/7: a = float('nan')
1325/8: b = a + 1
1325/9: b
1325/10: type(d)
1325/11: type(b)
1325/12: Real
1325/13: from numbers import Real
1325/14: type(Real)
1325/15: isinstance(1, Real)
1325/16: isinstance(1.0, Real)
1325/17: isinstance(b, Real)
1326/1: import subprocess
1326/2: ?subprocess.run
1326/3: subprocess.run(["gzip", "-v"])
1327/1: import subprocess
1327/2: subprocess.run(["gzip", "--version"])
1327/3: gzip = subprocess.run(["gzip", "--version"])
1327/4: gzip
1327/5: gzip.returncode
1327/6: ?subprocess.run
1327/7: gzip = subprocess.run(["gzip", "--version"] , capture_output = True)
1327/8: gzip
1328/1: import re
1328/2: ?re.match
1328/3: re.match("<layer>", "This is the first <layer>")
1328/4: re.match('<layer>', "This is the first <layer>")
1328/5: re.match('layer', "This is the first <layer>")
1328/6: re.match(r"layer", "this is a layer")
1328/7: re.findall(r"layer", "this is a layer")
1328/8: re.search(r"layer", "this is a layer")
1328/9: "this is a layer"[10:15]
1328/10: re.findall('</layer>' , "<layer> this is the contents of the layer </layer>")
1328/11: re.findall('>.*</layer>' , "<layer> this is the contents of the layer </layer>")
1328/12: re.findall('<layer>.*</layer>' , "<layer> this is the contents of the layer </layer>")
1328/13: re.findall('<layer>.*?</layer>' , "<layer> this is the contents of the layer </layer>")
1328/14: re.findall('<layer>.*?</layer>' , "<layer> \nthis is the contents of the layer \n</layer> \n<layer> this is the contents of another layer </layer>")
1328/15:
re.findall(
    "<layer>.*</layer>",
    "<layer> \nthis is the contents of the layer \n</layer> \n<layer> this is the contents of another layer </layer>",
)
1328/16:
re.findall(
    "<layer>.*</layer>",
    "<layer> this is the contents of the layer </layer> <layer> this is the contents of another layer </layer>",
)
1328/17:
re.findall(
    "<layer>.*?</layer>",
    "<layer> this is the contents of the layer </layer> <layer> this is the contents of another layer </layer>",
)
1328/18:
re.search(
    "<layer>.*?</layer>",
    "<layer> this is the contents of the layer </layer> <layer> this is the contents of another layer </layer>",
)
1328/19:
re.findall(
    "<layer>.*?</layer>",
    "<layer> this is the contents of the layer </layer> <layer> this is the contents of another layer </layer>",
)
1328/20:
re.findall(
    "<layer>.*</layer>",
    "<layer> \nthis is the contents of the layer \n</layer> \n<layer> this is the contents of another layer </layer>",
    flags=re.DOTALL,
)
1328/21:
re.findall(
    "<layer>.*?</layer>",
    "<layer> \nthis is the contents of the layer \n</layer> \n<layer> this is the contents of another layer </layer>",
    flags=re.DOTALL,
)
1328/22:
re.search(
    "<layer>.*?</layer>",
    "<layer> \nthis is the contents of the layer \n</layer> \n<layer> this is the contents of another layer </layer>",
    flags=re.DOTALL,
)
1328/23: ?re.finditer
1328/24:
it = re.finditer(
    "<layer>.*?</layer>",
    "<layer> \nthis is the contents of the layer \n</layer> \n<layer> this is the contents of another layer </layer>",
    flags=re.DOTALL,
)
1328/25: [x for x in it]
1328/26: [x.group() for x in it]
1328/27: [x for x in it]
1328/28:
it = re.finditer(
    "<layer>.*?</layer>",
    "<layer> \nthis is the contents of the layer \n</layer> \n<layer> this is the contents of another layer </layer>",
    flags=re.DOTALL,
)
1328/29:
[
    x
    for x in re.finditer(
        "<layer>.*?</layer>",
        "<layer> \nthis is the contents of the layer \n</layer> \n<layer> this is the contents of another layer </layer>",
        flags=re.DOTALL,
    )
]
1328/30:
[
    x.group()
    for x in re.finditer(
        "<layer>.*?</layer>",
        "<layer> \nthis is the contents of the layer \n</layer> \n<layer> this is the contents of another layer </layer>",
        flags=re.DOTALL,
    )
]
1328/31:
[
    x.span
    for x in re.finditer(
        "<layer>.*?</layer>",
        "<layer> \nthis is the contents of the layer \n</layer> \n<layer> this is the contents of another layer </layer>",
        flags=re.DOTALL,
    )
]
1328/32:
[
    x.span()
    for x in re.finditer(
        "<layer>.*?</layer>",
        "<layer> \nthis is the contents of the layer \n</layer> \n<layer> this is the contents of another layer </layer>",
        flags=re.DOTALL,
    )
]
1329/1: a = "this is a string"
1329/2: b = a[:]
1329/3: a
1329/4: b
1329/5: a[2:4] = 'F'
1329/6: a[2:4].replace("this" , "THIS")
1329/7: a
1329/8: a.replace("this" , "THIS")
1329/9: ?a.replace
1329/10: import string
1330/1: "1 , 2 , 3"[3:]
1330/2: len("1 , 2 , 3")
1330/3: len("012345")
1330/4: "012345"[0:6]
1331/1: import layer
1332/1: %load_ext autoreload
1332/2: %autoreload 2
1332/3: import layer
1332/4: from layer import *
1332/5: u = getUnzipped("./a.xopp")
1332/6: u = getUnzipped("./a.xopp")
1332/7: u
1332/8: getPagesRange(u)
1332/9: u = getUnzipped("./a.xopp")
1332/10: u
1332/11: getPagesRange(u)
1332/12: getPagesRange(u)
1332/13: getLayersRange(u)
1332/14: u = getUnzipped("./a.xopp")
1332/15: u
1332/16: getStrokesRange(u)
1332/17: u[148196:148214]
1332/18: u[147969:147987]
1332/19: getPagesRange(u)
1332/20: from layer import *
1332/21: pages = getPagesRange(u)
1332/22: layers = getLayersRange(u)
1332/23: strokes = getStrokesRange(u)
1332/24: pages
1332/25: filterInRange(pages[1], layers)
1332/26: filterInRange(pages[1], layers)
1332/27: filterInRange(filterInRange(pages[1], layers)[2], strokes)
1332/28: filterInRange(filterInRange(pages[0], layers)[2], strokes)
1332/29: filterInRange(filterInRange(pages[0], layers)[1], strokes)
1332/30: filterInRange(filterInRange(pages[0], layers)[0], strokes)
1332/31: from layer import *
1332/32: getStroke(u, 0, 0, 0)
1332/33: getStroke(u, 0, 0, 0)
1332/34: getStroke(u, 0, 0, 0)
1332/35: print(getStroke(u, 0, 0, 0))
1332/36: print(getStroke(u, 0, 0, 0))
1332/37: print(getStroke(u, 1, 2, 0))
1332/38: print(getStroke(u, 0, 0, 0))
1332/39: u
1332/40: print(getStroke(u, 0, 0, 0))
1332/41: print(getStroke(u, 1, 2, 0))
1332/42: print(getStroke(u, 1, 2, 0))
1332/43: u = getUnzipped("./a.xopp")
1332/44: ls
1332/45: from layer import *
1332/46: getStroke("a.xopp", "b", 1, 2, 0)
1332/47: ls
1332/48: cat a
1332/49: from layer import *
1332/50: getStroke("a.xopp", "b", 1, 2, 0)
1332/51: getStroke("a.xopp", "b", 1, 2, 0)
1332/52: 1.0 if True else 0.0
1332/53: getStroke("a.xopp", "b", 1, 2, 0)
1332/54: range((0 , 10))
1332/55: from layer import *
1332/56: getStroke("a.xopp", "b", 1, 2, 0)
1332/57: getStroke("a.xopp", "b", 1, 2, 0)
1332/58: u = getUnzipped("./a.xopp")
1332/59: getSingleStroke("a.xopp", "b", 1, 2, 0)
1332/60: getSingleStroke(u , 1, 2, 0)
1332/61: from layer import *
1332/62: from layer import *
1332/63: pgs = splitStrokes("a.xopp", "temp")
1332/64: pgs
1332/65: len(pgs)
1332/66: str(123).zfill(10)
1332/67: pgs = splitStrokes("a.xopp", "temp")
1332/68: pgs = splitStrokes("a.xopp", "temp")
1332/69: pgs = splitStrokes("a.xopp", "temp")
1332/70: pgs = splitStrokes("a.xopp", "temp")
1332/71: ls ./temp/
1332/72: pgs = splitStrokes("a.xopp", "temp")
1332/73: pgs = splitStrokes("a.xopp", "temp")
1332/74: pgs = splitStrokes("a.xopp", "temp")
1332/75: pgs = splitStrokes("a.xopp", "temp")
1332/76: pgs = splitStrokes("a.xopp", "temp")
1332/77: pgs = splitStrokes("a.xopp", "temp")
1332/78: pgs = splitStrokes("a.xopp", "temp")
1332/79: pgs = splitStrokes("a.xopp", "temp")
1332/80: pgs = splitStrokes("a.xopp", "temp")
1332/81: pgs = splitStrokes("a.xopp", "temp")
1332/82: pgs = splitStrokes("a.xopp", "temp")
1332/83: pgs = splitStrokes("a.xopp", "temp")
1332/84: pgs = splitStrokes("a.xopp", "temp")
1332/85: pgs = splitStrokes("a.xopp", "temp")
1332/86: pgs = splitStrokes("a.xopp", "temp")
1332/87: pgs = splitStrokes("a.xopp", "temp")
1332/88: import os
1332/89: os.path.dirname("/home/kacper/Documents")
1332/90: os.path.basename("/home/kacper/Documents")
1332/91: pgs = splitStrokes("a.xopp", "temp")
1332/92: pgs = splitStrokes("a.xopp", "temp")
1332/93: pgs = splitStrokes("a.xopp", "temp")
1333/1: from layer import *
1333/2: splitStrokes("a.xopp", "temp")
1333/3: splitStrokes("a.xopp", "temp")
1333/4: from layer import *
1333/5: splitStrokes("a.xopp", "temp")
1334/1: from layer import *
1334/2: splitStrokes("a.xopp", "temp")
1334/3: splitStrokes("a.xopp", "temp")
1334/4: import os
1334/5: ?os.mkdir
1335/1: %load_ext autoreload
1335/2: %autoreload 2
1335/3: from layer import *
1335/4: splitStrokes("a.xopp", "temp")
1335/5: splitStrokes("a.xopp", "temp")
1335/6: splitStrokes("a.xopp", "temp")
1336/1: from layer import *
1336/2: splitStrokes("a.xopp", "temp")
1336/3: pwd
1336/4: exot
1337/1: %load_ext autoreload
1337/2: %autoreload 2
1337/3: from layer import *
1337/4: splitStrokes("a.xopp", "temp")
1337/5: splitStrokes("a.xopp", "temp")
1337/6: pwd
1338/1: import os
1338/2: os.pwd
1338/3: os.pwd()
1338/4: os.curdir()
1338/5: os.curdir
1339/1: from layer import *
1339/2: splitStrokes("a.xopp", "temp")
1339/3: pwd
1339/4: pwd
1339/5: splitStrokes("a.xopp", "temp")
1339/6: splitStrokes("a.xopp", "temp")
1339/7: %load_ext autoreload
1339/8: %autoreload 2
1339/9: from layer import *
1339/10: splitStrokes("a.xopp", "temp")
1339/11: splitStrokes("a.xopp", "temp")
1339/12: splitStrokes("a.xopp", "temp")
1339/13: splitStrokes("a.xopp", "temp")
1339/14: import re
1339/15: stroke = '<stroke tool="pen" ts="0ll" fn="" color="#000000ff" width="2.26000000 0.48575378 0.51668671 0.54427460 0.62045166 0.83243011 1.11396454 1.13827637 1.15593262 1.17579590 1.19014160 1.19786621 1.20341827 1.21334991 1.21555695 1.24204132 1.24866241 1.25417999 1.25859406 1.26080109 1.26411163 1.26742218 1.27407776 1.27738831 1.28731995 1.30718323 1.34028870 1.34915131 1.35025482 1.35246185 1.35246185 1.34473724 1.33256409 1.31270081 1.28621643 1.25638702 1.22328156 1.19014160 1.15703613 1.13386230 1.12720673 1.12720673 1.13386230 1.20452179 1.22107452 1.23321320 1.24645538 1.25749054 1.26631866 1.26631866 1.27187073 1.27407776 1.28290588 1.28842346 1.28842346 1.27959534 1.26631866 1.26521515 1.26521515 1.26962921 1.37894623 1.45512329 1.48271118 1.48271118 1.47498657 1.37563568 1.19622818 1.01682068 0.79086551 0.56491034 0.33895517 0.11300000">292.04678346 76.31176593 292.04678346 75.95497488 292.04678346 75.52686799 292.04678346 74.88467235 292.04678346 74.38524961 291.97532640 73.81444042 291.68946284 73.95714272 291.54654871 74.38524961 291.40363458 75.09876110 291.26068515 76.09767718 291.18922809 77.23936617 291.26068515 78.38098455 291.54654871 79.30858479 292.11824052 80.02209628 292.83288177 80.45027378 293.76189420 80.59297608 294.76236370 80.45027378 295.69137613 80.02209628 296.62038857 79.16588249 297.33499451 78.09557996 297.76377219 76.81125928 297.90672162 75.52686799 297.69231513 74.31386316 297.12062332 73.31494707 296.26306794 72.67275143 295.19114138 72.38734683 294.19067189 72.53004913 293.26165945 72.95815602 292.54701821 73.74305397 292.11824052 74.81335650 291.83241227 76.02636134 292.04678346 77.23936617 292.54701821 78.30966871 293.54748771 79.09456665 294.83382076 79.52267354 296.33452501 79.73669169 297.97817869 79.59398939 299.55034000 79.09456665 301.12253661 78.38098455 302.33737730 77.45338431 303.12347561 76.66855698 303.55225329 76.09767718 303.69516742 75.74095674 303.26638973 75.81227259 302.90906911 76.31176593 302.55178379 77.02527742 302.40883436 78.02426411 302.55178379 79.02318020 302.83761205 80.02209628 303.33784680 80.73567838 303.83808155 81.23510111 304.48126573 81.44918987 305.26732873 81.37780341 306.05342704 80.87838068 307.05389653 79.87939398 308.05436603 78.38098455 309.05487083 76.66855698 309.91239090 75.31284985 310.48411802 74.38524961 310.84140333 73.95714272 311.05580983 74.17116086 311.05580983 74.95605880 311.12726689 76.16906364 311.34163808 77.73885952 311.77041577 79.37997125 312.48505701 80.73567838 313.02102029 81.27082965 313.55698357 81.80598092 313.87856684 81.96651217 314.20015010 82.12704343 314.52173337 82.28757469 314.84331663 82.44810595</stroke>'
1339/16: stroke
1339/17: splitStrokes("a.xopp", "temp")
1339/18: stroke
1339/19: re.match('width=".*"', stroke)
1339/20: ?re.match
1339/21: re.match('width', stroke)
1339/22: re.match(r"width=\"", stroke)
1339/23: re.match('width=', stroke)
1339/24: re.finditer('width=', stroke)
1339/25: [x for x in re.finditer('width=', stroke)]
1339/26: [x.match() for x in re.finditer('width=', stroke)]
1339/27: [x.match for x in re.finditer('width=', stroke)]
1339/28: it = re.finditer('width=', stroke)
1339/29: it
1339/30: it()
1339/31: re.search('width=', stroke)
1339/32: re.search("width=", stroke).groups
1339/33: re.search("width=", stroke).groups()
1339/34: re.search("width=", stroke).string
1339/35: re.search('width=".*?"', stroke)
1339/36: re.search('width="(.*?)"', stroke)
1339/37: re.search('width="(.*?)"', stroke).group(1)
1339/38: splitStrokes("a.xopp", "temp")
1339/39: splitStrokes("a.xopp", "temp")
1339/40: from layer import *
1339/41: from layer import *
1339/42: splitStrokes("a.xopp", "temp")
1339/43: stroke
1339/44: ?re.sub
1339/45: stroke = '<stroke tool="pen" ts="0ll" fn="" color="#000000ff" width="2.26000000 0.48575378 0.51668671 0.54427460 0.62045166 0.83243011 1.11396454 1.13827637 1.15593262 1.17579590 1.19014160 1.19786621 1.20341827 1.21334991 1.21555695 1.24204132 1.24866241 1.25417999 1.25859406 1.26080109 1.26411163 1.26742218 1.27407776 1.27738831 1.28731995 1.30718323 1.34028870 1.34915131 1.35025482 1.35246185 1.35246185 1.34473724 1.33256409 1.31270081 1.28621643 1.25638702 1.22328156 1.19014160 1.15703613 1.13386230 1.12720673 1.12720673 1.13386230 1.20452179 1.22107452 1.23321320 1.24645538 1.25749054 1.26631866 1.26631866 1.27187073 1.27407776 1.28290588 1.28842346 1.28842346 1.27959534 1.26631866 1.26521515 1.26521515 1.26962921 1.37894623 1.45512329 1.48271118 1.48271118 1.47498657 1.37563568 1.19622818 1.01682068 0.79086551 0.56491034 0.33895517 0.11300000">292.04678346 76.31176593 292.04678346 75.95497488 292.04678346 75.52686799 292.04678346 74.88467235 292.04678346 74.38524961 291.97532640 73.81444042 291.68946284 73.95714272 291.54654871 74.38524961 291.40363458 75.09876110 291.26068515 76.09767718 291.18922809 77.23936617 291.26068515 78.38098455 291.54654871 79.30858479 292.11824052 80.02209628 292.83288177 80.45027378 293.76189420 80.59297608 294.76236370 80.45027378 295.69137613 80.02209628 296.62038857 79.16588249 297.33499451 78.09557996 297.76377219 76.81125928 297.90672162 75.52686799 297.69231513 74.31386316 297.12062332 73.31494707 296.26306794 72.67275143 295.19114138 72.38734683 294.19067189 72.53004913 293.26165945 72.95815602 292.54701821 73.74305397 292.11824052 74.81335650 291.83241227 76.02636134 292.04678346 77.23936617 292.54701821 78.30966871 293.54748771 79.09456665 294.83382076 79.52267354 296.33452501 79.73669169 297.97817869 79.59398939 299.55034000 79.09456665 301.12253661 78.38098455 302.33737730 77.45338431 303.12347561 76.66855698 303.55225329 76.09767718 303.69516742 75.74095674 303.26638973 75.81227259 302.90906911 76.31176593 302.55178379 77.02527742 302.40883436 78.02426411 302.55178379 79.02318020 302.83761205 80.02209628 303.33784680 80.73567838 303.83808155 81.23510111 304.48126573 81.44918987 305.26732873 81.37780341 306.05342704 80.87838068 307.05389653 79.87939398 308.05436603 78.38098455 309.05487083 76.66855698 309.91239090 75.31284985 310.48411802 74.38524961 310.84140333 73.95714272 311.05580983 74.17116086 311.05580983 74.95605880 311.12726689 76.16906364 311.34163808 77.73885952 311.77041577 79.37997125 312.48505701 80.73567838 313.02102029 81.27082965 313.55698357 81.80598092 313.87856684 81.96651217 314.20015010 82.12704343 314.52173337 82.28757469 314.84331663 82.44810595</stroke>'
1339/46: splitStroke(stroke)
1339/47: from layer import *
1339/48: splitStroke(stroke)
1339/49: splitStrokePath(stroke)
1339/50: splitStrokePath(stroke)
1339/51: splitStrokePath(stroke)
1339/52: splitStrokePath(stroke)[0]
1339/53: splitStrokePath(stroke)[1]
1339/54: splitStrokePath(stroke)[1]
1339/55: splitStrokePath(stroke)[1]
1339/56: splitStrokePath(stroke)[2]
1339/57: splitStrokes("a.xopp", "temp")
1339/58: from layer import *
1339/59: splitStrokes("a.xopp", "temp")
1339/60: splitStrokes("a.xopp", "temp")
1339/61: from layer import *
1339/62: splitStrokes("a.xopp", "temp")
1339/63: stroke
1339/64: splitStrokes("a.xopp", "temp")
1339/65: splitStrokes("a.xopp", "temp")
1340/1: import re
1340/2: stroke = '<stroke tool="pen" ts="0ll" fn="" color="#000000ff" width="2.26000000 0.48575378 0.51668671 0.54427460 0.62045166 0.83243011 1.11396454 1.13827637 1.15593262 1.17579590 1.19014160 1.19786621 1.20341827 1.21334991 1.21555695 1.24204132 1.24866241 1.25417999 1.25859406 1.26080109 1.26411163 1.26742218 1.27407776 1.27738831 1.28731995 1.30718323 1.34028870 1.34915131 1.35025482 1.35246185 1.35246185 1.34473724 1.33256409 1.31270081 1.28621643 1.25638702 1.22328156 1.19014160 1.15703613 1.13386230 1.12720673 1.12720673 1.13386230 1.20452179 1.22107452 1.23321320 1.24645538 1.25749054 1.26631866 1.26631866 1.27187073 1.27407776 1.28290588 1.28842346 1.28842346 1.27959534 1.26631866 1.26521515 1.26521515 1.26962921 1.37894623 1.45512329 1.48271118 1.48271118 1.47498657 1.37563568 1.19622818 1.01682068 0.79086551 0.56491034 0.33895517 0.11300000">292.04678346 76.31176593 292.04678346 75.95497488 292.04678346 75.52686799 292.04678346 74.88467235 292.04678346 74.38524961 291.97532640 73.81444042 291.68946284 73.95714272 291.54654871 74.38524961 291.40363458 75.09876110 291.26068515 76.09767718 291.18922809 77.23936617 291.26068515 78.38098455 291.54654871 79.30858479 292.11824052 80.02209628 292.83288177 80.45027378 293.76189420 80.59297608 294.76236370 80.45027378 295.69137613 80.02209628 296.62038857 79.16588249 297.33499451 78.09557996 297.76377219 76.81125928 297.90672162 75.52686799 297.69231513 74.31386316 297.12062332 73.31494707 296.26306794 72.67275143 295.19114138 72.38734683 294.19067189 72.53004913 293.26165945 72.95815602 292.54701821 73.74305397 292.11824052 74.81335650 291.83241227 76.02636134 292.04678346 77.23936617 292.54701821 78.30966871 293.54748771 79.09456665 294.83382076 79.52267354 296.33452501 79.73669169 297.97817869 79.59398939 299.55034000 79.09456665 301.12253661 78.38098455 302.33737730 77.45338431 303.12347561 76.66855698 303.55225329 76.09767718 303.69516742 75.74095674 303.26638973 75.81227259 302.90906911 76.31176593 302.55178379 77.02527742 302.40883436 78.02426411 302.55178379 79.02318020 302.83761205 80.02209628 303.33784680 80.73567838 303.83808155 81.23510111 304.48126573 81.44918987 305.26732873 81.37780341 306.05342704 80.87838068 307.05389653 79.87939398 308.05436603 78.38098455 309.05487083 76.66855698 309.91239090 75.31284985 310.48411802 74.38524961 310.84140333 73.95714272 311.05580983 74.17116086 311.05580983 74.95605880 311.12726689 76.16906364 311.34163808 77.73885952 311.77041577 79.37997125 312.48505701 80.73567838 313.02102029 81.27082965 313.55698357 81.80598092 313.87856684 81.96651217 314.20015010 82.12704343 314.52173337 82.28757469 314.84331663 82.44810595</stroke>'
1340/3: [x for x in re.finditer('<stroke.*?</stroke>' , stroke , flags = re.DOTALL)]
1340/4: [x.string for x in re.finditer('<stroke.*?</stroke>' , stroke , flags = re.DOTALL)]
1340/5: [x.string for x in re.finditer('(<stroke.*?</stroke>)|(<image.*?</image>)' , stroke , flags = re.DOTALL)]
1340/6: stroke = '<image tool="pen" ts="0ll" fn="" color="#000000ff" width="2.26000000 0.48575378 0.51668671 0.54427460 0.62045166 0.83243011 1.11396454 1.13827637 1.15593262 1.17579590 1.19014160 1.19786621 1.20341827 1.21334991 1.21555695 1.24204132 1.24866241 1.25417999 1.25859406 1.26080109 1.26411163 1.26742218 1.27407776 1.27738831 1.28731995 1.30718323 1.34028870 1.34915131 1.35025482 1.35246185 1.35246185 1.34473724 1.33256409 1.31270081 1.28621643 1.25638702 1.22328156 1.19014160 1.15703613 1.13386230 1.12720673 1.12720673 1.13386230 1.20452179 1.22107452 1.23321320 1.24645538 1.25749054 1.26631866 1.26631866 1.27187073 1.27407776 1.28290588 1.28842346 1.28842346 1.27959534 1.26631866 1.26521515 1.26521515 1.26962921 1.37894623 1.45512329 1.48271118 1.48271118 1.47498657 1.37563568 1.19622818 1.01682068 0.79086551 0.56491034 0.33895517 0.11300000">292.04678346 76.31176593 292.04678346 75.95497488 292.04678346 75.52686799 292.04678346 74.88467235 292.04678346 74.38524961 291.97532640 73.81444042 291.68946284 73.95714272 291.54654871 74.38524961 291.40363458 75.09876110 291.26068515 76.09767718 291.18922809 77.23936617 291.26068515 78.38098455 291.54654871 79.30858479 292.11824052 80.02209628 292.83288177 80.45027378 293.76189420 80.59297608 294.76236370 80.45027378 295.69137613 80.02209628 296.62038857 79.16588249 297.33499451 78.09557996 297.76377219 76.81125928 297.90672162 75.52686799 297.69231513 74.31386316 297.12062332 73.31494707 296.26306794 72.67275143 295.19114138 72.38734683 294.19067189 72.53004913 293.26165945 72.95815602 292.54701821 73.74305397 292.11824052 74.81335650 291.83241227 76.02636134 292.04678346 77.23936617 292.54701821 78.30966871 293.54748771 79.09456665 294.83382076 79.52267354 296.33452501 79.73669169 297.97817869 79.59398939 299.55034000 79.09456665 301.12253661 78.38098455 302.33737730 77.45338431 303.12347561 76.66855698 303.55225329 76.09767718 303.69516742 75.74095674 303.26638973 75.81227259 302.90906911 76.31176593 302.55178379 77.02527742 302.40883436 78.02426411 302.55178379 79.02318020 302.83761205 80.02209628 303.33784680 80.73567838 303.83808155 81.23510111 304.48126573 81.44918987 305.26732873 81.37780341 306.05342704 80.87838068 307.05389653 79.87939398 308.05436603 78.38098455 309.05487083 76.66855698 309.91239090 75.31284985 310.48411802 74.38524961 310.84140333 73.95714272 311.05580983 74.17116086 311.05580983 74.95605880 311.12726689 76.16906364 311.34163808 77.73885952 311.77041577 79.37997125 312.48505701 80.73567838 313.02102029 81.27082965 313.55698357 81.80598092 313.87856684 81.96651217 314.20015010 82.12704343 314.52173337 82.28757469 314.84331663 82.44810595</image>'
1340/7:
[
    x.string
    for x in re.finditer(
        "(<stroke.*?</stroke>)|(<image.*?</image>)", stroke, flags=re.DOTALL
    )
]
1340/8: stroke = '<stroke tool="pen" ts="0ll" fn="" color="#000000ff" width="2.26000000 0.48575378 0.51668671 0.54427460 0.62045166 0.83243011 1.11396454 1.13827637 1.15593262 1.17579590 1.19014160 1.19786621 1.20341827 1.21334991 1.21555695 1.24204132 1.24866241 1.25417999 1.25859406 1.26080109 1.26411163 1.26742218 1.27407776 1.27738831 1.28731995 1.30718323 1.34028870 1.34915131 1.35025482 1.35246185 1.35246185 1.34473724 1.33256409 1.31270081 1.28621643 1.25638702 1.22328156 1.19014160 1.15703613 1.13386230 1.12720673 1.12720673 1.13386230 1.20452179 1.22107452 1.23321320 1.24645538 1.25749054 1.26631866 1.26631866 1.27187073 1.27407776 1.28290588 1.28842346 1.28842346 1.27959534 1.26631866 1.26521515 1.26521515 1.26962921 1.37894623 1.45512329 1.48271118 1.48271118 1.47498657 1.37563568 1.19622818 1.01682068 0.79086551 0.56491034 0.33895517 0.11300000">292.04678346 76.31176593 292.04678346 75.95497488 292.04678346 75.52686799 292.04678346 74.88467235 292.04678346 74.38524961 291.97532640 73.81444042 291.68946284 73.95714272 291.54654871 74.38524961 291.40363458 75.09876110 291.26068515 76.09767718 291.18922809 77.23936617 291.26068515 78.38098455 291.54654871 79.30858479 292.11824052 80.02209628 292.83288177 80.45027378 293.76189420 80.59297608 294.76236370 80.45027378 295.69137613 80.02209628 296.62038857 79.16588249 297.33499451 78.09557996 297.76377219 76.81125928 297.90672162 75.52686799 297.69231513 74.31386316 297.12062332 73.31494707 296.26306794 72.67275143 295.19114138 72.38734683 294.19067189 72.53004913 293.26165945 72.95815602 292.54701821 73.74305397 292.11824052 74.81335650 291.83241227 76.02636134 292.04678346 77.23936617 292.54701821 78.30966871 293.54748771 79.09456665 294.83382076 79.52267354 296.33452501 79.73669169 297.97817869 79.59398939 299.55034000 79.09456665 301.12253661 78.38098455 302.33737730 77.45338431 303.12347561 76.66855698 303.55225329 76.09767718 303.69516742 75.74095674 303.26638973 75.81227259 302.90906911 76.31176593 302.55178379 77.02527742 302.40883436 78.02426411 302.55178379 79.02318020 302.83761205 80.02209628 303.33784680 80.73567838 303.83808155 81.23510111 304.48126573 81.44918987 305.26732873 81.37780341 306.05342704 80.87838068 307.05389653 79.87939398 308.05436603 78.38098455 309.05487083 76.66855698 309.91239090 75.31284985 310.48411802 74.38524961 310.84140333 73.95714272 311.05580983 74.17116086 311.05580983 74.95605880 311.12726689 76.16906364 311.34163808 77.73885952 311.77041577 79.37997125 312.48505701 80.73567838 313.02102029 81.27082965 313.55698357 81.80598092 313.87856684 81.96651217 314.20015010 82.12704343 314.52173337 82.28757469 314.84331663 82.44810595</stroke><image>kslakmdlskdmaks</image>'
1340/9:
[
    x.string
    for x in re.finditer(
        "(<stroke.*?</stroke>)|(<image.*?</image>)", stroke, flags=re.DOTALL
    )
]
1340/10:
[
    x.string
    for x in re.finditer(
        "(<stroke.*?</stroke>|<image.*?</image>)", stroke, flags=re.DOTALL
    )
]
1340/11:
[
    x.string
    for x in re.finditer(
        "(?:<stroke.*?</stroke>|<image.*?</image>)", stroke, flags=re.DOTALL
    )
]
1340/12: s = "<stroke>lkasmldaksmd</stroke><image>askljdlakmd</image>"
1340/13: re.findall('stroke' , s , flags = re.DOTALL)
1340/14: re.findall('stroke|image' , s , flags = re.DOTALL)
1340/15: re.findall('</stroke>|</image>' , s , flags = re.DOTALL)
1340/16: re.findall('<stroke.*?</stroke>|</image>' , s , flags = re.DOTALL)
1340/17: re.findall('<stroke.*?</stroke>|<image.*?</image>' , s , flags = re.DOTALL)
1340/18:
[
    x.string
    for x in re.finditer(
        "<stroke.*?</stroke>|<image.*?</image>)", stroke, flags=re.DOTALL
    )
]
1340/19:
[
    x.string
    for x in re.finditer(
        "<stroke.*?</stroke>|<image.*?</image>", stroke, flags=re.DOTALL
    )
]
1340/20: re.findall("<stroke.*?</stroke>|<image.*?</image>", stroke, flags=re.DOTALL)
1340/21: stroke1 = stroke + stroke
1340/22:
[
    x.string
    for x in re.finditer(
        "<stroke.*?</stroke>|<image.*?</image>", stroke1, flags=re.DOTALL
    )
]
1340/23: [x.string for x in re.finditer("<stroke.*?</stroke>", stroke1, flags=re.DOTALL)]
1341/1: import "layer"
1341/2:
import imp

foobar = imp.load_source("layer", "layer")
1342/1: import re
1342/2: [x for x in re.finditer('<stroke.*?</stroke>' , unzipped , flags = re.DOTALL)]
1342/3: stroke = '<stroke tool="pen" ts="0ll" fn="" color="#000000ff" width="2.26000000 0.48575378 0.51668671 0.54427460 0.62045166 0.83243011 1.11396454 1.13827637 1.15593262 1.17579590 1.19014160 1.19786621 1.20341827 1.21334991 1.21555695 1.24204132 1.24866241 1.25417999 1.25859406 1.26080109 1.26411163 1.26742218 1.27407776 1.27738831 1.28731995 1.30718323 1.34028870 1.34915131 1.35025482 1.35246185 1.35246185 1.34473724 1.33256409 1.31270081 1.28621643 1.25638702 1.22328156 1.19014160 1.15703613 1.13386230 1.12720673 1.12720673 1.13386230 1.20452179 1.22107452 1.23321320 1.24645538 1.25749054 1.26631866 1.26631866 1.27187073 1.27407776 1.28290588 1.28842346 1.28842346 1.27959534 1.26631866 1.26521515 1.26521515 1.26962921 1.37894623 1.45512329 1.48271118 1.48271118 1.47498657 1.37563568 1.19622818 1.01682068 0.79086551 0.56491034 0.33895517 0.11300000">292.04678346 76.31176593 292.04678346 75.95497488 292.04678346 75.52686799 292.04678346 74.88467235 292.04678346 74.38524961 291.97532640 73.81444042 291.68946284 73.95714272 291.54654871 74.38524961 291.40363458 75.09876110 291.26068515 76.09767718 291.18922809 77.23936617 291.26068515 78.38098455 291.54654871 79.30858479 292.11824052 80.02209628 292.83288177 80.45027378 293.76189420 80.59297608 294.76236370 80.45027378 295.69137613 80.02209628 296.62038857 79.16588249 297.33499451 78.09557996 297.76377219 76.81125928 297.90672162 75.52686799 297.69231513 74.31386316 297.12062332 73.31494707 296.26306794 72.67275143 295.19114138 72.38734683 294.19067189 72.53004913 293.26165945 72.95815602 292.54701821 73.74305397 292.11824052 74.81335650 291.83241227 76.02636134 292.04678346 77.23936617 292.54701821 78.30966871 293.54748771 79.09456665 294.83382076 79.52267354 296.33452501 79.73669169 297.97817869 79.59398939 299.55034000 79.09456665 301.12253661 78.38098455 302.33737730 77.45338431 303.12347561 76.66855698 303.55225329 76.09767718 303.69516742 75.74095674 303.26638973 75.81227259 302.90906911 76.31176593 302.55178379 77.02527742 302.40883436 78.02426411 302.55178379 79.02318020 302.83761205 80.02209628 303.33784680 80.73567838 303.83808155 81.23510111 304.48126573 81.44918987 305.26732873 81.37780341 306.05342704 80.87838068 307.05389653 79.87939398 308.05436603 78.38098455 309.05487083 76.66855698 309.91239090 75.31284985 310.48411802 74.38524961 310.84140333 73.95714272 311.05580983 74.17116086 311.05580983 74.95605880 311.12726689 76.16906364 311.34163808 77.73885952 311.77041577 79.37997125 312.48505701 80.73567838 313.02102029 81.27082965 313.55698357 81.80598092 313.87856684 81.96651217 314.20015010 82.12704343 314.52173337 82.28757469 314.84331663 82.44810595</stroke><image>kslakmdlskdmaks</image>'
1342/4: [x for x in re.finditer("<stroke.*?</stroke>", unzipped, flags=re.DOTALL)]
1342/5: [x for x in re.finditer("<stroke.*?</stroke>", stroke, flags=re.DOTALL)]
1342/6: [x.string for x in re.finditer("<stroke.*?</stroke>", stroke, flags=re.DOTALL)]
1342/7: [x.group() for x in re.finditer("<stroke.*?</stroke>", stroke, flags=re.DOTALL)]
1342/8: stroke1 = stroke + stroke
1342/9: [x.group() for x in re.finditer("<stroke.*?</stroke>", stroke1, flags=re.DOTALL)]
1342/10:
[
    x.group()
    for x in re.finditer(
        "<stroke.*?</stroke>|<image.*?</image>", stroke1, flags=re.DOTALL
    )
]
1342/11: re.search('width="(.*?)"', stroke).group(1)
1342/12: re.search('width="(.*?)"', stroke).group(2)
1342/13: re.search('kjnkjnkjnkjnjkn', stroke)
1342/14: "</image>" in stroke
1343/1: import multiprocessing
1343/2:
with multiprocessing.Pool() as pool:
    for result in pool.map(lambda x: x * 2, [1, 2, 3, 4, 5]):
        print(result)
1343/3:
def mulbytwo(x):
    return x * 2
1343/4:
with multiprocessing.Pool() as pool:
    for result in pool.map(mulbytwo, [1, 2, 3, 4, 5]):
        print(result)
1343/5:
with multiprocessing.Pool() as pool:
    for result in pool.map(mulbytwo, [1, 2, 3, 4, 5], chunksize=10):
        print(result)
1343/6:
with multiprocessing.Pool() as pool:
    for result in pool.map(mulbytwo, ["1", "2", "3", "4", "5"], chunksize=10):
        print(result)
1343/7:
def w(x):
    return x[0] * 2 + x[1] * 3
1343/8:
with multiprocessing.Pool() as pool:
    for result in pool.map(mulbytwo, [(1, 2), (3, 4)], chunksize=10):
        print(result)
1343/9:
def w(x):
    print(x[0], x[1])
    return x[0] * 2 + x[1] * 3
1343/10:
with multiprocessing.Pool() as pool:
    for result in pool.map(mulbytwo, [(1, 2), (3, 4)], chunksize=10):
        print(result)
1343/11:
with multiprocessing.Pool() as pool:
    for result in pool.map(w, [(1, 2), (3, 4)], chunksize=10):
        print(result)
1343/12: import sys
1343/13: ?sys.stdout.write
1343/14: sys.stdout.write("123", flush=True)
1343/15: import subprocess
1343/16: subprocess.run(["sleep 1"])
1343/17: subprocess.run(["sleep , 1"])
1343/18: subprocess.run(["sleep" , "1"])
1343/19:
def w(x):
    subprocess.run(["sleep", "5"])
    return x[0] * 2 + x[1] * 3
1343/20:
with multiprocessing.Pool() as pool:
    for result in pool.map(w, [(1, 2), (3, 4)], chunksize=10):
        print(result)
1343/21:
with multiprocessing.Pool() as pool:
    for result in pool.map(w, [(1, 2), (3, 4), (5, 6), (7, 8)], chunksize=10):
        print(result)
1343/22:
def w(x):
    subprocess.run(["sleep", "1"])
    return x[0] * 2 + x[1] * 3
1343/23:
with multiprocessing.Pool() as pool:
    for result in pool.map(w, [(1, 2), (3, 4), (5, 6), (7, 8)], chunksize=10):
        print(result)
1343/24: ?subprocess.call
1343/25:
def w(x):
    subprocess.call(["sleep", "1"])
    return x[0] * 2 + x[1] * 3
1343/26:
with multiprocessing.Pool() as pool:
    for result in pool.map(w, [(1, 2), (3, 4), (5, 6), (7, 8)], chunksize=10):
        print(result)
1343/27:
with multiprocessing.Pool() as pool:
    for result in pool.map(w, [(1, 2), (3, 4), (5, 6), (7, 8)], chunksize=10):
        print(result)
1343/28:
def w(x):
    subprocess.call(["sleep", "2"])
    return x[0] * 2 + x[1] * 3
1343/29:
with multiprocessing.Pool() as pool:
    for result in pool.map(w, [(1, 2), (3, 4), (5, 6), (7, 8)], chunksize=10):
        print(result)
1343/30:
with multiprocessing.Pool() as pool:
    for result in pool.map(w, [(1, 2), (3, 4), (5, 6), (7, 8)]):
        print(result)
1343/31:
with multiprocessing.Pool() as pool:
    for result in pool.map(w, [(1, 2), (3, 4), (5, 6), (7, 8)]):
        print(result)
1343/32:
def w(x):
    subprocess.call(["sleep", "10"])
    return x[0] * 2 + x[1] * 3
1343/33:
with multiprocessing.Pool() as pool:
    for result in pool.map(w, [(1, 2), (3, 4), (5, 6), (7, 8)]):
        print(result)
1343/34:
def w(x):
    subprocess.run(["sleep", "10"])
    return x[0] * 2 + x[1] * 3
1343/35:
with multiprocessing.Pool() as pool:
    for result in pool.map(w, [(1, 2), (3, 4), (5, 6), (7, 8)]):
        print(result)
1343/36: w((1 , 1))
1343/37:
for i in range(2, 2 + 4):
    print(i)
1344/1: ?range
1344/2:
for i in range(4, 10, 3):
    print(i)
1344/3:
for i in list(range(4, 10, 3)) + [10 - 1]:
    print(i)
1345/1: list(range(10, 0, -2))
1345/2: reverse(list(range(10, 0, -2)))
1345/3: list(range(10, 0, -2)).reverse()
1345/4: r = range(10 , 0 , -2)
1345/5: rng = list(range(10, 0, -2))
1345/6: rng.reverse()
1345/7: rng
1345/8: rng = list(range(9, 0, -2))
1345/9: [0 , 1 , 2][:0]
1345/10: [0 , 1 , 2][:1]
1346/1: a = "0123456789"
1346/2: a[3]
1346/3: a[3:-2]
1348/1: import pyglet
1348/2: window = pyglet.window.Window()
1348/3: tablets = pyglet.input.get_tablets()
1348/4: tablets
1348/5: canvases = []
1348/6:
for i, tablet in enumerate(tablets):
    print(i, tablet.name)
1348/7:
@window.event
def on_text(text):
    try:
        index = int(text) - 1
    except ValueError:
        return

    if not (0 <= index < len(tablets)):
        return

    name = tablets[i].name

    try:
        canvas = tablets[i].open(window)
    except pyglet.input.DeviceException:
        print("Failed to open tablet %d on window" % index)

    print("Opened %s" % name)

    @canvas.event
    def on_enter(cursor):
        print("%s: on_enter(%r)" % (name, cursor))

    @canvas.event
    def on_leave(cursor):
        print("%s: on_leave(%r)" % (name, cursor))

    @canvas.event
    def on_motion(
        cursor, x, y, pressure, a, b
    ):  # if you know what "a" and "b" are tell me (tilt?)
        print(
            "%s: on_motion(%r, x=%r, y=%r, pressure=%r, %s, %s)"
            % (name, cursor, x, y, pressure, a, b)
        )


@window.event
def on_mouse_press(x, y, button, modifiers):
    print("on_mouse_press(%r, %r, %r, %r" % (x, y, button, modifiers))


@window.event
def on_mouse_release(x, y, button, modifiers):
    print("on_mouse_release(%r, %r, %r, %r" % (x, y, button, modifiers))
1348/8: pyglet.app.run()
1348/9:
@window.event
def on_text(text):
    try:
        index = int(text) - 1
    except ValueError:
        return

    if not (0 <= index < len(tablets)):
        return

    name = tablets[i].name

    try:
        canvas = tablets[i].open(window)
    except pyglet.input.DeviceException:
        print("Failed to open tablet %d on window" % index)

    print("Opened %s" % name)

    @canvas.event
    def on_enter(cursor):
        print("%s: on_enter(%r)" % (name, cursor))

    @canvas.event
    def on_leave(cursor):
        print("%s: on_leave(%r)" % (name, cursor))

    @canvas.event
    def on_motion(
        cursor, x, y, pressure, a, b
    ):  # if you know what "a" and "b" are tell me (tilt?)
        print(
            "%s: on_motion(%r, x=%r, y=%r, pressure=%r, %s, %s)"
            % (name, cursor, x, y, pressure, a, b)
        )


@window.event
def on_mouse_press(x, y, button, modifiers):
    print("on_mouse_press(%r, %r, %r, %r)" % (x, y, button, modifiers))


@window.event
def on_mouse_release(x, y, button, modifiers):
    print("on_mouse_release(%r, %r, %r, %r)" % (x, y, button, modifiers))
1348/10: pyglet.app.run()
1348/11: window = pyglet.window.Window()
1348/12: tablets = pyglet.input.get_tablets()
1348/13: canvases = []
1348/14:
@window.event
def on_text(text):
    try:
        index = int(text) - 1
    except ValueError:
        return

    if not (0 <= index < len(tablets)):
        return

    name = tablets[i].name

    try:
        canvas = tablets[i].open(window)
    except pyglet.input.DeviceException:
        print("Failed to open tablet %d on window" % index)

    print("Opened %s" % name)

    @canvas.event
    def on_enter(cursor):
        print("%s: on_enter(%r)" % (name, cursor))

    @canvas.event
    def on_leave(cursor):
        print("%s: on_leave(%r)" % (name, cursor))

    @canvas.event
    def on_motion(
        cursor, x, y, pressure, a, b
    ):  # if you know what "a" and "b" are tell me (tilt?)
        print(
            "%s: on_motion(%r, x=%r, y=%r, pressure=%r, %s, %s)"
            % (name, cursor, x, y, pressure, a, b)
        )


@window.event
def on_mouse_press(x, y, button, modifiers):
    print("on_mouse_press(%r, %r, %r, %r)" % (x, y, button, modifiers))


@window.event
def on_mouse_release(x, y, button, modifiers):
    print("on_mouse_release(%r, %r, %r, %r)" % (x, y, button, modifiers))
1348/15: pyglet.app.run()
1351/1: import pyglet
1351/2: window = pyglet.window.Window()
1351/3: tablets = pyglet.input.get_tablets()
1351/4: canvases = []
1351/5:
@window.event
def on_text(text):
    try:
        index = int(text) - 1
    except ValueError:
        return

    if not (0 <= index < len(tablets)):
        return

    name = tablets[i].name

    try:
        canvas = tablets[i].open(window)
    except pyglet.input.DeviceException:
        print("Failed to open tablet %d on window" % index)

    print("Opened %s" % name)


@canvas.event
def on_enter(cursor):
    print("%s: on_enter(%r)" % (name, cursor))


@canvas.event
def on_leave(cursor):
    print("%s: on_leave(%r)" % (name, cursor))


@canvas.event
def on_motion(
    cursor, x, y, pressure, a, b
):  # if you know what "a" and "b" are tell me (tilt?)
    print(
        "%s: on_motion(%r, x=%r, y=%r, pressure=%r, %s, %s)"
        % (name, cursor, x, y, pressure, a, b)
    )


@window.event
def on_mouse_press(x, y, button, modifiers):
    print("on_mouse_press(%r, %r, %r, %r)" % (x, y, button, modifiers))


@window.event
def on_mouse_release(x, y, button, modifiers):
    print("on_mouse_release(%r, %r, %r, %r)" % (x, y, button, modifiers))
1351/6: canvases = []
1351/7:
@window.event
def on_text(text):
    try:
        index = int(text) - 1
    except ValueError:
        return

    if not (0 <= index < len(tablets)):
        return

    name = tablets[i].name

    try:
        canvas = tablets[i].open(window)
    except pyglet.input.DeviceException:
        print("Failed to open tablet %d on window" % index)

    print("Opened %s" % name)


@canvas.event
def on_enter(cursor):
    print("%s: on_enter(%r)" % (name, cursor))


@canvas.event
def on_leave(cursor):
    print("%s: on_leave(%r)" % (name, cursor))


@canvas.event
def on_motion(
    cursor, x, y, pressure, a, b
):  # if you know what "a" and "b" are tell me (tilt?)
    print(
        "%s: on_motion(%r, x=%r, y=%r, pressure=%r, %s, %s)"
        % (name, cursor, x, y, pressure, a, b)
    )


@window.event
def on_mouse_press(x, y, button, modifiers):
    print("on_mouse_press(%r, %r, %r, %r)" % (x, y, button, modifiers))


@window.event
def on_mouse_release(x, y, button, modifiers):
    print("on_mouse_release(%r, %r, %r, %r)" % (x, y, button, modifiers))
1352/1: import pyglet
1352/2: window = pyglet.window.Window()
1352/3: tablets = pyglet.input.get_tablets()
1352/4: canvases = []
1352/5:
@window.event
def on_text(text):
    try:
        index = int(text) - 1
    except ValueError:
        return

    if not (0 <= index < len(tablets)):
        return

    name = tablets[i].name

    try:
        canvas = tablets[i].open(window)
    except pyglet.input.DeviceException:
        print("Failed to open tablet %d on window" % index)

    print("Opened %s" % name)

    @canvas.event
    def on_enter(cursor):
        print("%s: on_enter(%r)" % (name, cursor))

    @canvas.event
    def on_leave(cursor):
        print("%s: on_leave(%r)" % (name, cursor))

    @canvas.event
    def on_motion(
        cursor, x, y, pressure, a, b
    ):  # if you know what "a" and "b" are tell me (tilt?)
        print(
            "%s: on_motion(%r, x=%r, y=%r, pressure=%r, %s, %s)"
            % (name, cursor, x, y, pressure, a, b)
        )


@window.event
def on_mouse_press(x, y, button, modifiers):
    print("on_mouse_press(%r, %r, %r, %r)" % (x, y, button, modifiers))


@window.event
def on_mouse_release(x, y, button, modifiers):
    print("on_mouse_release(%r, %r, %r, %r)" % (x, y, button, modifiers))
1352/6: pyglet.app.run()
1352/7: pyglet.app.run()
1352/8: window = pyglet.window.Window()
1352/9: tablets = pyglet.input.get_tablets()
1352/10: canvases = []
1352/11:
@window.event
def on_text(text):
    try:
        index = int(text) - 1
    except ValueError:
        return

    if not (0 <= index < len(tablets)):
        return

    name = tablets[i].name

    try:
        canvas = tablets[i].open(window)
    except pyglet.input.DeviceException:
        print("Failed to open tablet %d on window" % index)

    print("Opened %s" % name)

    @canvas.event
    def on_enter(cursor):
        print("%s: on_enter(%r)" % (name, cursor))

    @canvas.event
    def on_leave(cursor):
        print("%s: on_leave(%r)" % (name, cursor))

    @canvas.event
    def on_motion(
        cursor, x, y, pressure, a, b
    ):  # if you know what "a" and "b" are tell me (tilt?)
        print(
            "%s: on_motion(%r, x=%r, y=%r, pressure=%r, %s, %s)"
            % (name, cursor, x, y, pressure, a, b)
        )


@window.event
def on_mouse_press(x, y, button, modifiers):
    print("on_mouse_press(%r, %r, %r, %r)" % (x, y, button, modifiers))


@window.event
def on_mouse_release(x, y, button, modifiers):
    print("on_mouse_release(%r, %r, %r, %r)" % (x, y, button, modifiers))
1352/12: pyglet.app.run()
1352/13:
@window.event
def on_motion(
    cursor, x, y, pressure, a, b
):  # if you know what "a" and "b" are tell me (tilt?)
    print(
        "%s: on_motion(%r, x=%r, y=%r, pressure=%r, %s, %s)"
        % (name, cursor, x, y, pressure, a, b)
    )


@window.event
def on_mouse_press(x, y, button, modifiers):
    print("on_mouse_press(%r, %r, %r, %r)" % (x, y, button, modifiers))


@window.event
def on_mouse_release(x, y, button, modifiers):
    print("on_mouse_release(%r, %r, %r, %r)" % (x, y, button, modifiers))
1352/14: window = pyglet.window.Window()
1352/15: tablets = pyglet.input.get_tablets()
1352/16: canvases = []
1352/17:
@window.event
def on_motion(
    cursor, x, y, pressure, a, b
):  # if you know what "a" and "b" are tell me (tilt?)
    print(
        "%s: on_motion(%r, x=%r, y=%r, pressure=%r, %s, %s)"
        % (name, cursor, x, y, pressure, a, b)
    )


@window.event
def on_mouse_press(x, y, button, modifiers):
    print("on_mouse_press(%r, %r, %r, %r)" % (x, y, button, modifiers))


@window.event
def on_mouse_release(x, y, button, modifiers):
    print("on_mouse_release(%r, %r, %r, %r)" % (x, y, button, modifiers))
1352/18: pyglet.app.run()
1352/19: window = pyglet.window.Window()
1352/20: tablets = pyglet.input.get_tablets()
1352/21: canvases = []
1352/22: canvas = tablets[0].open(window)
1352/23: canvas
1352/24:
@canvas.event
def on_motion(
    cursor, x, y, pressure, a, b
):  # if you know what "a" and "b" are tell me (tilt?)
    print(
        "%s: on_motion(%r, x=%r, y=%r, pressure=%r, %s, %s)"
        % (name, cursor, x, y, pressure, a, b)
    )


@window.event
def on_mouse_press(x, y, button, modifiers):
    print("on_mouse_press(%r, %r, %r, %r)" % (x, y, button, modifiers))


@window.event
def on_mouse_release(x, y, button, modifiers):
    print("on_mouse_release(%r, %r, %r, %r)" % (x, y, button, modifiers))
1352/25: pyglet.app.run()
1353/1: import pyglet
1353/2: window = pyglet.window.Window()
1353/3: tablets = pyglet.input.get_tablets()
1353/4: canvases = []
1353/5: canvas = tablets[0].open(window)
1353/6:
@canvas.event
def on_motion(
    cursor, x, y, pressure, a, b
):  # if you know what "a" and "b" are tell me (tilt?)
    print(
        "%s: on_motion(x=%r, y=%r, pressure=%r, %s, %s)"
        % (cursor, x, y, pressure, a, b)
    )


@window.event
def on_mouse_press(x, y, button, modifiers):
    print("on_mouse_press(%r, %r, %r, %r)" % (x, y, button, modifiers))


@window.event
def on_mouse_release(x, y, button, modifiers):
    print("on_mouse_release(%r, %r, %r, %r)" % (x, y, button, modifiers))
1353/7: pyglet.app.run()
1354/1: import numpy as np
1354/2: arr = np.ones(4, 4)
1354/3: arr = np.ones((4, 4))
1354/4: arr
1354/5: str(arr)
1355/1: import numpy as np
1355/2: a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
1355/3: a
1355/4: str(a)
1355/5: a.dtype
1355/6: b = a * 1.0
1355/7: b
1355/8: b.dtype
1355/9: str(b)
1356/1: a = {}
1356/2: a.update({2 : 3})
1356/3: a
1357/1: a = {}
1357/2: a.update({2: 3})
1357/3: len(a)
1358/1: "1231" in "sdfsdfsdf1231assada"
1359/1: from typing import List
1359/2: from kitty.boss import Boss
1360/1: import kitty
1361/1: import os
1361/2: ["ffmpeg" , "-r" , str(32) , "-i" , os.path.join("./" , "%10d.png") , "-pix_fmt" , "yuv420p" , "./" + ".mp4"]
1361/3: " ".join["ffmpeg" , "-r" , str(32) , "-i" , os.path.join("./" , "%10d.png") , "-pix_fmt" , "yuv420p" , "./" + ".mp4"]
1361/4:
" ".join(
    [
        "ffmpeg",
        "-r",
        str(32),
        "-i",
        os.path.join("./", "%10d.png"),
        "-pix_fmt",
        "yuv420p",
        "./" + ".mp4",
    ]
)
1362/1: import pyglet
1362/2: pyglet.app.run()
1362/3: import pyglet
1362/4: window = pyglet.window.Window()
1362/5:
label = pyglet.text.Label(
    "Hello, world",
    font_name="Times New Roman",
    font_size=36,
    x=window.width // 2,
    y=window.height // 2,
    anchor_x="center",
    anchor_y="center",
)
1362/6:
@window.event
def on_draw():
    window.clear()
    label.draw()
1362/7: pyglet.app.run()
1363/1: import pyglet
1363/2: devices = pyglet.input.get_devices()
1363/3: devices
1363/4: devices
1363/5: devices = pyglet.input.get_devices()
1363/6: devices
1363/7:
for i, dev in enumerate(devices):
    print(i, dev.name)
1363/8: i = 17
1363/9: device = devices[i]
1363/10: controls = device.get_controls()
1363/11: controls
1363/12: window = pyglet.window.Window(640 , 480)
1363/13: device.is_open
1363/14: device.axes
1363/15: canvas = device.open(window)
1364/1: import pyglet
1364/2: window = pyglet.window.Window(640, 480)
1364/3: window.close()
1364/4: window = pyglet.window.Window()
1364/5: tablets = pyglet.input.get_tablets()
1364/6: tablets
1364/7: canvas = tablets[0].open(window)
1364/8:
@canvas.event
def on_enter(cursor):
    print("%s: on_enter(%r)" % (name, cursor))
1364/9:
@canvas.event
def on_leave(cursor):
    print("%s: on_leave(%r)" % (name, cursor))
1364/10:
@canvas.event
def on_motion(
    cursor, x, y, pressure, a, b
):  # if you know what "a" and "b" are tell me (tilt?)
    print(
        "%s: on_motion(%r, x=%r, y=%r, pressure=%r, %s, %s)"
        % (name, cursor, x, y, pressure, a, b)
    )
1364/11:
@window.event
def on_mouse_press(x, y, button, modifiers):
    print("on_mouse_press(%r, %r, %r, %r" % (x, y, button, modifiers))
1364/12:
@window.event
def on_mouse_release(x, y, button, modifiers):
    print("on_mouse_release(%r, %r, %r, %r" % (x, y, button, modifiers))
1364/13: pyglet.app.run()
1364/14: name = tablets[0].name
1364/15: pyglet.app.run()
1365/1:
for i in range(5):
    print(i)
1365/2: "1231321#SKIP#1231231".replace('#SKIP#' , "")
1366/1: %load_ext autoreload
1366/2: %autoreload 2
1366/3: from we import *
1366/4: np.array([[1 ,2 , 3 , 4],[5 , 6 , 7 ,8],[9 , 10 , 11 , 12],[13 , 14 , 15 , 16]] , dtype = np.float64)
1366/5:
a = np.array(
    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], dtype=np.float64
)
1366/6: k = np.array([[0 , 1 , 0] , [1 , 0 , 1] , [0 , 1 , 0]] , dtype = np.float64)
1366/7: np.convolve(a, k, mode="same")
1366/8: a
1366/9: k
1366/10: np.convolve(k , a , mode="same")
1366/11: from scipy.signal import correlate
1366/12: correlate(a, v)
1366/13: correlate(a, k)
1366/14: correlate(a, k , mode = 'valid')
1366/15: correlate(a, k , mode = 'same')
1366/16: a
1366/17: d = make_domain(5 , 3 , 0.01)
1366/18: from we import *
1366/19: make_domain(5.0 , 3.0 , 0.01)
1366/20: make_domain(5.0, 3.0, 0.01)
1366/21: make_domain(5.0, 3.0, 0.01)
1367/1: import pyglet
1367/2: window = pyglet.window.Window(640, 480, resizable=True, vsync=True)
1367/3: batch = pyglet.graphics.Batch()
1367/4:
@window.event
def on_draw():
    window.clear()
    batch.draw()
1369/1: from pylibdmtx.pylibdmtx import decode
1369/2: ?decode
1370/1: from pylibdmtx.pylibdmtx import decode
1370/2: from PIL import Image
1370/3: >>> decode(Image.open("20230814_101133.jpg"))
1371/1: from pylibdmtx.pylibdmtx import decode
1371/2: from PIL import Image
1371/3: im = Image.open("20230814_101142.png")
1371/4: im
1371/5: >>> decode(im)
1372/1: from pylibdmtx.pylibdmtx import decode
1372/2: from PIL import Image
1372/3: im = Image.open("20230814_101142.png")
1372/4: >>> decode(im)
1373/1: from pylibdmtx.pylibdmtx import decode
1373/2: from pylibdmtx.pylibdmtx import decode
1374/1: from pylibdmtx.pylibdmtx import decode
1374/2: from PIL import Image
1374/3: im = Image.open("20230814_101142.png")
1374/4: decode(im)
1375/1: import pymc
1375/2: pymc.__version__
1375/3: import pytensor
1375/4: pytensor.__version__
1375/5: import pymc3
1375/6: import pymc as pm
1376/1: import pymc as pm
1376/2: ?pm.Exponential
1376/3: lambda_ = pm.Exponential("poisson_param" , 1)
1376/4: pm.Exponential("poisson_param" , 1)
1376/5: with pm.Model() as model
1376/6:
with pm.Model() as model:
    lambda_ = pm.Exponential("poisson_param", 1)
1376/7:
with pm.Model() as model:
    lambda_ = pm.Exponential("poisson_param", 1)
    data_generator = pm.Poisson("data_generator", lambda_)
    data_plus_one = data_generator + 1
1376/8: data_plus_one
1376/9: data_plus_one.all()
1377/1: import pymc as pm
1377/2: model = pm.Model()
1377/3: ?model
1377/4: lambda_ = pm.Exponential("poisson_param", 1)
1377/5:
with pm.Model() as model:
    lambda_ = pm.Exponential("poisson_param", 1)
    data_generator = pm.Poisson("data_generator", lambda_)
    data_plus_one = data_generator + 1
    print(lambda_.children)
1377/6:
with pm.Model() as model:
    lambda_ = pm.Exponential("poisson_param", 1)
    data_generator = pm.Poisson("data_generator", lambda_)
    data_plus_one = data_generator + 1
1377/7:
with pm.Model() as model:
    lambda_ = pm.Exponential("poisson_param", 1)
    data_generator = pm.Poisson("data_generator", lambda_)
    data_plus_one = data_generator + 1
    lambda_.value
1378/1: import pymc as pm
1378/2: import numpu as np
1378/3: import numpy as np
1378/4: import matplotlib.pyplot as plt
1378/5: np.random.normal(0.5 , 0.35 , 2000)
1378/6: np.random.normal(0.5, 0.35, 2000).dtype
1378/7: obs_y = np.random.normal(0.5, 0.35, 2000)
1379/1: import numpy as np
1379/2: ?np.Normal
1379/3: ?np.random.normal
1378/8: obs_y = np.random.normal(0.5, 0.35, 2000)
1379/4: import pymc as pm
1379/5: ?pm.HalfNormal
1378/9:
with pm.Model() as model:
    stdev_prior = pm.HalfNormal("stdev_prior", sd=1.0)
    mu_prior = pm.Normal("mu_prior", mu=0.0, sd=1.0)
    y_likelyhood = pm.Normal(
        "y_likelyhood", mu=mu_prior, sd=stdev_prior, observed=obs_y
    )
    trace = pm.sample(1000)
    pm.traceplot(trace, ["mu_prior", "stdev_prior"])
    plt.show()
1379/6: ?pm.HalfNormal
1378/10:
with pm.Model() as model:
    stdev_prior = pm.HalfNormal("stdev_prior", sigma=1.0)
    mu_prior = pm.Normal("mu_prior", mu=0.0, sigma=1.0)
    y_likelyhood = pm.Normal(
        "y_likelyhood", mu=mu_prior, sigma=stdev_prior, observed=obs_y
    )
    trace = pm.sample(1000)
    pm.traceplot(trace, ["mu_prior", "stdev_prior"])
    plt.show()
1378/11:
with pm.Model() as model:
    stdev_prior = pm.HalfNormal("stdev_prior", sigma=1.0)
    mu_prior = pm.Normal("mu_prior", mu=0.0, sigma=1.0)
    y_likelyhood = pm.Normal(
        "y_likelyhood", mu=mu_prior, sigma=stdev_prior, observed=obs_y
    )
    trace = pm.sample(1000)
    pm.plot_trace(trace, ["mu_prior", "stdev_prior"])
    plt.show()
1379/7: import pymc as pm
1379/8: ?pm.plot_trace
1379/9: ?pm.HalfNormal
1378/12: obs_y = np.random.normal(0.5, 0.35, 2000)
1378/13:
with pm.Model() as model:
    stdev_prior = pm.HalfNormal("stdev_prior", sigma=0.05)
    mu_prior = pm.Normal("mu_prior", mu=2.0, sigma=0.05)
    y_likelyhood = pm.Normal(
        "y_likelyhood", mu=mu_prior, sigma=stdev_prior, observed=obs_y
    )
    trace = pm.sample(1000)
    pm.plot_trace(trace, ["mu_prior", "stdev_prior"])
    plt.show()
1378/14: obs_y = np.random.normal(0.5, 0.35, 200)
1378/15:
with pm.Model() as model:
    stdev_prior = pm.HalfNormal("stdev_prior", sigma=0.05)
    mu_prior = pm.Normal("mu_prior", mu=2.0, sigma=0.05)
    y_likelyhood = pm.Normal(
        "y_likelyhood", mu=mu_prior, sigma=stdev_prior, observed=obs_y
    )
    trace = pm.sample(1000)
    pm.plot_trace(trace, ["mu_prior", "stdev_prior"])
    plt.show()
1378/16: n = 10000
1378/17: noise = np.random.normal(0.0 , 0.1 , n)
1378/18: x = np.random.normal(1.0 , 0.1 , n)
1378/19: obs_y = (0.65 * x) + 0.5 + noise
1378/20: plt.plot(x , obs_y)
1378/21: plt.show()
1378/22: plt.scatter(x, obs_y)
1378/23: plt.show()
1379/10: ?pm.Normal
1378/24:
with pm.Model() as model:
    stdev = pm.HalfNormal("stdev", sigma=1.0)
    intercept = pm.Normal("intercept", mu=0.0, sigma=1.0)
    coeff = pm.Normal("coeff", mu=0.5, sigma=1.0)
    expected_value = (x * coeff) + intercept
    y = pm.Normal("y", mu=expected_value, sigma=stdev, observed=obs_y)
    trace = pm.sample(1000)
    pm.plot_trace(trace, ["coeff", "intercept"])
    plt.show()
1378/25:
with pm.Model() as model:
    stdev = pm.HalfNormal("stdev", sigma=1.0)
    intercept = pm.Normal("intercept", mu=0.0, sigma=1.0)
    coeff = pm.Normal("coeff", mu=0.5, sigma=1.0)
    expected_value = (x * coeff) + intercept
    y = pm.Normal("y", mu=expected_value, sigma=stdev, observed=obs_y)
    trace = pm.sample(1000)
    pm.plot_trace(trace, ["coeff", "intercept", "stdev"])
    plt.show()
1378/26:
with model:
    ppc = pm.sample_posterior_predictive(trace, samples=1000)
    y_preds = ppc["y"]
    print("y_preds shape : ", y_preds.shape)
1379/11: ?pm.sample_posterior_predictive
1378/27:
with model:
    ppc = pm.sample_posterior_predictive(trace)
    y_preds = ppc["y"]
    print("y_preds shape : ", y_preds.shape)
1378/28:
with model:
    ppc = pm.sample_posterior_predictive(trace)
    print(ppc)
1378/29:
with model:
    ppc = pm.sample_posterior_predictive(trace)
    print(ppc["y"])
1378/30:
with model:
    ppc = pm.sample_posterior_predictive(trace)
    print(ppc, "--")
1379/12: pm.sample_posterior_predictive
1378/31:
with model:
    ppc = pm.sample_posterior_predictive(trace, sample_dims=["y"])
    print(ppc, "--")
1378/32:
with model:
    ppc = pm.sample_posterior_predictive(trace, var_names=["y"])
1378/33:
with model:
    ppc = pm.sample_posterior_predictive(trace, var_names=["y"])
    print(ppc)
1378/34:
with model:
    ppc = pm.sample_posterior_predictive(trace, var_names=["y"])
    print(ppc["y"])
1378/35:
with model:
    ppc = pm.sample_posterior_predictive(trace, var_names=["y"])
1378/36: ppc
1378/37: ?ppc.get
1378/38: ?ppc
1378/39: ppc
1378/40: ppc["posteriour_predictive"]
1380/1: %matplotlib inline
1380/2: import matplotlib.pyplot as plt
1380/3: x = [1 , 2 , 3]
1380/4: y = [1 , 2 ,3]
1380/5: plt.plot(x , y)
1380/6: plt.show()
1381/1: import pymc as pm
1381/2: lambda_ = pm.Exponential("poisson_param", 1)
1381/3:
with pm.Model() as model:
    lambda_ = pm.Exponential("poisson_param", 1)
    data_generator = pm.Poisson("data_generator", lambda_)
    data_plus_one = data_generator + 1
    print(lambda_.children)
1382/1: import pymc as pm
1382/2:
with pm.Model() as model:
    parameter = pm.Exponential("poisson_param", 1.0)
    data_generator = pm.Poisson("data_generator", parameter)
1382/3:
with model:
    data_plus_one = data_generator + 1
1382/4: model
1382/5: ?parameter.tag
1382/6: ?parameter
1382/7: parameter
1382/8: parameter.tag
1382/9: parameter.tag.test_value
1382/10: parameter.tag.value_var
1382/11: data_generator.tag
1382/12: data_generator.tag.attr
1382/13: data_plus_one
1382/14: ?data_plus_one
1382/15:
with model:
    betas = pm.Uniform("betas", 0, 1, shape=3)
1382/16:
with model:
    betas = pm.Uniform("betas", 0, 1, shape=(3, 3))
1382/17:
with model:
    betas1 = pm.Uniform("betas", 0, 1, shape=(3, 3))
1382/18:
with model:
    betas1 = pm.Uniform("betas1", 0, 1, shape=(3, 3))
1382/19: betas1
1382/20: betas1.shape
1382/21: betas1.tag.shape
1382/22: betas1[0, 0]
1382/23: betas1.dtype
1382/24: betas1.shape
1382/25: betas1.shape.all
1382/26: betas1.shape.all()
1383/1: import pymc as pm
1383/2: import numpy as np
1383/3: import matplotlib.pyplot as plt
1383/4:
with pm.Model() as model:
    lambda_1 = pm.Exponential("lambda_1", 1.0)
    lambda_2 = pm.Exponential("lambda_2", 1.0)
    tau = pm.DiscreteUniform("tau", lower=0, upper=10)
1383/5: new_deterministic_variable = lambda_1 + lambda_2
1383/6: new_deterministic_variable
1383/7: ?new_deterministic_variable
1383/8: new_deterministic_variable.choose()
1383/9: new_deterministic_variable.get_parents()
1383/10: new_deterministic_variable.get_underlying_scalar_constant()
1383/11: n_data_points = 5
1383/12: ids = np.arrange(n_data_points)
1383/13: idx = np.arange(n_data_points)
1383/14: with model
1383/15:
with mode:
    lambda_ = pm.math.switch(tau >= idx, lambda_1, lambda_2)
1383/16:
with model:
    lambda_ = pm.math.switch(tau >= idx, lambda_1, lambda_2)
1383/17: lambda_
1383/18: import pytensor as tt
1383/19:
with pm.Model() as pytensor_test:
    p1 = pm.Uniform("p", 0, 1)
    p2 = 1 - p1
    p = tt.stack([p1, p2])
1383/20: ?pm.Categorical
1383/21: lambda_1
1383/22: lambda_1.random(size=10)
1383/23: ?lambda_1.random
1383/24: ?lambda_1.random()
1383/25: lambda_1.random
1383/26: lambda_1.random(10)
1383/27: ?lambda_1.draw
1383/28: ?pm.draw
1383/29: pm.draw(lambda_1, draws=100)
1383/30:
with pm.Model() as test_observed:
    fixed_variable = pm.Normal("fxd", mu=0.0, sigma=1.0, observed=[1.1, 0.2, -1.2, 3.4])
1383/31: pm.draw(fixed_variable, draws=10)
1384/1: import torch
1385/1: import pyro
1386/1: import pymc as pm
1386/2: import numpy as np
1386/3: import pytensor as T
1386/4: import pytensor.tensor as T
1386/5: a = T.dscalar()
1386/6: b = T.dscalar()
1386/7: c = a + b
1386/8: a
1386/9: b
1386/10: c
1386/11: c
1386/12: str(c)
1386/13: c.name
1386/14: c.ndim
1386/15: c.shape
1386/16: ?c
1386/17: f = pytensor.function([a , b] , c)
1386/18: import pytensor as pt
1386/19: f = pt.function([a , b] , c)
1386/20: f
1386/21: f(1.5 ,2.5)
1386/22: ?f(1.5 ,2.5)
1386/23: val = f(1.5 ,2.5)
1386/24: ?val
1386/25: val
1386/26: type(val)
1386/27: val[0]
1386/28: val.shape
1386/29: val.dtype
1386/30: val.getfield
1386/31: val.getfield()
1386/32: val
1386/33: val + 1
1386/34: type(val + 1)
1386/35: val[0]
1386/36: ?val.getfield
1386/37: ?val.take
1386/38: val.item()
1387/1: from pytensor import *
1388/1: from pytensor import *
1389/1: from pytensor import *
1389/2: import pytensor.tensor as at
1389/3: import numpy as np
1389/4: x = at.dscalar("x")
1389/5: y = at.dscalar("y")
1389/6: z = x + y
1389/7: type(x)
1389/8: type(y)
1389/9: type(z)
1389/10: f = function([x , y] , z)
1389/11: ?np.allclose
1389/12: np.allclose(f(16.3, 12.1), 28.4)
1389/13: f.container
1389/14: ?function
1389/15: x.type
1389/16: x.type
1389/17: y.type
1389/18: ?pp
1389/19: pp(z)
1389/20: x = at.dmatrix()
1389/21: y = at.dmatrix()
1389/22: z = x + y
1389/23: pp(z)
1389/24: f = function([x, y], z)
1389/25: pp(p)
1389/26: d(np.array([[1 , 2],[3 , 4]]) , np.array([[4 , 3],[2 , 1]]))
1389/27: f(np.array([[1 , 2],[3 , 4]]) , np.array([[4 , 3],[2 , 1]]))
1389/28: a = at.vector()
1389/29: pp(a)
1389/30: out = a + a**10
1389/31: f = pytensor.function([a] , out)
1389/32: f([0 , 1 , 2])
1390/1: import pytensor as pt
1390/2: import pytensor.tensor as t
1390/3: x = t.dmatrix()
1390/4: s = 1 / (1 + t.exp(-x))
1390/5: x = t.dmatrix('x')
1390/6: s = 1 / (1 + t.exp(-x))
1390/7: logistic = pt.function([x] , s)
1390/8: logistic([[0, 1], [-1, -2]])
1390/9: ?pt.printing.debugprint
1390/10: pt.printing.debugprint(s)
1390/11: s2 = (1 + at.tanh(x / 2)) / 2
1390/12: s2 = (1 + t.tanh(x / 2)) / 2
1390/13: logistic2 = pytensor.function([x], s2)
1390/14: logistic2 = pt.function([x], s2)
1390/15: pt.printing.debugprint(s)
1390/16: pt.printing.debugprint(s2)
1390/17: logistic([[0, 1], [-1, -2]])
1390/18: logistic2([[0, 1], [-1, -2]])
1390/19: a, b = at.dmatrices("a", "b")
1390/20: a, b = t.dmatrices("a", "b")
1390/21: diff = a - b
1390/22: abs_diff = abs(diff)
1390/23: diff_squared = diff**2
1390/24: f = pytensor.function([a, b], [diff, abs_diff, diff_squared])
1390/25: f = pt.function([a, b], [diff, abs_diff, diff_squared])
1390/26: f([[1, 1], [1, 1]], [[0, 1], [2, 3]])
1390/27: x, y = at.dscalars("x", "y")
1390/28: import pytensor.tensor as at
1390/29: x, y = at.dscalars("x", "y")
1390/30: z = x + y
1390/31: from pytensor import *
1390/32: f = function([x, In(y, value=1)], z)
1390/33: ?In
1390/34: from pytensor import shared
1390/35: state = shared(0)
1390/36: type(state)
1390/37: pp(state)
1390/38: inc = at.iscalar("inc")
1390/39: accumulator = function([inc], state, updates=[(state, state + inc)])
1390/40: print(state.get_value())
1390/41: state.get_value()
1390/42: accumulator(1)
1390/43: state.get_value()
1390/44: accumulator(1)
1390/45: state.get_value()
1390/46: accumulator(300)
1390/47: state.get_value()
1390/48: accumulator(1)
1390/49: state.set_value(-1)
1390/50: fn_of_state = state * 2 + inc
1390/51: foo = at.scalar(dtype=state.dtype)
1390/52: skip_shared = function([inc, foo], fn_of_state, givens=[(state, foo)])
1390/53: skip_shared(1, 3)
1390/54: state.get_value()
1390/55: from pytensor.tensor.random.utils import RandomStream
1390/56: from pytensor import function
1390/57: srng = RandomStream(seed=234)
1390/58: pp(srng)
1390/59: type(srng)
1390/60: rv_u = srng.uniform(0, 1, size=(2, 2))
1390/61: rv_n = srng.normal(0, 1, size=(2, 2))
1390/62: f = function([], rv_u)
1390/63: g = function([], rv_n, no_default_updates=True)
1390/64: pt.printing.debugprint(rv_u)
1390/65: nearly_zeros = function([], rv_u + rv_u - 2 * rv_u)
1390/66: nearly_zeros()
1390/67: nearly_zeros()
1390/68: nearly_zeros()
1390/69: nearly_zeros()
1390/70: nearly_zeros()
1390/71: nearly_zeros()
1390/72: nearly_zeros()
1391/1: import numpy as np
1391/2: import pytensor
1391/3: import pytensor.tensor as at
1391/4: rng = np.random.default_rng(2882)
1391/5: N = 400
1391/6: feats = 784
1391/7: D = (rng.standard_normal((N , feats)) , rng.integers(size = N , low = 0 , high = 2))
1391/8: D
1391/9: D[0].shape
1391/10: D[1].shape
1391/11: training_steps = 10000
1391/12: x = at.dmatrix("x")
1391/13: y = at.dvector("y")
1391/14: w = pytensor.shared(rng.standard_normal(feats, name="w"))
1391/15: w = pytensor.shared(rng.standard_normal(feats), name="w")
1391/16: w
1391/17: w.shape
1391/18: pp(w)
1391/19: pytensor.pp(w)
1391/20: type(w)
1391/21: b = pytensor.shared(0.0, name="b")
1391/22: w.get_value()
1391/23: b.get_value()
1391/24: b.get_value)
1391/25: b.get_value()
1391/26: b.get_value()
1391/27: b.get_value()
1391/28: p_1 = 1 / (1 + at.exp(-at.dot(x, w) - b))
1391/29: prediction = p_1 > 0.5
1391/30: xent = -y * at.log(p_1) - (1 - y) * at.log(1 - p_1)
1391/31: cost = xent.mean() + 0.01 * (w**2).sum()
1391/32: gw, gb = at.grad(cost, [w, b])
1391/33:
train = pytensor.function(
    inputs=[x, y],
    outputs=[prediction, xent],
    updates=((w, w - 0.1 * gw), (b, b - 0.1 * gb)),
)
1391/34: predict = pytensor.function(inputs = [x] , outputs = prediction)
1391/35:
for i in range(training_steps):
    pred, err = train(D[0], D[1])
    if(i % 100 == 0)"
1391/36:
for i in range(training_steps):
    pred, err = train(D[0], D[1])
    if i % 100 == 0:
        print(i, err)
1391/37: D[1]
1391/38: predict(D[0])
1391/39: ?at.grad
1392/1: import numpy
1392/2: import pytensor
1392/3: import pytensor.tensor as at
1392/4: from pytensor import grad
1392/5: from pytensor import pp
1392/6: x = at.dscalar('x')
1392/7: y = x**2
1392/8: gy = at.grad(y , x)
1392/9: pp(gy)
1392/10: f = pytensor.function([x], gy)
1392/11: f[4]
1392/12: f(4)
1392/13: numpy.allclose(f(94.2) , 188.4)
1392/14: ?f.maker
1392/15: pt.printing.debugprint(rv_u)
1392/16: pytensor.printing.debugprint()
1392/17: pytensor.printing.debugprint(f.maker.fgraph.outputs[0])
1392/18: pytensor.printing.debugprint(f.maker.fgraph)
1392/19: x = at.dmatrix("x")
1392/20: gx = at.grad(x, x)
1392/21: s = x
1392/22: gs = at.grad(s, x)
1392/23: x = at.dvector("x")
1392/24: y = x**2
1392/25:
J, updates = pytensor.scan(
    lambda i, y, x: at.grad(y[i], x),
    sequences=at.arange(y.shape[0]),
    non_sequences=[y, x],
)
1392/26: J
1392/27: pp(J)
1392/28: f = pytensor.function([x], J, updates=updates)
1392/29: f([4, 4])
1393/1: import pymc as pm
1393/2: import pytensor as pt
1393/3: import pytensor.tensor as t
1393/4:
with pm.Model() as model:
    p1 = pm.Uniform("p", 0, 1)
    p2 = 1 - p1
    p = t.stack([p1, p2])
1393/5: p
1393/6: pt.pp(p)
1393/7: type(p)
1393/8: ?pm.Categorical
1394/1: import pymc as pm
1394/2: ??
1394/3: %
1394/4:
with pm.Model() as model:
    lambda_1 = pm.Exponential("lambda_1", 1.0)
    lambda_2 = pm.Exponential("lambda_2", 1.0)
    tau = pm.DiscreteUniform("tau", lower=0, upper=10)
1394/5: tau
1394/6: from pytensor import pp
1394/7: pp(tau)
1394/8: lambda_1
1394/9: import pytensor
1394/10: type(tau)
1394/11: pytensor.printing.debugprint(tau)
1394/12: new_deterministic_variable = lambda_1 + lambda_2
1394/13: new_deterministic_variable.get_underlying_scalar_constant()
1394/14: new_deterministic_variable
1394/15: type(new_deterministic_variable)
1394/16: pytensor.printing.debugprint(new_deterministic_variable)
1394/17: import numpy as np
1394/18: n_data_points = 5
1394/19: idx = np.arange(n_data_points)
1394/20: idx
1394/21:
with model:
    lambda_ = pm.math.switch(tau >= idx, lambda_1, lambda_2)
1394/22: import pytensor.tensor as tt
1394/23:
with pm.Model() as model:
    p1 = pm.Uniform("p", 0, 1)
    p2 = 1 - p1
    p = tt.stack([p1, p2])
1394/24:
with model:
    assignment = pm.Categorical("assignment", p)
1394/25: p
1394/26: pytensor.printing.debugprint(p)
1394/27: lambda_1.random(10)
1394/28: pm.draw(lambda_1, draws=10)
1394/29: samples = pm.draw(lambda_1, draws=20000)
1394/30: import matplotlib.pyplot as plt
1394/31: plt.hist(samples , bins = 70 , density = True , histtype = "stepfilled")
1394/32: plt.title("Prior distribution for $\lambda_1$")
1394/33: plt.xlim(0 , 8)
1394/34: plt.show()
1394/35: data = np.array([10 , 5])
1394/36:
with model:
    fixed_variable = pm.Poisson("fxd", 1, observed=data)
1394/37: fixed_variable.tag.test_value
1394/38: fixed_variable.initial_point
1394/39: model.initial_point
1394/40: model.initial_values
1394/41: ?model.rvs_to_initial_values
1394/42: model.rvs_to_initial_values
1394/43: model.rvs_to_initial_values['p']
1394/44: model.initial_point()
1394/45:
with model:
    fixed_variable = pm.Poisson("fxd", 1, observed=data)
1395/1: import matplotlib.pyplot as plt
1395/2: import pymc as pm
1395/3: import pytensor.tensor as tt
1395/4:
with model:
    fixed_variable = pm.Poisson("fxd", 1, observed=data)
1395/5: import numpy as np
1395/6: data = np.array([10, 5])
1395/7:
with pm.Model() as model:
    fixed_variable = pm.Poisson("fxd", 1, observed=data)
1395/8: model.initial_point()
1395/9: model
1395/10: fixed_variable.eval()
1395/11: fixed_variable.eval()
1395/12: fixed_variable.eval()
1395/13: fixed_variable.eval()
1395/14: fixed_variable.eval()
1395/15: fixed_variable.eval()
1395/16: fixed_variable.initial_point()
1396/1: %load_ext autoreload
1396/2: %autoreload 2
1396/3: import numpy as np
1396/4: import message
1396/5: generate_data({"days" : 80})
1396/6: message.generate_data({"days" : 80})
1396/7: message.generate_data({"days": 80})
1396/8: message.generate_data({"days": 80 , "alpha" : 1.0 / 20.0})
1396/9: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/10: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/11: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/12: ?np.r_
1396/13: import scipy.stats as stats
1396/14: ?stats.poisson.rvs
1396/15: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/16: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/17: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/18: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/19: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/20: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/21: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/22: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/23: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/24: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/25: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/26: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/27: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/28: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/29: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/30:  =
1396/31: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/32: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/33: message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/34: data = message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/35: message.plot_data(data)
1396/36: data["x"]
1396/37: data["y"]
1396/38: import matplotlib.pyplot as plt
1396/39: plt.bar(data["x"], data["y"])
1396/40: plt.show()
1396/41: data["parameters"]["tau"]
1396/42: data["parameters"]["tau"]
1396/43: plt.bar(data["x"], data["y"])
1396/44: tau = data["parameters"]["tau"]
1396/45: plt.bar(data["x"], data["y"])
1396/46: message.plot_data(data)
1396/47: tau = data["parameters"]["tau"]
1396/48: plt.bar(data["x"], data["y"])
1396/49: plt.bar(tau - 1, data["y"][tau - 1])
1396/50: plt.show()
1396/51: plt.bar(data["x"], data["y"])
1396/52: plt.bar(tau - 1, data["y"][tau - 1])
1396/53: plt.xlim(0, 80)
1396/54: plt.show()
1396/55: data = message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/56: message.plot_data(data)
1396/57: data = message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/58: message.plot_data(data)
1396/59: data = message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/60: message.plot_data(data)
1396/61: data = message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/62: message.plot_data(data)
1396/63: data = message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/64: message.plot_data(data)
1396/65: data = message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/66: message.plot_data(data)
1396/67: import pymc as pm
1396/68: ?pm.DiscreteUniform
1396/69: ?pm.Poisson
1396/70: import pymc as pm
1396/71: idx = np.arrange(10)
1396/72: idx = np.arange(10)
1396/73: l = pm.math.switch(3 > idx , 1.0 , 10.0)
1396/74: l
1396/75: l.eval()
1396/76: pm.Poisson("obs" , l)
1396/77: with pm.Model() as model:pm.Poisson("obs" , l)
1396/78:
with pm.Model() as model:
    obs = pm.Poisson("obs", l)
1396/79: obs
1396/80: obs.eval()
1396/81:
with pm.Model() as model:
    obs = pm.Poisson("obs", l, observed=[1, 1, 0, 10, 9, 8, 11, 12, 13, 9])
1396/82: obs.eval()
1396/83: obs.eval()
1396/84: obs.eval()
1396/85: obs.eval()
1396/86: obs.eval()
1396/87: data = message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/88: message.plot_data(data)
1396/89: data = message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/90: message.plot_data(data)
1396/91: data = message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/92: message.plot_data(data)
1396/93: data = message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/94: message.plot_data(data)
1396/95: message.recreate_posteriour(data | {"sample": 10000, "tune": 5000})
1396/96: message.recreate_posteriour(data | {"sample": 10000, "tune": 5000})
1396/97: trace = message.recreate_posteriour(data | {"sample": 10000, "tune": 5000})
1396/98: trace
1396/99: trace["lambda_1"]
1396/100: data["parameters"]
1396/101: plt.hist(trace["tau"] , density = True , bins = 30)
1396/102: plt.show()
1396/103: trace["tau"]
1396/104: data = message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/105: message.plot_data(data)
1396/106: trace = message.recreate_posteriour(data | {"sample": 10000, "tune": 5000})
1396/107: trace["tau"]
1396/108: plt.hist(trae["tau"])
1396/109: plt.hist(trace["tau"])
1396/110: plt.show()
1396/111: plt.hist(trace["lambda_1"])
1396/112: plt.show()
1396/113: data["parameters"]
1396/114: plt.hist(trace["lambda_1"])
1396/115: data["parameters"]
1396/116: plt.show()
1396/117: plt.hist(trace["lambda_2"])
1396/118: data["parameters"]
1396/119: plt.show()
1396/120: plt.hist(trace["tau"])
1396/121: plt.show()
1396/122: data = message.generate_data({"days": 80, "alpha": 1.0 / 20.0})
1396/123: message.plot_data(data)
1396/124: trace = message.recreate_posteriour(data | {"sample": 10000, "tune": 5000})
1396/125: plt.hist(trace["tau"])
1396/126: plt.show()
1396/127: plt.hist(trace["tau"] , bins = 30)
1396/128: plt.show()
1396/129: births = 987
1396/130: fem_births = 437
1396/131:
with pm.Model() as model_1:
    theta = pm.Uniform("theta", lower=0, upper=1)
    obs = pm.Binomial("observed", n=births, p=theta, observed=fem_births)
    trace_1 = pm.sample(draws=20000, tune=50000)
1396/132: trace_1['theta']
1396/133: trace_1
1397/1: import cv2
1397/2: ?cv2.aruco.GridBoard_create()
1397/3: ?cv2.aruco.GridBoard_create
1397/4: cv2.aruco.GridBoard_create(16 , 8 , 10.0 , 50.0)
1397/5: cv2.aruco.DICT_4X4_50
1397/6: cv2.aruco.GridBoard_create(4 , 4 , 10.0 , 50.0 , cv2.aruco.DICT_6X6_50)
1397/7: ?cv2.aruco.DICT_6X6_50
1397/8: cv2.aruco.DICT_ARUCO_ORIGINAL
1397/9: arucoDict = cv2.aruco.DICT_ARUCO_ORIGINAL
1397/10:
A4_width = 210
A4_height = 297
1397/11: x = 4
1397/12: y = 4
1397/13: ?cv2.aruco.drawMarker
1397/14: size = 100
1397/15: import numpy as np
1397/16: size = 100
1397/17: tag = np.zeros((size, size, 1), dtype=np.uint8)
1397/18: cv2.aruco.drawMarker(cv2.aruco.DICT_ARUCO_ORIGINAL , 0 , size, tag, 1)
1397/19: size = 50
1397/20: tag = np.zeros((size, size, 1), dtype=np.uint8)
1397/21: cv2.aruco.drawMarker(cv2.aruco.DICT_ARUCO_ORIGINAL , 0 , size, tag, 1)
1397/22: cv2.aruco.drawMarker(cv2.aruco.DICT_ARUCO_ORIGINAL , 1 , size, tag, 1)
1397/23: cv2.aruco.drawMarker(cv2.aruco.DICT_5X5_250 , 1 , size, tag, 1)
1397/24: arucoDict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_ARUCO_ORIGINAL)
1397/25: cv2.aruco.drawMarker(arucoDict , 1 , size, tag, 1)
1397/26: size = 100
1397/27: tag = np.zeros((size, size, 1), dtype=np.uint8)
1397/28: arucoDict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_ARUCO_ORIGINAL)
1397/29: tag
1397/30: size = 10
1397/31: tag = np.zeros((size, size, 1), dtype=np.uint8)
1397/32: arucoDict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_ARUCO_ORIGINAL)
1397/33: cv2.aruco.drawMarker(arucoDict, 1, size, tag, 1)
1397/34: tag
1397/35: cv2.aruco.drawMarker(arucoDict, 1, size, tag, 1)
1397/36: cv2.imshow(tag)
1397/37: import matplotlib.pyplot as plt
1397/38: plt.matshow(tag)
1397/39: plt.show()
1397/40: cv2.aruco.drawMarker(arucoDict, 10 , size, tag, 1)
1397/41: plt.matshow(tag)
1397/42: cv2.aruco.drawMarker(arucoDict, 10, size, tag, 1)
1397/43: plt.show()
1397/44: arucoDict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_6X6_100)
1397/45: tag = np.zeros((size, size, 1), dtype=np.uint8)
1397/46: cv2.aruco.drawMarker(arucoDict, 10, size, tag, 1)
1397/47: cv2.aruco.drawMarker(arucoDict, 10, size, tag, 1)
1397/48: plt.matshow(tag)
1397/49: plt.show()
1398/1: import scipy.stats as stats
1398/2: import numpy as np
1398/3:
def post(theta, y, alpha=1, beta=1):
    if theta <= 1 and theta >= 0:
        prior = stats.beta(alpha, beta).pdf(theta)
        like = stats.bernoulli(theta).pmf(y).prod()
        prob = like * prior
    else:
        prob = -np.inf
    return prob
1398/4: y = [1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1]
1398/5: stats.bernoulli(0.3).pmf(y)
1398/6: stats.bernoulli(0.3).pmf(y).prod()
1398/7: stats.bernoulli(0.7).rvs(20)
1398/8: y = stats.bernoulli(0.7).rvs(20)
1398/9: stats.bernoulli(0.3).pmf(y).prod()
1398/10:
def mh(n_iters=1000, can_sd=0.05, alpha=1.0, beta=1.0, theta=0.5):
    trace = {"theta": np.zeros(n_iters)}
    p2 = post(theta, y, alpha, beta)
1398/11:
def mh(n_iters=1000, can_sd=0.05, alpha=1.0, beta=1.0, theta=0.5):
    trace = {"theta": np.zeros(n_iters)}
    p2 = post(theta, y, alpha, beta)
    for iter in range(n_iters)
1398/12:
def mh(n_iters=1000, can_sd=0.05, alpha=1.0, beta=1.0, theta=0.5):
    trace = {"theta": np.zeros(n_iters)}
    p2 = post(theta, y, alpha, beta)
    for iter in range(n_iters):
        theta_can = stats.norm(theta, can_sd).rvs(1)
        p1 = post(theta_can, y, alpha, beta)
        pa = p1 / p2
        if pa > stats.uniform(0, 1).rvs(1):
            theta = theta_can
            p2 = p1
        trace["theta"][iter] = theta
    return trace
1398/13: t = mh()
1398/14: t
1398/15: t = mh(iters = 10000)
1398/16: t = mh(n_iters = 10000)
1398/17: t
1398/18: t['theta']
1398/19: t['theta'][5000:]
1398/20: import matplotlib.pyplot as plt
1398/21: plt.hist(t["theta"][5000:], density=True)
1398/22: plt.show()
1398/23: plt.hist(t["theta"][5000:], density=True , bins = 50)
1398/24: plt.show()
1398/25:
def mh(n_iters=1000, can_sd=0.05, alpha=1.0, beta=1.0, theta=0.5):
    trace = {"theta": np.zeros(n_iters)}
    p2 = post(theta, y, alpha, beta)
    for iter in range(n_iters):
        theta_can = stats.norm(theta, can_sd).rvs(1)
        p1 = post(theta_can, y, alpha, beta)
        pa = p1 / p2
        if pa > stats.uniform(0, 1).rvs(1):
            theta = theta_can
            p2 = p1
        trace["theta"][iter] = theta
    return trace
1398/26: y = stats.bernoulli(0.9).rvs(40)
1398/27: t = mh()
1398/28: plt.hist(t["theta"], density=True, bins=50)
1398/29: plt.show()
1398/30: t = mh(theta = 0.1)
1398/31: plt.hist(t["theta"], density=True, bins=50)
1398/32: plt.show()
1398/33: t = mh(theta = 0.1 , n_iters = 10000)
1398/34: plt.hist(t["theta"], density=True, bins=50)
1398/35: plt.show()
1398/36: plt.hist(t["theta"][5000:], density=True, bins=50)
1398/37: plt.show()
1398/38: import pymc as pm
1398/39:
with pm.Model() as model:
    theta = pm.Beta("theta" , alpha 1 , beta = 1)
1398/40:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y_obs = pm.Binomial("y_obs", n=1, p=theta, observed=y)
    trace = pm.sample(1000, return_inferencedata=True)
1398/41: trace
1398/42: trace["theta"]
1398/43: type(trace)
1398/44:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y_obs = pm.Binomial("y_obs", n=1, p=theta, observed=y)
    trace = pm.sample(1000, return_inferencedata=False)
1398/45: trace
1398/46: trace["theta"]
1398/47: plt.hist(trace["theta"])
1398/48: plt.show()
1399/1: import pymc as pm
1399/2: import numpy as np
1399/3: import scipy.stats as stats
1399/4: y = stats.bernoulli(0.9).rvs(40)
1399/5: y
1399/6:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y_obs = pm.Binomial("y_obs", n=1, p=theta, observed=y)
    idata = pm.sample(1000, return_inferencedata=True)
1399/7: idata
1399/8: idata["posterior"]
1399/9: idata["posterior"].keys()
1399/10: str(idata["posterior"].keys())
1399/11:
for key in idata["posterior"].keys():
    print(key)
1399/12: idata["posterior"]["theta"]
1399/13: idata["posterior"]["theta"].shape
1399/14: type(idata["posterior"]["theta"])
1399/15: ?xarray
1399/16: np.array(idata["posterior"]["theta"])
1399/17: np.array(idata["posterior"]["theta"]).shape()
1399/18: np.array(idata["posterior"]["theta"]).shape
1399/19: import matplotlib.pyplot as plt
1399/20: spp = pm.sample_prior_predictive(1000 , model)
1399/21: sp
1399/22: spp
1399/23: np.array(spp)
1399/24: np.array(spp['prior'])
1399/25: spp = pm.sample_prior_predictive(1000 , model)["y_obs"]
1399/26: spp
1399/27: spp["prior"]
1399/28: spp["prior"]["y_obs"]
1399/29: spp["prior"].keys()
1399/30:
for key in spp["prior"].keys():
    print(key)
1399/31:
pred_dists = (
    pm.sample_prior_predictive(1000, model)["y_obs"],
    pm.sample_posterior_predictive(idata, 1000, model)["y_obs"],
)
1399/32:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y_obs = pm.Binomial("y_obs", n=1, p=theta, observed=y)
    idata = pm.sample(1000, return_inferencedata=True)
1399/33:
pred_dists = (
    pm.sample_prior_predictive(1000, model)["y_obs"],
    pm.sample_posterior_predictive(idata, 1000, model)["y_obs"],
)
1399/34:
pred_dists = (
    pm.sample_prior_predictive(1000, model),
    pm.sample_posterior_predictive(idata, 1000, model),
)
1400/1: import matplotlib.pyplot as plt
1401/1: import pymc as pm
1401/2: import scipy.stats as stats
1401/3: import numpy as np
1401/4: import matplotlib.pyplot as plt
1401/5: y = stats.bernoulli(0.9).rvs(40)
1401/6:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y_obs = pm.Binomial("y_obs", n=1, p=theta, observed=y)
    idata = pm.sample(1000, return_inferencedata=False)
1401/7: idata
1401/8: idata["theta"]
1401/9: idata.keys()
1401/10: idata
1401/11: idata.chains
1401/12: idata.get_values()
1401/13: idata.varnames
1401/14:
with pm.Model() as model1:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y_obs = pm.Binomial("y_obs", n=1, p=theta, observed=y)
    idata = pm.sample(1000, return_inferencedata=True)
1401/15: pm.sample_prior_predictive(1000 , model1)
1401/16: spp = pm.sample_prior_predictive(1000 , model1)
1401/17: spp
1401/18: spp["y_obs"]
1401/19: spp["prior"]
1401/20: spp["prior"]["theta"]
1401/21: plt.histogram(spp["prior"]["theta"])
1401/22: spp["prior"]["theta"]
1401/23: spp["prior"]["theta"][0]
1401/24: np.array(spp["prior"]["theta"][0])
1401/25: plt.hist(spp["prior"]["theta"][0])
1401/26: plt.show()
1401/27: plt.hist(spp["prior"]["theta"])
1401/28: plt.show()
1401/29: import arviz as az
1401/30: az.plot_trace(idata)
1401/31: az.show()
1401/32: plt.show()
1404/1: import pymc as pm
1406/1: from google.auth.transport.requests import Request
1408/1: import seaborn
1410/1: import seaborn as sns
1410/2: df = sns.load_dataset("penguins")
1410/3: sns.pairplot(df, hue="species")
1410/4: import matplotlib.pyplot as plt
1410/5: plt.show()
1410/6: import numpy as np
1410/7: ?np.repeat
1410/8: np.repeat(5, 10)
1410/9: import scipy.stats as stats
1410/10: ?stats.binom.pmf
1410/11: grid_points = 100
1410/12: heads = 6
1410/13: tosses = 9
1410/14: grid = np.linspace(0 , 1 , grid_points)
1410/15: prior = np.repeat(5, grid_points)
1410/16: grid
1410/17: prior
1410/18: likelyhood = stats.binom.pmf(heads , tosses , grid)
1410/19: likelyhood
1411/1: import scipy.stats as stats
1411/2: import pymc as pm
1411/3: import numpy as np
1411/4: import arviz as az
1411/5: n, k, t0 = 1.0, 1.0, 0.0
1411/6:
def l(t, n=1.0, k=1.0, t0=0.0):
    return n / (1.0 + np.exp(-k(t - t0)))
1411/7:
def dl(t, n=1.0, k=1.0, t0=0.0):
    return 0.25 * k * n / np.cosh(0.5 * k * (t - t0))
1411/8: ?np.random.uniform
1411/9: np.random.uniform(low = -10.0 , high = -8.0)
1411/10: np.random.uniform(low = -10.0 , high = -8.0 , 10)
1411/11: np.random.uniform(10 , low = -10.0 , high = -8.0)
1411/12: ?np.random.uniform
1411/13: np.random.uniform(size = 10 , low = -10.0 , high = -8.0)
1411/14: tt = np.random.uniform(size = 10 , low = -10.0 , high = -8.0)
1411/15: nn = l(tt)
1411/16:
def l(t, n=1.0, k=1.0, t0=0.0):
    return n / (1.0 + np.exp(-k * (t - t0)))
1411/17:
def dl(t, n=1.0, k=1.0, t0=0.0):
    return 0.25 * k * n / np.cosh(0.5 * k * (t - t0))
1411/18: tme = np.random.uniform(size=10, low=-10.0, high=-8.0)
1411/19: val = l(tme)
1411/20: tme
1411/21: val
1411/22: tme = np.random.uniform(size=10, low=-10.0, high=-8.0)
1411/23: val = l(tme, n=1.0, k=1.0, t0=0.0)
1411/24: plt.plot(tme, val)
1411/25: import matplotlib.pyplot as plt
1411/26: plt.plot(tme, val)
1411/27: plt.show()
1411/28: plt.scatter(tme, val)
1411/29: plt.show()
1411/30: ?np.random.normal
1411/31:
tme = np.random.uniform(size=10, low=-10.0, high=-8.0) + np.random.normal(
    size=10, loc=0.0, scale=0.1
)
1411/32: val = l(tme, n=1.0, k=1.0, t0=0.0) + np.random.normal(size=10, loc=0.0, scale=0.1)
1411/33: plt.scatter(tme, val)
1411/34: plt.show()
1411/35: n, k, t0 = 1.0, 1.0, 0.0
1411/36:
tme = np.random.uniform(size=10, low=-10.0, high=-8.0) + np.random.normal(
    size=10, loc=0.0, scale=0.01
)
1411/37: val = l(tme, n=1.0, k=1.0, t0=0.0) + np.random.normal(size=10, loc=0.0, scale=0.1)
1411/38: val = l(tme, n=n, k=k, t0=t0) + np.random.normal(size=10, loc=0.0, scale=0.1)
1411/39: n, k, t0 = 1.0, 1.0, 0.0
1411/40:
tme = np.random.uniform(size=10, low=-10.0, high=-8.0) + np.random.normal(
    size=10, loc=0.0, scale=0.01
)
1411/41: val = l(tme, n=n, k=k, t0=t0) + np.random.normal(size=10, loc=0.0, scale=0.1)
1411/42: plt.scatter(tme, val)
1411/43: plt.show()
1411/44: s, n, k, t0 = (100,)1.0, 1.0, 0.0
1411/45: s, n, k, t0 = 100 , 1.0, 1.0, 0.0
1411/46:
tme = np.random.uniform(size=s, low=-10.0, high=-8.0) + np.random.normal(
    size=s, loc=0.0, scale=0.01
)
1411/47: val = l(tme, n=n, k=k, t0=t0) + np.random.normal(size=s, loc=0.0, scale=0.1)
1411/48: plt.scatter(tme, val)
1411/49: plt.show()
1411/50:
tme = np.random.uniform(size=s, low=-10.0, high=10.0) + np.random.normal(
    size=s, loc=0.0, scale=0.01
)
1411/51: tme
1411/52:
tme = np.sort(
    np.random.uniform(size=s, low=-10.0, high=10.0)
    + np.random.normal(size=s, loc=0.0, scale=0.01)
)
1411/53: tme
1411/54: s, n, k, t0 = 100, 1.0, 1.0, 0.0
1411/55:
tme = np.sort(
    np.random.uniform(size=s, low=-10.0, high=10.0)
    + np.random.normal(size=s, loc=0.0, scale=0.01)
)
1411/56: val = l(tme, n=n, k=k, t0=t0) + np.random.normal(size=s, loc=0.0, scale=0.1)
1411/57: plt.plot(tme , val)
1411/58: plt.show()
1412/1: import pymc as pm
1412/2: ?pm.Uniform
1412/3:
    for l, u in zip(ls, us):
        y = np.zeros(500)
        y[(x<u) & (x>l)] = 1.0/(u-l)
        plt.plot(x, y, label='lower = {}, upper = {}'.format(l, u))
    plt.xlabel('x', fontsize=12)
    plt.ylabel('f(x)', fontsize=12)
    plt.ylim(0, 1)
    plt.legend(loc=1)
    plt.show()
1412/4: ?pm.Uniform
1412/5:
    import matplotlib.pyplot as plt
    import numpy as np
    import arviz as az
    plt.style.use('arviz-darkgrid')
    x = np.linspace(-3, 3, 500)
    ls = [0., -2]
    us = [2., 1]
    for l, u in zip(ls, us):
        y = np.zeros(500)
        y[(x<u) & (x>l)] = 1.0/(u-l)
        plt.plot(x, y, label='lower = {}, upper = {}'.format(l, u))
    plt.xlabel('x', fontsize=12)
    plt.ylabel('f(x)', fontsize=12)
    plt.ylim(0, 1)
    plt.legend(loc=1)
    plt.show()
1412/6: ?pm.Uniform
1411/59:
with pm.Model() as model:
    n = pm.Uniform(0.0, 10.0)
    k = pm.Uniform(0.0, 10.0)
    t0 = pm.Uniform(-10.0, 10.0)
1411/60:
with pm.Model() as model:
    n = pm.Uniform("n", 0.0, 10.0)
    k = pm.Uniform("k", 0.0, 10.0)
    t0 = pm.Uniform("t0", -10.0, 10.0)
1411/61:
with pm.Model() as model:
    n = pm.Uniform("n", 0.0, 10.0)
    k = pm.Uniform("k", 0.0, 10.0)
    t0 = pm.Uniform("t0", -10.0, 10.0)
1411/62:
with pm.Model() as model:
    n = pm.Uniform("n", 0.0, 10.0)
    k = pm.Uniform("k", 0.0, 10.0)
    t0 = pm.Uniform("t0", -10.0, 10.0)
1411/63: import pytensor.tensor as pt
1411/64:
with pm.Model() as model:
    n = pm.Uniform("n", 0.0, 10.0)
    k = pm.Uniform("k", 0.0, 10.0)
    t0 = pm.Uniform("t0", -10.0, 10.0)
    y = pt.exp(-k * (t0))
1411/65: y
1411/66: n
1414/1: import scipy.stats as stats
1414/2: import numpy as np
1414/3: np.abs
1414/4: import pymc as pm
1414/5: ?pm.Normal
1415/1: import numpy as np
1415/2: ?np.linspace
1415/3: np.linspace(-10 , 10 , 100)
1415/4: np.linspace(-10, 10, 100).shape()
1415/5: np.linspace(-10, 10, 100).shape
1416/1: import numpy as np
1416/2: import pymc as pm
1416/3: import pytensor.tensor as pt
1416/4: ?np.linspace
1416/5: ?np.arrange
1416/6: np.arange
1416/7: ?np.arange
1416/8: np.arange(-10.0 , -1.0 , 0.1)
1416/9: len(np.arange(-10.0, -1.0, 0.1))
1417/1: %load_ext autoreload
1417/2: %autoreload 2
1417/3: from lf import l, dl, make_model, make_data
1417/4: tme , val = make_data(-10.0 , 1.0 , 0.1 , 0.01)
1417/5: tme
1417/6: val
1417/7: import numpy as np
1417/8: import pymc as pm
1417/9: import pytensor.tensor as pt
1417/10: import matplotlib.pyplot as plt
1417/11: import arviz as az
1417/12: tme, val = make_data(-10.0, 1.0, 0.1, 0.01)
1417/13: model = make_model(tme, val)
1417/14: model
1417/15:
with model:
    trace = pm.sample(10000)
1417/16: az.plot_trace(trace)
1417/17: plt.show()
1417/18: tme, val = make_data(-10.0, 10.0, 0.1, 0.01)
1417/19: model = make_model(tme, val)
1417/20:
with model:
    trace = pm.sample(10000)
1417/21: az.plot_trace(trace)
1417/22: plt.show()
1417/23: pm.sample_prior_predictive(trace, model=model)
1417/24: pm.sample_prior_predictive(trace, model=model, var_names=["n", "k", "t0"])
1417/25: trace
1417/26: trace['k']
1417/27: trace.keys()
1417/28: trace['posterior']
1417/29: trace["posterior"].keys()
1417/30: trace["posterior"]["k"]
1417/31: trace["posterior"]["k"].keys()
1417/32: type(trace["posterior"]["k"])
1417/33: trace["posterior"]["k"].all()
1417/34: np.array(trace["posterior"]["k"])
1417/35: pm.sample_prior_predictive(trace["posterior"], model=model, var_names=["n", "k", "t0"])
1417/36: pm.sample_posterior_predictive(trace)
1417/37: pm.sample_posterior_predictive(trace , model = model)
1417/38: pred = pm.sample_posterior_predictive(trace , model = model)
1417/39: pred
1417/40: pred["posterior_predictive"]
1417/41: pred["posterior_predictive"]["n"]
1417/42: pred["posterior_predictive"]
1417/43: trace["posterior"]["k"]
1417/44: np.array(trace["posterior"]["k"])
1417/45: tme
1417/46: np.array(trace["posterior"]["k"]).flatten()
1417/47: k = np.array(trace["posterior"]["k"]).flatten()
1417/48: n = np.array(trace["posterior"]["n"]).flatten()
1417/49: t0 = np.array(trace["posterior"]["t0"]).flatten()
1417/50: t0
1417/51: k = np.array(trace["posterior"]["k"]).flatten()[1:20]
1417/52: n = np.array(trace["posterior"]["n"]).flatten()[1:20]
1417/53: k = np.array(trace["posterior"]["k"]).flatten()[:20]
1417/54: n = np.array(trace["posterior"]["n"]).flatten()[:20]
1417/55: t0 = np.array(trace["posterior"]["t0"]).flatten()[:20]
1417/56:
for i in range(20):
    nn, kk, t0t0 = n[i], k[i], t0[i]
    valval = nn / (1.0 + np.exp(-kk * (tme - t0to)))
    plt.plot(tme, valval)
1417/57:
for i in range(20):
    nn, kk, t0t0 = n[i], k[i], t0[i]
    valval = nn / (1.0 + np.exp(-kk * (tme - t0t0)))
    plt.plot(tme, valval)
1417/58: plt.show()
1417/59: tme, val = make_data(-10.0, -0.2, 0.1, 0.01)
1417/60: model = make_model(tme, val)
1417/61:
with model:
    trace = pm.sample(10000)
1417/62: az.plot_trace(trace)
1417/63: plt.show()
1417/64: ntr = np.array(trace["posterior"]["n"]).flatten()[-20:]
1417/65: ktr = np.array(trace["posterior"]["k"]).flatten()[-20:]
1417/66: t0tr = np.array(trace["posterior"]["t0"]).flatten()[-20:]
1417/67:
for i in range(len(ntr)):
    nn, kk, t0t0 = ntr[i], ktr[i], t0tr[i]
    valval = nn / (1.0 + np.exp(-kk * (tme - t0t0)))
    plt.plot(tme, valval)
1417/68: plt.show()
1417/69:
for i in range(len(ntr)):
    nn, kk, t0t0 = ntr[i], ktr[i], t0tr[i]
    t = np.linspace(-10.0, 10.0, 100.0)
    valval = nn / (1.0 + np.exp(-kk * (t - t0t0)))
    plt.plot(tme, valval)
1417/70:
for i in range(len(ntr)):
    nn, kk, t0t0 = ntr[i], ktr[i], t0tr[i]
    t = np.linspace(-10.0, 10.0, 100)
    valval = nn / (1.0 + np.exp(-kk * (t - t0t0)))
    plt.plot(tme, valval)
1417/71:
for i in range(len(ntr)):
    nn, kk, t0t0 = ntr[i], ktr[i], t0tr[i]
    t = np.arange(-10, 10, 0.1)
    valval = nn / (1.0 + np.exp(-kk * (t - t0t0)))
    plt.plot(tme, valval)
1417/72:
for i in range(len(ntr)):
    nn, kk, t0t0 = ntr[i], ktr[i], t0tr[i]
    t = np.arange(-10, 10, 0.1)
    valval = nn / (1.0 + np.exp(-kk * (t - t0t0)))
    print(t.shape)
1417/73:
for i in range(len(ntr)):
    nn, kk, t0t0 = ntr[i], ktr[i], t0tr[i]
    t = np.arange(-10, 10, 0.1)
    valval = nn / (1.0 + np.exp(-kk * (t - t0t0)))
    print(valval.shape)
1417/74:
for i in range(len(ntr)):
    nn, kk, t0t0 = ntr[i], ktr[i], t0tr[i]
    t = np.arange(-10, 10, 0.1)
    valval = nn / (1.0 + np.exp(-kk * (t - t0t0)))
    plt.plot(t, valval)
1417/75: plt.show()
1417/76:
for i in range(len(ntr)):
    nn, kk, t0t0 = ntr[i], ktr[i], t0tr[i]
    t = np.arange(-10, 10, 0.1)
    valval = nn / (1.0 + np.exp(-kk * (t - t0t0)))
    plt.plot(t, valval, linewidth=1, color="gray", alpha=0.1)
1417/77: plt.show()
1417/78: ntr = np.array(trace["posterior"]["n"]).flatten()[-200:]
1417/79: ktr = np.array(trace["posterior"]["k"]).flatten()[-200:]
1417/80: t0tr = np.array(trace["posterior"]["t0"]).flatten()[-200:]
1417/81:
for i in range(len(ntr)):
    nn, kk, t0t0 = ntr[i], ktr[i], t0tr[i]
    t = np.arange(-10, 10, 0.1)
    valval = nn / (1.0 + np.exp(-kk * (t - t0t0)))
    plt.plot(t, valval, linewidth=1, color="gray", alpha=0.1)
1417/82: plt.show()
1417/83: ntr = np.array(trace["posterior"]["n"]).flatten()[-2000:]
1417/84: ktr = np.array(trace["posterior"]["k"]).flatten()[-2000:]
1417/85: t0tr = np.array(trace["posterior"]["t0"]).flatten()[-2000:]
1417/86:
for i in range(len(ntr)):
    nn, kk, t0t0 = ntr[i], ktr[i], t0tr[i]
    t = np.arange(-10, 10, 0.1)
    valval = nn / (1.0 + np.exp(-kk * (t - t0t0)))
    plt.plot(t, valval, linewidth=1, color="gray", alpha=0.1)
1417/87: plt.show()
1417/88:
for i in range(len(ntr)):
    nn, kk, t0t0 = ntr[i], ktr[i], t0tr[i]
    t = np.arange(-10, 10, 0.1)
    valval = 0.25 * kk * nn / np.cosh(0.5 * kk * (t - t0t0))
    plt.plot(t, valval, linewidth=1, color="gray", alpha=0.1)
1417/89: plt.show()
1417/90: tme, val = make_data(-10.0, 0.1, 0.1, 0.01)
1417/91: tme, val = make_data(-10.0, 0.1, 0.1, 0.01)
1417/92: model = make_model(tme, val)
1417/93: trace = sample_model(model, 10000)
1417/94: from lf import sample_model
1417/95: from lf import draw_model_diff
1417/96: trace = sample_model(model, 10000)
1417/97: draw_model_diff(tracee, 500, -10.0, 10.0, 0.1, None, None)
1417/98: draw_model_diff(trace, 500, -10.0, 10.0, 0.1, None, None)
1417/99: draw_model_diff(trace, 500, -10.0, 10.0, 0.1, None, None)
1417/100: draw_model_diff(trace, 500, -10.0, 10.0, 0.1, None, None)
1417/101: draw_model_diff(trace, 500, -10.0, 10.0, 0.1, None, None)
1417/102: "hello {} {}".format(1.0 , 2.0)
1417/103: draw_model_diff(trace, 500, -10.0, 10.0, 0.1)
1417/104: draw_model_diff(trace, 500, -10.0, 10.0, 0.1)
1417/105: draw_model_diff(trace, 500, -10.0, 10.0, 0.1)
1417/106: draw_model_diff(trace, 500, -10.0, 10.0, 0.1)
1417/107: draw_model_diff(trace, 500, -10.0, 10.0, 0.1)
1417/108: draw_model_diff(trace, 500, -10.0, 10.0, 0.1)
1417/109: from lf import draw_diff
1417/110: from lf import draw_log
1417/111: draw_log(trace, 500, -10.0, 10.0, 0.1, tme=tme, val=val)
1417/112: from lf import draw_log_
1417/113: from lf import draw_diff_log
1417/114: draw_diff_log(trace, 500, -10.0, 10.0, 0.1, tme=tme, val=val)
1417/115: draw_diff_log(trace, 500, -10.0, 10.0, 0.1, tme=tme, val=val)
1417/116: draw_diff_log(trace, 500, -10.0, 10.0, 0.1, tme=tme, val=val)
1417/117: draw_diff_log(trace, 500, -10.0, 10.0, 0.1, tme=tme, val=val)
1417/118: draw_diff_log(trace, 500, -10.0, 10.0, 0.1, tme=tme, val=val)
1417/119: draw_diff_log(trace, 500, -10.0, 10.0, 0.1, tme=tme, val=val)
1417/120: draw_diff_log(trace, 500, -10.0, 10.0, 0.1, tme=tme, val=val)
1417/121: draw_diff_log(trace, 500, -10.0, 10.0, 0.1, tme=tme, val=val)
1417/122: draw_diff_log(trace, 500, -10.0, 10.0, 0.1, tme=tme, val=val)
1417/123: draw_diff_log(trace, 500, -10.0, 10.0, 0.1, tme=tme, val=val)
1417/124: draw_diff_log(trace, 500, -10.0, 10.0, 0.1, tme=tme, val=val)
1417/125: draw_diff_log(trace, 500, -10.0, 10.0, 0.1, tme=tme, val=val)
1417/126: draw_diff_log(trace, 500, -10.0, 10.0, 0.1, tme=tme, val=val)
1417/127: draw_diff_log(trace, 500, -10.0, 10.0, 0.1, tme=tme, val=val)
1417/128: list(range(10, 2))
1417/129: ?range
1417/130: list(range(0, 10, 2))
1419/1: import numpy as np
1419/2: import pymc as pm
1419/3: import pytensor.tensor as pt
1419/4: import arviz as az
1419/5: import matplotlib.pyplot as plt
1419/6: np.random.seed(123)
1419/7: import scipy.stats as stats
1419/8: ?stats.bernoulli.rvs
1419/9: n_experiments = 4
1419/10: theta_real = 0.35
1419/11: data = stats.bernoulli.rvs(p = theta_real , size = n_experiments)
1419/12: data
1419/13:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y = pm.Bernoulli("y", p=theta, observed=data)
1419/14: y
1419/15: type(y)
1419/16: from pytensor import pp, grad
1419/17: ?pp
1419/18: ?grad
1419/19: pp(t)
1419/20: pp(y)
1419/21: ?pm.find_MAP
1419/22:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y = pm.Bernoulli("y", p=theta, observed=data)
    start = pm.find_MAP()
1419/23:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y = pm.Bernoulli("y", p=theta, observed=data)
    start = pm.find_MAP()
    step = pm.Metropolis()
    trace = pm.sample(1000, step=step, start=start)
1419/24: az.plot_trace(trace)
1419/25: plt.show()
1419/26: theta_real = 0.35
1419/27: n_experiments = 4
1419/28: data = stats.bernoulli.rvs(p=theta_real, size=n_experiments)
1419/29: theta_real = 0.35
1419/30: n_experiments = 4
1419/31: theta_real = 0.35
1419/32: n_experiments = 40
1419/33: data = stats.bernoulli.rvs(p=theta_real, size=n_experiments)
1419/34:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y = pm.Bernoulli("y", p=theta, observed=data)
    start = pm.find_MAP()
    step = pm.Metropolis()
    trace = pm.sample(1000, step=step, start=start)
1419/35: az.plot_trace(trace)
1419/36: plt.show()
1419/37: theta_real = 0.35
1419/38: n_experiments = 400
1419/39: data = stats.bernoulli.rvs(p=theta_real, size=n_experiments)
1419/40:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y = pm.Bernoulli("y", p=theta, observed=data)
    start = pm.find_MAP()
    step = pm.Metropolis()
    trace = pm.sample(1000, step=step, start=start)
1419/41: az.plot_trace(trace)
1419/42: plt.show()
1419/43:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y = pm.Bernoulli("y", p=theta, observed=data)
    start = pm.find_MAP()
    step = pm.Metropolis()
    trace = pm.sample(1000, step=step, start=start, chains=4)
1419/44: az.plot_trace(trace)
1419/45: plt.show()
1419/46: theta_real = 0.35
1419/47: n_experiments = 4
1419/48: np.random.seed(123)
1419/49: theta_real = 0.35
1419/50: n_experiments = 4
1419/51: data = stats.bernoulli.rvs(p=theta_real, size=n_experiments)
1419/52:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y = pm.Bernoulli("y", p=theta, observed=data)
    start = pm.find_MAP()
    step = pm.Metropolis()
    trace = pm.sample(1000, step=step, start=start)
1419/53: burnin = 100
1419/54: chain = trace[burnin:]
1419/55: trace
1419/56: ?pm.traceplot
1419/57: pm.traceplot(trace)
1419/58: pm.plot_trace(trace)
1419/59: plt.show()
1419/60: trace[100:]
1419/61: trace
1419/62: trace["posterior"]
1419/63: trace["posterior"][burnin:]
1419/64: type(trace)
1419/65: trace["theta"]
1419/66: trace["posterior"]["theta"]
1419/67: trace["posterior"]["theta"][2:]
1419/68: trace["posterior"]["theta"][burnin:]
1419/69: pm.trace_plot(trace["posterior"]["theta"][burnin:])
1419/70: pm.plot_trace(trace["posterior"]["theta"][burnin:])
1419/71: trace["posterior"]["theta"][burnin:]
1419/72: dta = trace["posterior"]["theta"][burnin:]
1419/73: type(dta)
1419/74: az.plot_trace(dta)
1419/75: az.plot_trace(np.array(dta))
1420/1: import scipy.stats as stats
1420/2: import numpy as np
1420/3: import pymc as pm
1420/4: import pytensor.tensor as pt
1420/5: import matplotlib.pyplot as plt
1420/6: np.random.seed(123)
1420/7: n_experiments = 4
1420/8: theta_real = 0.35
1420/9: data = stats.bernoulli.rvs(p=theta_real, size=n_experiments)
1420/10:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y = pm.Bernoulli("y", p=theta, observed=data)
    start = pm.find_MAP()
    step = pm.Metropolis()
    trace = pm.sample(1000, step=step, start=start, return_inferencedata=False)
1420/11: trace
1420/12: type(trace)
1420/13: burnin = 100
1420/14: trace[burnin:]
1420/15: new = trace[burnin:]
1420/16: new
1420/17: type(trace)
1420/18: ?pm.backends.base.MultiTrace
1420/19: pm.plot_trace(new)
1420/20: import arviz as az
1420/21: az.plot_trace(trace)
1420/22:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y = pm.Bernoulli("y", p=theta, observed=data)
    start = pm.find_MAP()
    step = pm.Metropolis()
    trace = pm.sample(1000, step=step, start=start)
1420/23: trace.posterior
1420/24: az.plot_trace(trace.posterior)
1420/25: plt.show()
1420/26: ?az.extrace
1420/27: ?az.extract
1420/28: az.extract(idata)
1420/29: az.extract(trace)
1420/30: trace
1420/31: type(az.extract(trace))
1420/32: type(trace)
1420/33: az.plot_trace(az.extract(trace))
1420/34: plt.show()
1420/35: len(trace)
1420/36: len(trace.posterior)
1420/37:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y = pm.Bernoulli("y", p=theta, observed=data)
    start = pm.find_MAP()
    step = pm.Metropolis()
    trace = pm.sample(1000, step=step, start=start)
1420/38: trace
1420/39: trace.posterior
1420/40: len(trace.posterior)
1420/41: ?slice
1420/42: chain = trace.sel(draw=slice(burnin, None))
1420/43: chain
1420/44: chain.posterior
1420/45: az.plot_trace(chain)
1420/46: plt.show()
1420/47: az.plot_trace(chain)
1420/48: plt.show()
1420/49: az.plot_trace(chain, lines={"theta": theta_real})
1420/50: plt.show()
1420/51: az.plot_trace(chain, lines={"t": theta_real})
1420/52: az.plot_trace(chain, lines={"theta": theta_real})
1420/53: pm.plot_trace(chain, lines={"theta": theta_real})
1420/54: plt.show()
1420/55: pm.plot_trace(chain, lines={"theta": theta_real})
1420/56: plt.show()
1420/57:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y = pm.Bernoulli("y", p=theta, observed=data)
    start = pm.find_MAP()
    step = pm.Metropolis()
    trace = pm.sample(1000, step=step, start=start, chains=6)
1420/58: chain = trace.sel(draw=slice(burnin, None))
1420/59: chain
1420/60: pm.gelman_rubin
1420/61: az.rhat(chain)
1420/62: az.rhat(chain, names=["theta"])
1420/63: ?az.rhat
1420/64: az.rhat(chain, var_names=["theta"])
1420/65: pm.forestplot(chain, varnames=["theta"])
1420/66: plt.show()
1420/67: az.plot_forest(chain, var_names=["theta"])
1420/68: plt.show()
1420/69: az.summary(chain)
1420/70: pm.summary(chain)
1420/71: pm.df_summary(chain)
1420/72: az.df_summary(chain)
1420/73: ?az.summary
1420/74: az.df_summary(chain)
1420/75: pm.summary(chain)
1420/76: ?pm.summary
1420/77: az.autocorr(chain)
1420/78: ?az.autocorr
1420/79: trace.posterior["theta"]
1420/80: trace.posterior["theta"][0]
1420/81: np.array(trace.posterior["theta"][0])
1420/82: az.autoco(np.array(trace.posterior["theta"][0]))
1420/83: az.autocorr(np.array(trace.posterior["theta"][0]))
1420/84: pm.autocorrplot(trace)
1420/85: plt.show()
1420/86: az.plot_autocorr(trace)
1420/87: plt.show()
1420/88: trace
1420/89: chain.posterior["theta"][0]
1420/90: chain.posterior["theta"][0]
1420/91: pm.summary(chain)
1420/92: ?az.ess
1420/93: az.ess(chain)
1420/94: chain[0]
1420/95: chain.posterior["theta"][0]
1420/96: az.ess(chain.posterior["theta"][0])
1420/97: chain.posterior["theta"][0].shape
1420/98: az.ess(chain.posterior["theta"])
1420/99: az.ess(chain.posterior["theta"].sel(chain=[0]))
1420/100: ?pm.plot_posterior
1420/101: pm.plot_posterior(chain)
1420/102: plt.show()
1420/103: np.random.seed(123)
1420/104: n_experiments = 40
1420/105: theta_real = 0.35
1420/106: data = stats.bernoulli.rvs(p=theta_real, size=n_experiments)
1420/107:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y = pm.Bernoulli("y", p=theta, observed=data)
    start = pm.find_MAP()
    step = pm.Metropolis()
    trace = pm.sample(1000, step=step, start=start, chains=6)
1420/108: chains = trace.sel(draw=slice(100, None))
1420/109: pm.plot_posterior(chains)
1420/110: plt.show()
1420/111: n_experiments = 400
1420/112: data = stats.bernoulli.rvs(p=theta_real, size=n_experiments)
1420/113:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y = pm.Bernoulli("y", p=theta, observed=data)
    start = pm.find_MAP()
    step = pm.Metropolis()
    trace = pm.sample(1000, step=step, start=start, chains=6)
1420/114: az.summary(trace)
1420/115: pm.plot_autocorr(trace)
1420/116: plt.show()
1420/117: az.ess(chain.posterior["theta"].sel(chain=[0]))
1420/118: az.ess(chain.posterior["theta"].sel(chain=[1]))
1420/119: az.ess(chain.posterior["theta"].sel(chains=[0]))
1420/120: chains
1420/121: az.ess(chains.posterior["theta"].sel(chain=[1]))
1420/122: az.ess(chains.posterior["theta"].sel(chain=[0]))
1420/123: az.ess(chains.posterior["theta"].sel(chain=[2]))
1420/124: az.ess(chains.posterior["theta"].sel(chain=[3]))
1420/125: pm.plot_posterior(chains)
1420/126: plt.show()
1420/127: n_experiments = 4000
1420/128: data = stats.bernoulli.rvs(p=theta_real, size=n_experiments)
1420/129:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y = pm.Bernoulli("y", p=theta, observed=data)
    start = pm.find_MAP()
    step = pm.Metropolis()
    trace = pm.sample(1000, step=step, start=start, chains=6)
1420/130: chains = trace.sel(draw=slice(100, None))
1420/131: pm.plot_posterior(chains)
1420/132: plt.show()
1420/133:
with pm.Model() as model:
    theta = pm.Beta("theta", alpha=1, beta=1)
    y = pm.Bernoulli("y", p=theta, observed=data)
    start = pm.find_MAP()
    step = pm.Metropolis()
    trace = pm.sample(10000, step=step, start=start, chains=6)
1420/134: chains = trace.sel(draw=slice(100, None))
1420/135: pm.plot_posterior(chains)
1420/136: plt.show()
1420/137: pm.plot_posterior(chains, rope=[0.3, 0.4])
1420/138: plt.show()
1420/139: pm.plot_posterior(chains, rope=[0.344, 0.36])
1420/140: plt.show()
1420/141: ?pm.plot_posterior
1420/142: pm.plot_posterior(chains, rope=[0.344, 0.36], kde_plot=False)
1420/143: ?pm.plot_posterior
1420/144: pm.plot_posterior(chains, rope=[0.344, 0.36], kind="hist")
1420/145: plt.show()
1420/146: ?pm.plot_posterior
1420/147: ?plt.hist
1420/148: ?pm.plot_posterior
1420/149: ?plt.hist
1420/150: pm.plot_posterior(chains, rope=[0.344, 0.36], kind="hist", density=True)
1420/151: plt.show()
1421/1: import pymc as pm
1421/2: pm.sample_ppc
1421/3: import scipy.stats as stats
1421/4: import numpy as np
1421/5: import pymc as pm
1421/6: import arviz as az
1421/7: import pytensor.tensor as pt
1421/8: import matplotlib.pyplot as plt
1421/9: import seaborn as sns
1421/10: ?stats.norm
1421/11: stats.norm(loc = 55.0 , scale = 5.0)
1421/12: stats.norm(loc=55.0, scale=5.0).rvs(100)
1421/13: data = stats.norm(loc=55.0, scale=5.0).rvs(100)
1421/14: ?az.plot_kde
1421/15: az.plot_kde(data)
1421/16: plt.show()
1421/17: data = stats.norm(loc=55.0, scale=5.0).rvs(1000)
1421/18: az.plot_kde(data)
1421/19: plt.show()
1421/20: data = stats.norm(loc=55.0, scale=5.0).rvs(10000)
1421/21: plt.show()
1421/22: az.plot_kde(data)
1421/23: plt.show()
1421/24: np.append(data , [70.0 , 80.0])
1421/25: data
1421/26: data = np.append(stats.norm(loc=55.0, scale=5.0).rvs(100) , [70 , 80])
1421/27: data
1421/28: az.plot_kde(data)
1421/29: plt.show()
1421/30: plt.show()
1421/31: az.plot_kde(data)
1421/32: plt.show()
1421/33: data = np.append(stats.norm(loc=55.0, scale=5.0).rvs(100) , [70 , 75 , 80])
1421/34: az.plot_kde(data)
1421/35: plt.show()
1421/36:
with pm.Model() as model:
    mu = pm.Uniform("mu", 0.0, 100.0)
    sigma = pm.HalfNormal("sigma", sd=20)
    y = pm.Normal("y", mu=mu, sigma=sigma, observed=data)
    trace = pm.sample(1100)
1421/37:
with pm.Model() as model:
    mu = pm.Uniform("mu", 0.0, 100.0)
    sigma = pm.HalfNormal("sigma", sigma=20)
    y = pm.Normal("y", mu=mu, sigma=sigma, observed=data)
    trace = pm.sample(1100)
1421/38: trace
1421/39: pred = pm.sample_posterior_predictive(trace, model=model)
1421/40: pred
1421/41: pred.posterior_predictive
1421/42: pred.posterior_predictive.y
1421/43: np.array(pred.posterior_predictive.y)
1421/44: np.array(pred.posterior_predictive.y).shape
1421/45: ?pm.sample_posterior_predictive
1421/46: pred = pm.sample_posterior_predictive(trace, model=model , size = 100)
1421/47: pred = pm.sample_posterior_predictive(trace, model=model , samples = 100)
1421/48: ?pm.sample_posterior_predictive
1421/49: pred = pm.sample_posterior_predictive(trace, model=model , sample_dims = 100)
1421/50:
with model:
    vals_mu = pm.draw(mu, draws=100)
1421/51: vals_mu
1421/52: az.plot_kde(vals_mu)
1421/53: plt.show()
1421/54: pred = pm.sample_posterior_predictive(trace, model=model , samples = 100)
1421/55: pm.sample_posterior_predictive
1421/56: ?pm.sample_posterior_predictive
1421/57: pred = pm.sample_posterior_predictive(trace, model=model)
1421/58: pred = pm.sample_posterior_predictive(trace, model=model)
1421/59: pred = pm.sample_posterior_predictive(trace, model=model)
1421/60: trace
1421/61: trace.posterior["mu"]
1421/62: np.array(trace.posterior["mu"])
1421/63: pred
1421/64: pred.posterior_predictive
1421/65: pred.posterior_predictive["mu"]
1421/66: pred.posterior_predictive
1421/67: pred.posterior_predictive[y]
1421/68: pred
1421/69: pred.ovserved_data
1421/70: pred.observed_data
1421/71: pred = pm.sample_posterior_predictive(trace, model=model)
1421/72: pred = pm.sample_prior_predictive(trace, model=model)
1421/73: ?pm.sample_prior_predictive
1421/74: pm.sample_prior_predictive(100, model=model)
1421/75: pm.sample_prior_predictive(100, model=model).mu
1421/76: prior_predictive = pm.sample_prior_predictive(100, model=model)
1421/77: prior_predictive
1421/78: prior_predictive.prior_predictive
1421/79: prior_predictive.prior_predictive["y"]
1421/80: prior_predictive.prior_predictive["mu"]
1421/81: data
1421/82: data = np.append(stats.norm(loc=55.0, scale=5.0).rvs(100), [70, 75, 80])
1421/83:
with pm.Model() as model:
    mu = pm.Uniform("mu", 0.0, 100.0)
    sigma = pm.HalfNormal("sigma", sigma=20)
    y = pm.Normal("y", mu=mu, sigma=sigma, observed=data)
    trace = pm.sample(1100)
1421/84: chains = trace.sel(draw=slice(100, None))
1421/85: chains
1421/86: y_pred = pm.sample_posterior_predictive(chains)
1421/87: y_pred = pm.sample_posterior_predictive(chains , model = model)
1421/88: y_pred
1421/89: y_pred.observed_data
1421/90: y_pred.observed_data.y
1421/91: y_pred
1421/92: y_pred.posterior_predictive
1421/93: y_pred.posterior_predictive.y
1421/94: np.array(y_pred.posterior_predictive.y)
1421/95: np.array(y_pred.posterior_predictive.y).shape()
1421/96: np.array(y_pred.posterior_predictive.y).shape
1421/97: data.shape()
1421/98: data.shape
1421/99: y_pred = pm.sample_posterior_predictive(chains , model = model , predictions=100)
1421/100: y_pred.posterior_predictive.y
1421/101: y_pred
1421/102: y_pred.predictions
1421/103: y_pred.predictions.y
1421/104: ?pm.sample_posterior_predictive
1421/105: ?pm.sample_posterior_predictive
1421/106: trace
1421/107: trace.posterior
1421/108: ?trace.posterior.expand_dims
1421/109: ?pm.sample_posterior_predictive
1421/110: ?trace.posterior.expand_dims
1421/111: pm.__version__
1421/112: ?pm.Model
1421/113: np.arrange(5)
1421/114: np.arange(5)
1421/115: data = rng.standard_normal(100)
1421/116:
RANDOM_SEED = 8927
rng = np.random.default_rng(RANDOM_SEED)
1421/117: data = rng.standard_normal(100)
1421/118:
with pm.Model() as model:
    mu = pm.Normal("mu", mu=0, sigma=1)
    sd = pm.HalfNormal("sd", sigma=1)
    obs = pm.Normal("obs", mu=mu, sigma=sd, observed=data)

    idata = pm.sample()
1421/119: idata
1421/120: idata.posterior
1421/121: idata
1421/122: idata.observed_data
1421/123: idata.sample_stats
1421/124:
with model:
    idata.extend(pm.sample_posterior_predictive(idata))
1421/125: idata
1421/126: idata.posterior_predictive
1421/127: fig, ax = plt.subplots()
1421/128: az.plot_ppc(idata, ax=ax)
1421/129: ax.axvline(data.mean(), ls="--", color="r", label="True mean")
1421/130: ax.legend(fontsize=10)
1421/131: plt.show()
1421/132: idata.posterior_predictive
1421/133: idata.posterior_predictive.obs
1421/134: x = rng.standard_normal(100)
1421/135: y = x > 0
1421/136: y
1421/137: coords = {"idx": np.arange(100)}
1421/138:
with pm.Model(coords=coords) as model:
    x_obs = pm.MutableData("x_obs", x, dims="idx")
    y_obs = pm.MutableData("y_obs", y, dims="idx")
    coeff = pm.Normal("x", mu=0, sigma=1)
    logistic = pm.math.sigmoid(coeff * x_obs)
    pm.Bernoulli("obs", p=logistic, observed=y_obs, dims="idx")
    idata = pm.sample()
1421/139: model
1421/140: az.plot_trace(idata)
1421/141: plt.show()
1421/142: idata
1421/143: idata.posterior
1421/144: idata.observed_data
1421/145:
with model:
    # change the value and shape of the data
    pm.set_data(
        {
            "x_obs": [-1, 0, 1.0],
            # use dummy values with the same shape:
            "y_obs": [0, 0, 0],
        },
        coords={"idx": [1001, 1002, 1003]},
    )

    idata.extend(pm.sample_posterior_predictive(idata))
1421/146:
x = rng.standard_normal(100)
y = x > 0

coords = {"idx": np.arange(100)}
with pm.Model() as model:
    # create shared variables that can be changed later on
    x_obs = pm.MutableData("x_obs", x, dims="idx")
    y_obs = pm.MutableData("y_obs", y, dims="idx")

    coeff = pm.Normal("x", mu=0, sigma=1)
    logistic = pm.math.sigmoid(coeff * x_obs)
    pm.Bernoulli("obs", p=logistic, observed=y_obs, dims="idx")
    idata = pm.sample()
1421/147:
with model:
    # change the value and shape of the data
    pm.set_data(
        {
            "x_obs": [-1, 0, 1.0],
            # use dummy values with the same shape:
            "y_obs": [0, 0, 0],
        },
        coords={"idx": [1001, 1002, 1003]},
    )

    idata.extend(pm.sample_posterior_predictive(idata))
1421/148: idata
1421/149: idata.posterior_predictive
1422/1:
import numpy as np
import pymc as pm
import arviz as az
import pytensor.tensor as pt
%matplotlib inline
import matplotlib.pyplot as plt
1422/2: plt.plot([0 , 1 , 2] , [2 , 3 , 4])
1422/3: \alpha = 1
1422/4:
import numpy as np
import pymc as pm
import arviz as az
import pytensor.tensor as tt
%matplotlib inline
import matplotlib.pyplot as plt
1422/5:
import numpy as np
import pymc as pm
import arviz as az
import pytensor.tensor as tt
%matplotlib inline
import matplotlib.pyplot as plt
1422/6: ?tt.erf
1422/7:
half_length = 3.66  # meters
penalty_point = 11  # meters
def Phi(x):
    """Calculates the standard normal cumulative distribution function."""
    return 0.5 + 0.5 * tt.erf(x / tt.sqrt(2.0))


ppss = []
sigmas_deg = [5, 20, 60]
sigmas_rad = np.deg2rad(sigmas_deg)
for sigma in sigmas_rad:
    with pm.Model() as model:
        σ = pm.HalfNormal("σ", sigma)
        α = pm.Normal("α", 0, σ)
        p_goal = pm.Deterministic("p_goal", 2 * Phi(tt.arctan(half_length / penalty_point) / σ) - 1)
        pps = pm.sample_prior_predictive(250)
        ppss.append(pps)
1422/8:
fig, axes = plt.subplots(1, 3, subplot_kw=dict(projection="polar"), figsize=(10, 4))

max_angle = np.arctan(half_length/penalty_point)

for sigma, pps, ax in zip(sigmas_deg, ppss, axes):
    cutoff = pps["p_goal"] > 0.1
    cax = ax.scatter(pps["α"][cutoff], np.ones_like(pps["α"][cutoff]), c=pps["p_goal"][cutoff],
               marker=".", cmap="viridis_r", vmin=0.1)
    ax.fill_between(np.linspace(-max_angle, max_angle, 100), 0, 1.01, alpha=0.25)
    ax.set_yticks([])
    ax.set_title(f"$\sigma = \mathcal{{HN}}({sigma})$")
    ax.plot(0,0, 'o')
fig.colorbar(cax, extend="min", ticks=[1, 0.5, 0.1], shrink=0.7, aspect=40)
1422/9:
fig, axes = plt.subplots(1, 3, subplot_kw=dict(projection="polar"), figsize=(10, 4))

max_angle = np.arctan(half_length/penalty_point)

for sigma, pps, ax in zip(sigmas_deg, ppss, axes):
    cutoff = ppss["p_goal"] > 0.1
    cax = ax.scatter(pps["α"][cutoff], np.ones_like(pps["α"][cutoff]), c=pps["p_goal"][cutoff],
               marker=".", cmap="viridis_r", vmin=0.1)
    ax.fill_between(np.linspace(-max_angle, max_angle, 100), 0, 1.01, alpha=0.25)
    ax.set_yticks([])
    ax.set_title(f"$\sigma = \mathcal{{HN}}({sigma})$")
    ax.plot(0,0, 'o')
fig.colorbar(cax, extend="min", ticks=[1, 0.5, 0.1], shrink=0.7, aspect=40)
1422/10: ppss
1422/11: zip(sigma_deg , ppss , axes)
1422/12: zip(sigmas_deg , ppss , axes)
1422/13: list(zip(sigmas_deg , ppss , axes))
1422/14:
for sigma , pps , ax in zip(sigmas_deg , ppss , axes):
    print(pss)
1422/15:
for sigma , pps , ax in zip(sigmas_deg , ppss , axes):
    print(pps)
1422/16:
for sigma , pps , ax in zip(sigmas_deg , ppss , axes):
    print(pps["p_goal"])
1422/17:
for sigma , pps , ax in zip(sigmas_deg , ppss , axes):
    print(pps.prior["p_goal"])
1422/18:
fig, axes = plt.subplots(1, 3, subplot_kw=dict(projection="polar"), figsize=(10, 4))

max_angle = np.arctan(half_length/penalty_point)

for sigma, pps, ax in zip(sigmas_deg, ppss, axes):
    cutoff = pps.prior["p_goal"] > 0.1
    cax = ax.scatter(pps["α"][cutoff], np.ones_like(pps["α"][cutoff]), c=pps["p_goal"][cutoff],
               marker=".", cmap="viridis_r", vmin=0.1)
    ax.fill_between(np.linspace(-max_angle, max_angle, 100), 0, 1.01, alpha=0.25)
    ax.set_yticks([])
    ax.set_title(f"$\sigma = \mathcal{{HN}}({sigma})$")
    ax.plot(0,0, 'o')
fig.colorbar(cax, extend="min", ticks=[1, 0.5, 0.1], shrink=0.7, aspect=40)
1422/19:
fig, axes = plt.subplots(1, 3, subplot_kw=dict(projection="polar"), figsize=(10, 4))

max_angle = np.arctan(half_length/penalty_point)

for sigma, pps, ax in zip(sigmas_deg, ppss, axes):
    pps = pps.prior
    cutoff = pps["p_goal"] > 0.1
    cax = ax.scatter(pps["α"][cutoff], np.ones_like(pps["α"][cutoff]), c=pps["p_goal"][cutoff],
               marker=".", cmap="viridis_r", vmin=0.1)
    ax.fill_between(np.linspace(-max_angle, max_angle, 100), 0, 1.01, alpha=0.25)
    ax.set_yticks([])
    ax.set_title(f"$\sigma = \mathcal{{HN}}({sigma})$")
    ax.plot(0,0, 'o')
fig.colorbar(cax, extend="min", ticks=[1, 0.5, 0.1], shrink=0.7, aspect=40)
1422/20:
fig, axes = plt.subplots(1, 3, subplot_kw=dict(projection="polar"), figsize=(10, 4))

max_angle = np.arctan(half_length/penalty_point)

for sigma, pps, ax in zip(sigmas_deg, ppss, axes):
    print(pps.prior)
1422/21:
fig, axes = plt.subplots(1, 3, subplot_kw=dict(projection="polar"), figsize=(10, 4))

max_angle = np.arctan(half_length/penalty_point)

for sigma, pps, ax in zip(sigmas_deg, ppss, axes):
    print(pps.prior[p_goal])
1422/22:
fig, axes = plt.subplots(1, 3, subplot_kw=dict(projection="polar"), figsize=(10, 4))

max_angle = np.arctan(half_length/penalty_point)

for sigma, pps, ax in zip(sigmas_deg, ppss, axes):
    print(pps.prior["p_goal"])
1422/23:
fig, axes = plt.subplots(1, 3, subplot_kw=dict(projection="polar"), figsize=(10, 4))

max_angle = np.arctan(half_length/penalty_point)

for sigma, pps, ax in zip(sigmas_deg, ppss, axes):
    print(pps.prior["p_goal"] > 0.1)
1422/24:
import numpy as np
import pymc as pm
import arviz as az
import pytensor.tensor as tt
%matplotlib inline
import matplotlib.pyplot as plt
1422/25:
%matplotlib inline
import arviz as az
import matplotlib.pyplot as plt
import numpy as np
import pymc as pm
import pytensor.tensor as pt
1423/1:
%matplotlib inline
import arviz as az
import matplotlib.pyplot as plt
import numpy as np
import pymc as pm
import pytensor.tensor as pt
1423/2:
RANDOM_SEED = 8927
rng = np.random.default_rng(RANDOM_SEED)
az.style.use("arviz-darkgrid")
1423/3:
with pm.Model() as model:
    mu = pm.Normal("mu" , mu = 0 , sigma = 1)
    obs = pm.Normal("obs" , mu = mu , sigma = 1 , observed = rng.standard_normal(100))
1423/4: model.basic_RVs
1423/5: model.free_RVs
1423/6: model.observed_RVs
1423/7: model
1423/8: ?model.compile_logp
1423/9: logp = model.compile_logp()
1423/10: logp = model.compile_logp()
1423/11: logp
1423/12: logp({"mu" : 0})
1423/13: logp.f
1423/14:
with pm.Model():
    x = pm.Normal("x" , mu = 0 , sigma = 1)
1423/15: pm.logp(x , 0.0)
1423/16: type(pm.logp(x , 0.0))
1423/17: pt.pp(x)
1423/18:
%matplotlib inline
import arviz as az
import matplotlib.pyplot as plt
import numpy as np
import pymc as pm
import pytensor.tensor as pt
import pytensor
1423/19: pytensor.pp(x)
1423/20: pytensor.pp(model)
1423/21: type(model)
1423/22: type(x)
1423/23:
def pp(x):
    if(isinstance(x , pytensor.tensor)):
        pytensor.pp(x)
    else:
        print(x)
1423/24: isinstance(x , pytensor.tensor)
1423/25: type(x)
1423/26: isinstance(x , pytensor.tensor.var.TensorVariable)
1423/27: pt.TensorVariable
1423/28: type(pt.TensorVariable)
1424/1: isinstance("123", str)
1424/2: type("123")
1423/29:
%matplotlib inline
import arviz as az
import matplotlib.pyplot as plt
import numpy as np
import pymc as pm
import pytensor.tensor as pt
from pytensor import pp
1423/30: pp(x)
1423/31:
def ppp(x):
    sx = pp(x)
    sx.split("()")
    print(sx)
1423/32: ppp(x)
1423/33:
def ppp(x):
    sx = pp(x)
    sx.split("(")
    return sx
1423/34: ppp(x)
1423/35:
def ppp(x):
    sx = pp(x).split('()')
    return sx
1423/36: ppp(x)
1423/37:
def ppp(x):
    sx = pp(x).split('(')
    return sx
1423/38: ppp(x)
1423/39: pp(x)
1423/40: pp(x)[0]
1423/41: len(pp(x))
1423/42:
def ppp(x):
    s = pp(x)
    nc = 0
    nr = 0
    res = ""
    for i in range(len(s)):
        c = s[i]
        res += c
        if(c == '{'):
            nc += 1
        if(c == "}"):
            nc -= 1
        if(nc == 0):
            if(c == '('):
                nr += 1
                res += '\n' + nc * ' '
            if(c == ')'):
                nr -= 1
    return res
1423/43: ppp(x)
1423/44:
def ppp(x):
    s = pp(x)
    nc = 0
    nr = 0
    res = ""
    for i in range(len(s)):
        c = s[i]
        res += c
        if(c == '{'):
            nc += 1
        if(c == "}"):
            nc -= 1
        if(nc == 0):
            if(c == '('):
                nr += 1
                res += '\n' + nc * ' '
            if(c == ')'):
                nr -= 1
    return res
1423/45: ppp(x)
1423/46:
def ppp(x):
    s = pp(x)
    nc = 0
    nr = 0
    res = ""
    for i in range(len(s)):
        c = s[i]
        print(c)
        res += c
        if(c == '{'):
            nc += 1
        if(c == "}"):
            nc -= 1
        if(nc == 0):
            if(c == '('):
                nr += 1
                res += '\n' + nc * ' '
            if(c == ')'):
                nr -= 1
    return res
1423/47: ppp(x)
1423/48:
def ppp(x):
    s = pp(x)
    nc = 0
    nr = 0
    res = ""
    for i in range(len(s)):
        c = s[i]
        res += c
        if(c == '{'):
            print(c)
            nc += 1
        if(c == "}"):
            nc -= 1
        if(nc == 0):
            if(c == '('):
                nr += 1
                res += '\n' + nc * ' '
            if(c == ')'):
                nr -= 1
    return res
1423/49: ppp(x)
1423/50:
def ppp(x):
    s = pp(x)
    nc = 0
    nr = 0
    res = ""
    for i in range(len(s)):
        c = s[i]
        res += c
        print(c)
        if(c == '{'):
            nc += 1
        if(c == "}"):
            nc -= 1
        if(nc == 0):
            print('nc == 0')
            if(c == '('):
                nr += 1
                res += '\n' + nc * ' '
            if(c == ')'):
                nr -= 1
    return res
1423/51: ppp(x)
1423/52:
def ppp(x):
    s = pp(x)
    nc = 0
    nr = 0
    res = ""
    for i in range(len(s)):
        c = s[i]
        res += c
        print(c)
        if(c == '{'):
            nc += 1
        if(c == "}"):
            nc -= 1
        if(nc == 0):
            print('nc == 0')
            if(c == '('):
                print("c == '()'")
                nr += 1
                res += '\n' + nc * ' '
            if(c == ')'):
                nr -= 1
    return res
1423/53: ppp(x)
1423/54:
def ppp(x):
    s = pp(x)
    nc = 0
    nr = 0
    res = ""
    for i in range(len(s)):
        c = s[i]
        res += c
        print(c)
        if(c == '{'):
            nc += 1
        if(c == "}"):
            nc -= 1
        if(nc == 0):
            print('     nc == 0')
            if(c == '('):
                print("     c == '()'")
                nr += 1
                res += '\n' + nc * ' '
            if(c == ')'):
                nr -= 1
    return res
1423/55: ppp(x)
1423/56:
def ppp(x):
    s = pp(x)
    nc = 0
    nr = 0
    res = ""
    for i in range(len(s)):
        c = s[i]
        res += c
        print(c)
        if(c == '{'):
            nc += 1
        if(c == "}"):
            nc -= 1
        if(nc == 0):
            print('     nc == 0')
            if(c == '('):
                print("     c == '('")
                nr += 1
                res += '\n' + nc * ' '
            if(c == ')'):
                nr -= 1
    return res
1423/57: print(ppp(x))
1423/58:
def ppp(x):
    s = pp(x)
    nc = 0
    nr = 0
    res = ""
    for i in range(len(s)):
        c = s[i]
        res += c
        #print(c)
        if(c == '{'):
            nc += 1
        if(c == "}"):
            nc -= 1
        if(nc == 0):
            #print('     nc == 0')
            if(c == '('):
                #print("     c == '('")
                nr += 1
                res += '\n' + nr * ' '
            if(c == ')'):
                nr -= 1
    return res
1423/59: print(ppp(x))
1423/60:
def ppp(x):
    s = pp(x)
    nc = 0
    na = 0
    nr = 0
    res = ""
    for i in range(len(s)):
        c = s[i]
        res += c
        #print(c)
        if(c == '{'):
            nc += 1
        if(c == "}"):
            nc -= 1
        if(c == '<'):
            na += 1
        if(c == ">"):
            na -= 1            
        if(nc == 0 and na == 0):
            #print('     nc == 0')
            if(c == '('):
                #print("     c == '('")
                nr += 1
                res += '\n' + nr * ' '
            if(c == ')'):
                nr -= 1
    return res
1423/61: print(ppp(x))
1423/62:
def ppp(x):
    s = pp(x)
    nc = 0
    na = 0
    nr = 0
    res = ""
    for i in range(len(s)):
        c = s[i]
        res += c
        #print(c)
        if(c == '{'):
            nc += 1
        if(c == "}"):
            nc -= 1
        if(c == '<'):
            na += 1
        if(c == ">"):
            na -= 1            
        if(nc == 0 and na == 0):
            if(c == '('):
                nr += 1
                res += '\n' + nr * '    '
            if(c == ')'):
                nr -= 1
    return res
1423/63: print(ppp(x))
1423/64: ppp(x)
1423/65:
def ppp(x):
    import sys
    s = pp(x)
    nc = 0
    na = 0
    nr = 0
    res = ""
    for i in range(len(s)):
        c = s[i]
        res += c
        #print(c)
        if(c == '{'):
            nc += 1
        if(c == "}"):
            nc -= 1
        if(c == '<'):
            na += 1
        if(c == ">"):
            na -= 1            
        if(nc == 0 and na == 0):
            if(c == '('):
                nr += 1
                res += '\n' + nr * '    '
            if(c == ')'):
                nr -= 1
    sys.stdout.write(res + "\n")
1423/66: ppp(x)
1425/1: type(logp)
1426/1: logp
1426/2:
def ppp(x):
    import sys
    s = pp(x)
    nc = 0
    na = 0
    nr = 0
    res = ""
    for i in range(len(s)):
        c = s[i]
        res += c
        #print(c)
        if(c == '{'):
            nc += 1
        if(c == "}"):
            nc -= 1
        if(c == '<'):
            na += 1
        if(c == ">"):
            na -= 1            
        if(nc == 0 and na == 0):
            if(c == '('):
                nr += 1
                res += '\n' + nr * '    '
            if(c == ')'):
                nr -= 1
    sys.stdout.write(res + "\n")
1426/3: logp
1426/4: logp = model.compile_logp()
1428/1:
%matplotlib inline
import arviz as az
import matplotlib.pyplot as plt
import numpy as np
import pymc as pm
import pytensor.tensor as pt
from pytensor import pp
1428/2:
def ppp(x):
    import sys
    s = pp(x)
    nc = 0
    na = 0
    nr = 0
    res = ""
    for i in range(len(s)):
        c = s[i]
        res += c
        #print(c)
        if(c == '{'):
            nc += 1
        if(c == "}"):
            nc -= 1
        if(c == '<'):
            na += 1
        if(c == ">"):
            na -= 1            
        if(nc == 0 and na == 0):
            if(c == '('):
                nr += 1
                res += '\n' + nr * '    '
            if(c == ')'):
                nr -= 1
    sys.stdout.write(res + "\n")
1428/3:
RANDOM_SEED = 8927
rng = np.random.default_rng(RANDOM_SEED)
az.style.use("arviz-darkgrid")
1428/4:
with pm.Model() as model:
    mu = pm.Normal("mu" , mu = 0 , sigma = 1)
    obs = pm.Normal("obs" , mu = mu , sigma = 1 , observed = rng.standard_normal(100))
1428/5: model.basic_RVs
1428/6: model.free_RVs
1428/7: model.observed_RVs
1428/8: model
1428/9: logp = model.compile_logp()
1428/10: logp({"mu" : 0})
1428/11:
with pm.Model():
    x = pm.Normal("x" , mu = 0 , sigma = 1)
1428/12: ppp(x)
1428/13: logp
1428/14: type(logp)
1428/15: pp(logp)
1428/16: observed = rng.standard_normal(100)
1428/17:
with pm.Model():
    obs = pm.Normal("x" , mu = 0 , sigma = 1 , observed=observed)
1428/18: ppp(obs)
1428/19:
with pm.Model() as model1:
    x = pm.Normal("x" , mu = 0 , sigma = 1)
    y = pm.Gamma("y" , alpha = 1 , beta = 1)
    plus_2 = x + 2
    summed = x + y
    squared = x**2
    sined = pm.math.sin(x)
1428/20: model1
1428/21:
with model1:
    new_plus_2 = pm.Deterministic("x plus 2" , x + 1)
1428/22: model
1428/23: model1
1428/24: pm.model_to_graphviz(model1)
1428/25: coords = {"cities" : ["Santiago" , "Mumbai" , "Tokyo"]}
1428/26:
with pm.Model(coords = coords) as model2:
    x = pm.Normal("x" , mu = 0 , sigma = 1 , dims = "cities")
1428/27: model2
1428/28: pm.model_to_graphviz(model2)
1428/29: x
1428/30: x[0]
1428/31: ppp(x)
1428/32: ppp(x[0])
1428/33: ppp(x[0])
1428/34: x[0]
1428/35: x[0].owner
1428/36:
with model2:
    y = x[0] * x[1]
1428/37:
with model2:
    y = x[0] * x[1]
1428/38:
with model2:
    y = x[0] * x[1]
1428/39: model2
1428/40: y
1428/41: y[1]
1428/42: ppp(y)
1428/43: x["Santiago"]
1428/44: x["cities"]
1428/45:
with model2:
    y = x[0] * x[1]
    z = x.dot(x.T)
1428/46: z
1428/47: ppp(z)
1428/48: ppp(z)
1428/49:
with pm.Model(coords = {"idx" : np.arrange(5)}) as model3:
    x = pm.Normal("x" , mu = 0 , sigma = 1 , obs = "idx")
1428/50:
with pm.Model(coords = {"idx" : np.arange(5)}) as model3:
    x = pm.Normal("x" , mu = 0 , sigma = 1 , obs = "idx")
1428/51:
with pm.Model(coords = {"idx" : np.arange(5)}) as model3:
    x = pm.Normal("x" , mu = 0 , sigma = 1 , dims = "idx")
1428/52:
with pm.Model(coords = {"idx" : np.arange(5)}) as model3:
    x = pm.Normal("x" , mu = 0 , sigma = 1 , dims = "idx")
1428/53: model.initial_point()
1428/54: model3.initial_point()
1428/55:
with pm.Model(coords = {"idx" : np.arange(5)}) as model4:
    x = pm.Normal("x" , mu = 0 , sigma = 1 , dims = "idx" , initval = rng.standard_normal(5))
1428/56: model4.initial_point()
1428/57: model4
1428/58: model4.x
1428/59: type(model4.x)
1429/1: %load_ext autoreload
1429/2: %autoreload 2
1429/3: import cv2
1429/4: cv2.aruco.DICT_6X6_100
1429/5: cv2.aruco.generateImageMarker
1429/6: ?cv2.aruco.drawMarker
1429/7: cv2.aruco.drawMarker(cv2.aruco.DICT_6X6_100 , 0 , 6 * 10)
1429/8: cv2.aruco.drawMarker(cv2.aruco.DICT_6X6_100 , 0 , 10)
1429/9: dictionary = cv2.aruco.Dictionary_get(cv2.aruco.DICT_6X6_100)
1429/10: cv2.aruco.drawMarker(dictionary , 0 , 10)
1429/11: cv2.aruco.drawMarker(dictionary , 0 , 60)
1429/12: import matplotlib.pyplot as plt
1429/13: import numpy as np
1429/14: m = cv2.aruco.drawMarker(dictionary , 0 , 60)
1429/15: ?plt.matshow
1429/16: plt.matshow(m)
1429/17: plt.show()
1429/18: m
1429/19: import arucocam
1429/20: mm = arucocam(30, 4, 16 * 10, 5, 9 * 10)
1429/21: mm = arucocam.getMarkers(30, 4, 16 * 10, 5, 9 * 10)
1429/22: ?np.zeros
1429/23: mm = arucocam.getMarkers(30, 4, 16 * 10, 5, 9 * 10)
1429/24: mm
1429/25: plt.matshow(mm)
1429/26: plt.show()
1429/27: mm = arucocam.getMarkers(30, 4, 16 * 10, 4, 9 * 10)
1429/28: plt.matshow(mm)
1429/29: plt.show()
1429/30: ?plt.imsave
1429/31: mm = arucocam.getMarkers("temp.png")
1429/32: mm
1429/33: mm = arucocam.getMarkers("temp.png")
1429/34: mm = arucocam.getMarkers("temp.png")
1429/35: mm = arucocam.getMarkers("temp.png")
1429/36: ?cv2.aruco.drawMarker
1429/37: mm = arucocam.getMarkers("temp.png")
1429/38: mm = arucocam.getMarkers("temp.png")
1429/39: mm = arucocam.getMarkers("temp.png")
1429/40: mm = arucocam.getMarkers("temp.png")
1429/41: mm = arucocam.getMarkers("temp.png")
1429/42: mm = arucocam.getMarkers("temp.png")
1429/43: np.ones((2 , 2 , 3) , dtype = np.uint8)
1429/44: arrnp.ones((2 , 2 , 3) , dtype = np.uint8)
1429/45: arr
1429/46: arr = np.ones((2 , 2 , 3) , dtype = np.uint8)
1429/47: arr
1429/48: arr[: , : , 0] = np.array([[1 , 0] , [1 , 1]])
1429/49: arr
1429/50: arr = np.ones((2, 2, 3), dtype=np.uint8)
1429/51: result, im = arucocam.getMarkers("temp.png")
1429/52: im.shaoe
1429/53: im[1:10, 1:10, 0]
1429/54: result[1:10 , 1:10]
1429/55: result[1:30 , 1:30]
1429/56: im[1:30, 1:30, 0]
1429/57: result[1:10, 1:10]
1429/58: result[1:30, 1:30]
1429/59: im[1:30, 1:30, 0]
1429/60: result[1:30, 1:30]
1429/61: im[1:30, 1:30, 0]
1429/62: result[1:30, 1:30]
1429/63: result[1:30, 1:30]
1429/64: result[1:30, 1:30]
1429/65: res, im = arucocam.getMarkers("temp.png")
1429/66: res[1 : 20 , 1 : 20]
1429/67: res[1:20, 1:20]
1430/1: %load_ext autoreload
1430/2: %autoreload 2
1430/3: import arucocam
1430/4: res, im = arucocam.getMarkers("temp.png")
1430/5: res
1430/6: res[1:20, 1:20]
1430/7: res, im = arucocam.getMarkers("temp.png")
1430/8: res, im = arucocam.getMarkers("temp.png")
1430/9: res, im = arucocam.getMarkers("temp.png")
1430/10: res, im = arucocam.getMarkers("temp.png")
1430/11: res, im = arucocam.getMarkers("temp.png")
1430/12: res, im = arucocam.getMarkers("temp.png")
1431/1: import cv2
1431/2: capture = cv2.VideoCapture(0)
1431/3: capture.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
1431/4: capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 1920)
1431/5: capture.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
1431/6: capture.set(cv2.CAP_PROP_FRAME_WIDTH, 1080)
1431/7: %load_ext autoreload
1431/8: %autoreload 2
1431/9: import arucocam
1432/1: %load_ext autoreload
1432/2: %autoreload 2
1432/3: import arucocam
1432/4: import cv2
1432/5: capture = cv2.VideoCapture(0)
1432/6: capture.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
1432/7: capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)
1432/8: c, i, r = arucocam.getMarkers(capture)
1432/9: c
1432/10: capture.release()
1432/11: cv2.namedWindow("arucocam")
1432/12: capture = cv2.VideoCapture(0)
1432/13: img = capture.read()
1432/14: import numpy as np
1432/15: img.shaoe
1432/16: img.shape
1432/17: img
1432/18: img[0]
1432/19: img[1]
1432/20: img[1].shape
1432/21: capture.release()
1432/22: capture = cv2.VideoCapture(0)
1432/23: capture.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
1432/24: capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
1432/25: img = capture.read()
1432/26: cv2.imshow("arucocam" , img)
1432/27: cv2.imshow("arucocam" , img[1])
1432/28: cv2.destroyAllWindows()
1432/29: %load_ext autoreload
1432/30: %autoreload 2
1432/31: import arucocam
1432/32: parameters = arucocam.initArucoCam()
1432/33: parameters = arucocam.initArucoCam()
1432/34: arucocam.finalizeArucoCam(parameters)
1432/35: capture.release()
1432/36: parameters = arucocam.initArucoCam()
1432/37: c, i, r = arucocam.getMarkers(parameters)
1432/38: c, i, r = arucocam.getMarkers(parameters)
1432/39: c, i, r = arucocam.getMarkers(parameters)
1432/40: c, i, r = arucocam.getMarkers(parameters)
1432/41: c, i, r = arucocam.getMarkers(parameters)
1432/42: c, i, r = arucocam.getMarkers(parameters)
1432/43: c, i, r = arucocam.getMarkers(parameters)
1432/44: c, i, r = arucocam.getMarkers(parameters)
1432/45: c, i, r = arucocam.getMarkers(parameters)
1432/46: ?cv2.aruco.detectMarkers
1432/47: arucocam.finalizeArucoCam(parameters)
1432/48: parameters = arucocam.initArucoCam()
1432/49: c, i, r = arucocam.getMarkers(parameters)
1432/50: ?cv2.aruco.DetectorParameters_create
1432/51: cv2.aruco.DetectorParameters_create()
1432/52: str(cv2.aruco.DetectorParameters_create())
1432/53: cv2.aruco.DetectorParameters_create().
1432/54: par = cv2.aruco.DetectorParameters_create()
1432/55: par.cornerRefinementMaxIterations
1432/56: c, i, r = arucocam.getMarkers(parameters)
1432/57: c, i, r = arucocam.getMarkers(parameters)
1432/58: c, i, r = arucocam.getMarkers(parameters)
1432/59: c, i, r = arucocam.getMarkers(parameters)
1432/60: c, i, r = arucocam.getMarkers(parameters)
1432/61: c, i, r = arucocam.getMarkers(parameters)
1432/62: c, i, r = arucocam.getMarkers(parameters)
1432/63: c, i, r = arucocam.getMarkers(parameters)
1432/64: ?cv2.drawContours
1432/65: c, i, r = arucocam.getMarkers(parameters)
1432/66: c, i, r = arucocam.getMarkers(parameters)
1432/67: parameters["capture"]
1432/68: parameters["capture"].read()
1432/69: ret , frmame = parameters["capture"].read()
1432/70: ret, frame = parameters["capture"].read()
1432/71: gray = cv2.cvtColor(frame , cv2.COLOR_BAYER_BG2GRAY)
1432/72: gray = cv2.cvtColor(frame , cv2.COLOR_BG2GRAY)
1432/73: gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
1432/74: gray
1432/75: gray.shape
1432/76: cv2.imshow(parameters["wname"], gray)
1432/77: ret, frame = parameters["capture"].read()
1432/78: gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
1432/79: cv2.imshow(parameters["wname"], gray)
1432/80: ret, frame = parameters["capture"].read()
1432/81: ret, frame = parameters["capture"].read()
1432/82: ret, frame = parameters["capture"].read()
1432/83: ret, frame = parameters["capture"].read()
1432/84: ret, frame = parameters["capture"].read()
1432/85: gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
1432/86: cv2.imshow(parameters["wname"], gray)
1432/87: ?cv2.aruco.DetectorParameters_create
1432/88: p = cv2.aruco.DetectorParameters_create()
1432/89: d = cv2.aruco.Dictionary_get(cv2.aruco.DICT_6X6_100)
1432/90: cir = cv2.aruco.detectMarkers(gray, dictionary)
1432/91: cir = cv2.aruco.detectMarkers(gray, d)
1432/92: cir
1432/93: arucocam.finalizeArucoCam(parameters)
1432/94: parameters = arucocam.initArucoCam()
1432/95: c, i, r = arucocam.getMarkers(parameters)
1432/96: c
1432/97: c.shape()
1432/98: c[0]
1432/99: c[1]
1432/100: len(c)
1432/101: len(c)
1432/102: len(i)
1432/103: c[0]
1432/104: c[0].mean()
1432/105: c[10]
1432/106: c[11]
1432/107: c[12]
1432/108: c[12].mean()
1432/109: i[13]
1432/110: c[12]
1432/111: i[12]
1432/112: i[12].mean(axis = 0)
1432/113: i[12].mean(axis = 1)
1432/114: c[12].mean(axis = 1)
1432/115: c[12]
1432/116: c[12 , 0]
1432/117: c[12].shape
1432/118: c[12][0].shape
1432/119: c[12][0].mean(axis=1)
1432/120: c[12][0].mean(axis=0)
1432/121: c[12][0]
1432/122: c[12][0].mean(axis=1)
1432/123: c[12][0].mean(axis=0)
1432/124: x , y = c[12][0].mean(axis=0)
1432/125: x
1432/126: y
1432/127: i[13]
1432/128: i[13][0]
1432/129: np.round(1.3)
1432/130: np.round(1.5)
1432/131: c, i, r = arucocam.getMarkers(parameters)
1432/132: ?cv2.putText
1432/133: ?cv2.putText
1432/134: c, i, r = arucocam.getMarkers(parameters)
1432/135:
for i in range(100):
    c, i, r = arucocam.getMarkers(parameters)
    print(i)
1432/136: arucocam.finalizeArucoCam(parameters)
1432/137: parameters = arucocam.initArucoCam()
1432/138:
for i in range(1):
    c, i, r = arucocam.getMarkers(parameters)
    print(i)
1432/139:
for ii in range(100):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1432/140: arucocam.finalizeArucoCam(parameters)
1432/141:
for ii in range(5):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1432/142: parameters = arucocam.initArucoCam()
1432/143:
for ii in range(5):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1432/144:
for ii in range(5):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1432/145:
for ii in range(5):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1432/146:
for ii in range(5):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1432/147:
for ii in range(500):
    c, i, r = arucocam.getMarkers(parameters)
    cv2.
    print(ii)
1432/148:
for ii in range(500):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1432/149:
for ii in range(500):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1432/150: arucocam.finalizeArucoCam(parameters)
1433/1: import numpy as np
1433/2: import cv2
1433/3: import arucocam
1433/4: parameters = arucocam.initArucoCam()
1433/5:
for ii in range(500):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1433/6: a = {"a": 1}
1433/7:
def update(a):
    a.update({"b": 2})
1433/8: update(a)
1433/9: a
1433/10:
for ii in range(500):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1433/11:
for ii in range(50):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1433/12: 12 % 10
1433/13: 12 % 10
1433/14:
for ii in range(500):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1433/15: %load_ext autoreload
1433/16: %autoreload 2
1433/17: import arucocam
1433/18:
for ii in range(500):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1433/19: arucocam.finalizeArucoCam(parameters)
1434/1: %load_ext autoreload
1434/2: %autoreload 2
1434/3: import numpy as np
1434/4: import cv2
1434/5: import arucocam
1434/6: parameters = arucocam.initArucoCam()
1434/7:
for ii in range(500):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1434/8:
for ii in range(500):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1434/9: arucocam.finalizeArucoCam(parameters)
1434/10: parameters = arucocam.initArucoCam()
1434/11:
for ii in range(500):
    c, i, r = arucocam.getMarkers(parameters)
    print(ii)
1434/12: parameters
1434/13: ?cv2.getPerspectiveTransform
1434/14:
for ii in range(500):
    c, i, r = arucocam.getMarkers(parameters)
    res = arucocam.warpPerspective(parameters)
    print(ii)
1435/1: %load_ext autoreload
1435/2: %autoreload 2
1435/3: import numpy as np
1435/4: import cv2
1435/5: import arucocam
1435/6: parameters = arucocam.initArucoCam()
1435/7:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/8:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/9: arucocam.finalizeArucoCam(parameters)
1435/10: parameters = arucocam.initArucoCam()
1435/11:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/12: arucocam.finalizeArucoCam(parameters)
1435/13: parameters = arucocam.initArucoCam()
1435/14:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/15: arucocam.finalizeArucoCam(parameters)
1435/16: parameters = arucocam.initArucoCam()
1435/17:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/18: arucocam.finalizeArucoCam(parameters)
1435/19: parameters = arucocam.initArucoCam()
1435/20:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/21: arucocam.finalizeArucoCam(parameters)
1435/22: parameters = arucocam.initArucoCam()
1435/23:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/24: arucocam.finalizeArucoCam(parameters)
1435/25: parameters = arucocam.initArucoCam()
1435/26:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/27: arucocam.finalizeArucoCam(parameters)
1435/28: parameters = arucocam.initArucoCam()
1435/29: parameters = arucocam.initArucoCam()
1435/30: arucocam.finalizeArucoCam(parameters)
1435/31: parameters = arucocam.initArucoCam()
1435/32:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/33: arucocam.finalizeArucoCam(parameters)
1435/34: parameters = arucocam.initArucoCam()
1435/35:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/36: arucocam.finalizeArucoCam(parameters)
1435/37: parameters = arucocam.initArucoCam()
1435/38:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/39: arucocam.finalizeArucoCam(parameters)
1435/40: parameters = arucocam.initArucoCam()
1435/41:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/42: arucocam.finalizeArucoCam(parameters)
1435/43: parameters = arucocam.initArucoCam()
1435/44:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/45: arucocam.finalizeArucoCam(parameters)
1435/46: parameters = arucocam.initArucoCam()
1435/47:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/48:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/49:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/50: arucocam.finalizeArucoCam(parameters)
1435/51: parameters = arucocam.initArucoCam()
1435/52:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/53: arucocam.finalizeArucoCam(parameters)
1435/54: parameters = arucocam.initArucoCam()
1435/55: arucocam.finalizeArucoCam(parameters)
1435/56: parameters = arucocam.initArucoCam()
1435/57:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/58: arucocam.finalizeArucoCam(parameters)
1435/59: parameters = arucocam.initArucoCam()
1435/60:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/61: arucocam.finalizeArucoCam(parameters)
1435/62: parameters = arucocam.initArucoCam()
1435/63: arucocam.finalizeArucoCam(parameters)
1435/64: parameters = arucocam.initArucoCam()
1435/65:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/66:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/67: np.astype
1435/68: np.arrange(5)
1435/69: np.arange(5)
1435/70: np.arange(5).astype(np.float32)
1435/71: arucocam.finalizeArucoCam(parameters)
1435/72: parameters = arucocam.initArucoCam()
1435/73:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/74: arucocam.finalizeArucoCam(parameters)
1435/75: parameters = arucocam.initArucoCam()
1435/76:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/77: ?np.copy
1435/78: arucocam.finalizeArucoCam(parameters)
1435/79: parameters = arucocam.initArucoCam()
1435/80:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/81:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/82:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/83: arucocam.finalizeArucoCam(parameters)
1435/84: parameters = arucocam.initArucoCam()
1435/85:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/86: arucocam.finalizeArucoCam(parameters)
1435/87: parameters = arucocam.initArucoCam()
1435/88:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/89: arucocam.finalizeArucoCam(parameters)
1435/90: parameters = arucocam.initArucoCam()
1435/91:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/92:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/93: arucocam.finalizeArucoCam(parameters)
1435/94: parameters = arucocam.initArucoCam()
1435/95:
for ii in range(100):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1435/96: arucocam.finalizeArucoCam(parameters)
1437/1:
%matplotlib inline
import arviz as az
import matplotlib.pyplot as plt
import numpy as np
import pymc as pm
import pytensor.tensor as pt
from pytensor import pp
1437/2:
RANDOM_SEED = 8927
rng = np.random.default_rng(RANDOM_SEED)
az.style("arviz-darkgrid")
1437/3:
RANDOM_SEED = 8927
rng = np.random.default_rng(RANDOM_SEED)
az.style.use("arviz-darkgrid")
1437/4: alpha , sigma = 1.0 , 1.0
1437/5:
alpha , sigma = 1.0 , 1.0
beta = [1.0 , 2.5]
size = 100
1437/6:
alpha , sigma = 1.0 , 1.0
beta = [1.0 , 2.5]
size = 100
1437/7:
x1 = np.random.randn(size)
x2 = np.random.randn(size) * 0.2
y = alpha + beta[0] * x1 + beta[1] * x2 + rng.normal(size = size) * sigma
1437/8:
fig, axes = plt.subplots(1, 2, sharex=True, figsize=(10, 4))
axes[0].scatter(x1, y, alpha=0.6)
axes[1].scatter(x2, y, alpha=0.6)
axes[0].set_ylabel("Y")
axes[0].set_xlabel("X1")
axes[1].set_xlabel("X2");
1437/9:
basic_model = pm.Model()

with basic_model:
    # Priors for unknown model parameters
    alpha = pm.Normal("alpha", mu=0, sigma=10)
    beta = pm.Normal("beta", mu=0, sigma=10, shape=2)
    sigma = pm.HalfNormal("sigma", sigma=1)

    # Expected value of outcome
    mu = alpha + beta[0] * X1 + beta[1] * X2

    # Likelihood (sampling distribution) of observations
    Y_obs = pm.Normal("Y_obs", mu=mu, sigma=sigma, observed=y)
    
    # sample
    idata = pm.sample()
1437/10:
basic_model = pm.Model()

with basic_model:
    # Priors for unknown model parameters
    alpha = pm.Normal("alpha", mu=0, sigma=10)
    beta = pm.Normal("beta", mu=0, sigma=10, shape=2)
    sigma = pm.HalfNormal("sigma", sigma=1)

    # Expected value of outcome
    mu = alpha + beta[0] * x1 + beta[1] * x2

    # Likelihood (sampling distribution) of observations
    Y_obs = pm.Normal("Y_obs", mu=mu, sigma=sigma, observed=y)
    
    # sample
    idata = pm.sample()
1437/11: idata
1437/12: test_scores = pd.read_csv(pm.get_data("test_scores.csv"), index_col=0)
1437/13: import pandas as pd
1437/14: test_scores = pd.read_csv(pm.get_data("test_scores.csv"), index_col=0)
1437/15: test_scores
1437/16: test_scores.head()
1437/17: test_scores[:100]
1437/18: test_scores["score"]
1437/19: type(test_scores["score"])
1437/20: test_scores["score"].hist()
1437/21: X = test_scores.dropna().astype(float)
1437/22: X
1437/23: y = X.pop("score")
1437/24: X.head()
1437/25: y.head()
1437/26: type(y)
1437/27: type(X)
1437/28:
X -= X.mean()
X /= X.std()
N , D = X.shape
1437/29: N
1437/30: D
1438/1: import numpy as np
1438/2: import cv2
1438/3: import arucocam
1438/4: parameters = arucocam.initArucoCam()
1438/5:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1438/6: arucocam.finalizeArucoCam(parameters)
1438/7: parameters = arucocam.initArucoCam()
1438/8:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1438/9:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1439/1: %load_ext autoreload
1439/2: %autoreload 2
1439/3: import cv2
1439/4: import numpy as np
1439/5: import arucocam
1439/6: parameters = arucocam.initArucoCam()
1439/7:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1439/8:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1439/9:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1439/10:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1439/11:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1440/1: import re
1440/2: re.search(r"^.*(aaa[q1])/\.MasterIntegrals.*$" , "as sad a aaa[q1]/.MasterInteegrals lakmlaskmd alkd m")
1440/3: s = re.search(r"^.*(aaa[q1])/\.MasterIntegrals.*$" , "as sad a aaa[q1]/.MasterInteegrals lakmlaskmd alkd m")
1440/4: s
1440/5: str(s)
1440/6: s = re.search(r"^.*(aaa).*$", "klkm lkm lkm lkm aaa lkm lkm l")
1440/7: s
1440/8: s.group(0)
1440/9: s.group(1)
1440/10: s.group(2)
1440/11: s
1440/12: s.group(0)
1440/13: s = re.search(r"^.*(aaa)/\..*$", "klkm lkm lkm lkm aaa/. lkm lkm l")
1440/14: s
1440/15: s.group(1)
1440/16: s = re.search(r"^.*(aaa)/\..MasterIntegrals*$", "klkm lkm lkm lkm aaa/.MasterIntegrals lkm lkm l")
1440/17: s
1440/18: s = re.search(r"^.*(aaa)/\..*$", "klkm lkm lkm lkm aaa/. lkm lkm l")
1440/19: s
1440/20: s.group(1)
1440/21: s = re.search(r"^.*(aaa)/\.111.*$", "klkm lkm lkm lkm aaa/.111 lkm lkm l")
1440/22: s.group(1)
1440/23: s = re.search(r"^.*(aaa\[..\])/\.111.*$", "klkm lkm lkm lkm aaa[q1]/.111 lkm lkm l")
1440/24: s.group(1)
1441/1: import re
1441/2:
with open("./simple", "r") as f:
    lines = f.readlines()
1441/3: lines
1441/4: lines[0]
1441/5: pattern1 = r"^.*(" + args.nme + r"\[..\])/\.Master.*$"
1441/6: nme = "twopointfunction6"
1441/7: pattern1 = r"^.*(" + nme + r"\[..\])/\.Master.*$"
1441/8: re.search(pattern1, lines[0])
1441/9: c1 = re.search(pattern1, lines[0])
1441/10: c1.group(0)
1441/11: c1.group(1)
1444/1:
%matplotlib inline
import arviz as az
import matplotlib.pyplot as plt
import numpy as np
import pymc as pm
import pytensor.tensor as pt
from pytensor import pp
1444/2:
RANDOM_SEED = 8927
rng = np.random.default_rng(RANDOM_SEED)
az.style.use("arviz-darkgrid")
1444/3:
alpha , sigma = 1.0 , 1.0
beta = [1.0 , 2.5]
size = 100
1444/4:
x1 = np.random.randn(size)
x2 = np.random.randn(size) * 0.2
y = alpha + beta[0] * x1 + beta[1] * x2 + rng.normal(size = size) * sigma
1444/5:
fig, axes = plt.subplots(1, 2, sharex=True, figsize=(10, 4))
axes[0].scatter(x1, y, alpha=0.6)
axes[1].scatter(x2, y, alpha=0.6)
axes[0].set_ylabel("Y")
axes[0].set_xlabel("X1")
axes[1].set_xlabel("X2");
1444/6:
basic_model = pm.Model()

with basic_model:
    # Priors for unknown model parameters
    alpha = pm.Normal("alpha", mu=0, sigma=10)
    beta = pm.Normal("beta", mu=0, sigma=10, shape=2)
    sigma = pm.HalfNormal("sigma", sigma=1)

    # Expected value of outcome
    mu = alpha + beta[0] * x1 + beta[1] * x2

    # Likelihood (sampling distribution) of observations
    Y_obs = pm.Normal("Y_obs", mu=mu, sigma=sigma, observed=y)
    
    # sample
    idata = pm.sample()
1444/7: idata
1444/8: test_scores = pd.read_csv(pm.get_data("test_scores.csv"), index_col=0)
1444/9: x.columns
1444/10: X.columns
1444/11: test_scores = pd.read_csv(pm.get_data("test_scores.csv"), index_col=0)
1444/12:
%matplotlib inline
import arviz as az
import matplotlib.pyplot as plt
import numpy as np
import pymc as pm
import pytensor.tensor as pt
from pytensor import pp
1444/13: import pandas as pd
1444/14: test_scores = pd.read_csv(pm.get_data("test_scores.csv"), index_col=0)
1444/15: test_scores[:100]
1444/16: test_scores["score"].hist()
1444/17: y = X.pop("score")
1444/18: X.head()
1444/19: type(y)
1444/20: type(X)
1444/21:
X -= X.mean()
X /= X.std()
N , D = X.shape
1444/22: X.columns
1444/23: X
1444/24: import pandas as pd
1444/25: test_scores[:100]
1444/26: X = test_scores.dropna().astype(float)
1444/27: X = test_scores.dropna().astype(float)
1444/28: test_scores = pd.read_csv(pm.get_data("test_scores.csv"), index_col=0)
1444/29: test_scores[:100]
1444/30: test_scores["score"].hist()
1444/31: X = test_scores.dropna().astype(float)
1444/32: X
1444/33: X.columns
1444/34: X.columns.values
1445/1: import arucocam
1446/1: import cv2
1446/2:
for i in range(2):
    print(i)
1446/3: exi
1447/1: eit
1447/2: import camluc
1447/3: camluc.makeMarkers({} , "./temp.png")
1448/1: %load_ext autoreload
1448/2: %autoreload 2
1448/3: import camluc
1448/4: camluc.makeMarkers({}, "./temp.png")
1448/5: ls
1449/1: %load_ext autoreload
1449/2: %autoreload 2
1449/3: import camluc
1449/4: camluc.makeMarkers({}, "./temp.png")
1449/5: camluc.makeMarkers({}, "./temp.png")
1449/6: camluc.makeMarkers({}, "./temp.png")
1449/7: camluc.makeMarkers({}, "./temp.png")
1449/8: camluc.makeMarkers({}, "./temp.png")
1449/9: eog temp.png
1450/1: %load_ext autoreload
1450/2: %autoreload 2
1450/3: import arucocam
1450/4: parameters = arucocam.initArucoCam()
1450/5: arucocam.makeMarkers(parameters, "temp.png", steps=2)
1450/6: arucocam.makeMarkers(parameters, "temp.png", steps=2)
1450/7: arucocam.makeMarkers(parameters, "temp.png", steps=2 , rowsep = 16 * 120 , colsep = 9 * 120)
1450/8:
for ii in range(500):
    arucocam.getMarkers(parameters)
    # arucocam.warpPerspective(parameters)
    print(ii)
1450/9:
for ii in range(500):
    arucocam.getMarkers(parameters)
    # arucocam.warpPerspective(parameters)
    print(ii)
1450/10:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1450/11: arucocam.finalizeArucoCam(parameters)
1450/12: parameters = arucocam.initArucoCam(steps=2)
1450/13:
for ii in range(500):
    arucocam.getMarkers(parameters)
    arucocam.warpPerspective(parameters)
    print(ii)
1450/14: ls
1450/15: arucocam.finalizeArucoCam(parameters)
1451/1: from manim import *
1451/2: WHITE
1452/1: from manim import *
1452/2: ?Tex.set_default
1453/1: from manim import *
1453/2: UP
1454/1: from manim import *
1454/2: ?MathTex.set_default
1456/1: import numpy as np
1456/2: from scipy.stats import cauchy
1456/3: x = cauchy.rvs(size=10)
1456/4: x
1456/5: np.pi
1456/6:
def likelyhood(o, x0, gamma):
    return 1.0 / (np.pi * ((x - x0) ** 2 + gamma**2))
1456/7: likelyhood(x, 0.0, 2.0)
1456/8: np.product([1 , 2 , 3 , 4])
1456/9:
def likelyhood(o, x0, gamma):
    return np.product(1.0 / (np.pi * ((x - x0) ** 2 + gamma**2)))
1456/10: o = cauchy.rvs(loc = 0.0 , scale = 2 , size=10)
1456/11: o
1456/12: likelyhood(o, 0.0, 2.0)
1456/13: likelyhood(o, 0.0, 1.0)
1456/14: likelyhood(o, 0.0, 10.0)
1456/15: likelyhood(o, 0.0, 30.0)
1456/16: likelyhood(o, 0.0, 50.0)
1456/17: from cauchymc import likelyhood
1456/18: likelyhood(o, 0.0, 50.0)
1458/1: %load_ext autoreload
1458/2: %autoreload 2
1458/3: import numpy as np
1458/4: from scipy.stats import cauchy
1458/5: from cauchymc import likelyhood
1458/6: observed = cauchy.rvs(size=10)
1458/7: likelyhood(observed, 0.0, 50.0)
1458/8: observed = cauchy.rvs(size=10 , loc = 0.0 , scale = 2.0)
1458/9: likelyhood(observed, 0.0, 50.0)
1458/10: likelyhood(observed, 0.0, 2.0)
1458/11: likelyhood(observed, 0.0, 1.0)
1458/12: likelyhood(observed, 0.0, 3.0)
1458/13: ?np.heaviside
1458/14: from scipy.stats import uniform
1458/15: ?uniform.rvs
1458/16: ?uniform.rvs
1458/17: ?uniform.rvs
1458/18: uniform.rvs(loc=-1.0, scale=2.0)
1458/19: uniform.rvs(loc=-1.0, scale=2.0)
1458/20: uniform.rvs(loc=-1.0, scale=2.0)
1458/21: uniform.rvs(loc=-1.0, scale=2.0)
1458/22: uniform.rvs(loc=-1.0, scale=2.0)
1458/23: uniform.rvs(loc=-1.0, scale=2.0)
1458/24: uniform.rvs(loc=-1.0, scale=2.0)
1458/25: uniform.rvs(loc=-1.0, scale=2.0)
1458/26: np.min(1.0 , 2.0)
1458/27: ?np.min
1458/28: min(1.0 , 2.0)
1458/29: from scipy.stats import bernoulli
1458/30: ?bernoulli
1458/31: bernoulli.rvs(0.5)
1458/32: bernoulli.rvs(0.5)
1458/33: bernoulli.rvs(0.5)
1458/34: bernoulli.rvs(0.5)
1458/35: bernoulli.rvs(0.5)
1458/36: bernoulli.rvs(0.5)
1458/37: bernoulli.rvs(0.5)
1458/38: bernoulli.rvs(0.5)
1458/39: bernoulli.rvs(0.5)
1458/40: bernoulli.rvs(0.5)
1458/41: bernoulli.rvs(0.5)
1458/42: bernoulli.rvs(0.5)
1458/43: bernoulli.rvs(0.5)
1458/44: bernoulli.rvs(0.5)
1458/45: bernoulli.rvs(0.5)
1458/46: bernoulli.rvs(0.5)
1458/47: bernoulli.rvs(0.5)
1458/48: bernoulli.rvs(0.5)
1458/49: bernoulli.rvs(0.5)
1458/50: bernoulli.rvs(0.5)
1458/51: bernoulli.rvs(0.5)
1458/52: bernoulli.rvs(0.5)
1458/53: bernoulli.rvs(0.5)
1458/54: bernoulli.rvs(0.5)
1458/55: bernoulli.rvs(0.5)
1458/56: bernoulli.rvs(0.5)
1458/57: bernoulli.rvs(0.5)
1458/58: bernoulli.rvs(0.5 , size = 1000)
1458/59: np.total(bernoulli.rvs(0.5, size=1000))
1458/60: np.sum
1458/61: np.sum(bernoulli.rvs(0.5, size=1000))
1458/62: np.sum(bernoulli.rvs(0.5, size=1000))
1458/63: np.sum(bernoulli.rvs(0.5, size=1000))
1458/64: np.sum(bernoulli.rvs(0.5, size=1000))
1458/65: np.sum(bernoulli.rvs(0.5, size=1000))
1458/66: np.sum(bernoulli.rvs(0.5, size=1000))
1458/67: x0, gamma = 0.0, 2.0
1458/68: observed = cauchy.rvs(size=10 , loc = x0 , scale = gamma)
1458/69: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1458/70: x0, gamma = 1.0, 3.0
1458/71:
for ii in range(100):
    x0, gamma = mh(x0, gamma, observed, 0.01, 0.01, -10.0, 10.0, 0.0, 10.0)
    print(x0, gamma)
1458/72: from cauchymc import likelyhood, prior, mh
1458/73:
for ii in range(100):
    x0, gamma = mh(x0, gamma, observed, 0.01, 0.01, -10.0, 10.0, 0.0, 10.0)
    print(x0, gamma)
1458/74: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1458/75: x0, gamma = 1.0, 3.0
1458/76:
for ii in range(100):
    x0, gamma = mh(x0, gamma, observed, 0.01, 0.01, -10.0, 10.0, 0.0, 10.0)
    print(x0, gamma)
1458/77: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1458/78: x0, gamma = 1.0, 3.0
1458/79:
for ii in range(100):
    x0, gamma = mh(x0, gamma, observed, 0.01, 0.01, -10.0, 10.0, 0.0, 10.0)
    print(x0, gamma)
1458/80: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1458/81: x0, gamma = 1.0, 3.0
1458/82:
for ii in range(100):
    x0, gamma = mh(x0, gamma, observed, 0.01, 0.01, -10.0, 10.0, 0.0, 10.0)
    print(x0, gamma)
1458/83: from cauchymc import likelyhood, prior, mh, funmh
1458/84: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1458/85: x0, gamma = 1.0, 3.0
1458/86:
x0trace, gammatrace = funmh(
    10000, x0, gamma, observed, 0.01, 0.01, -10.0, 10.0, 0.0, 10.0
)
1458/87:
x0trace, gammatrace = funmh(
    10000, x0, gamma, observed, 0.01, 0.01, -10.0, 10.0, 0.0, 10.0
)
1458/88: x0trace
1458/89: x0trace[5000:]
1458/90: np.mean(x0trace[5000:])
1458/91: np.mean(gammatrace[5000:])
1458/92: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1458/93: x0, gamma = 1.0, 3.0
1458/94:
x0trace, gammatrace = funmh(
    100000, x0, gamma, observed, 0.01, 0.01, -10.0, 10.0, 0.0, 10.0
)
1458/95: np.mean(x0trace[10000:])
1458/96: np.mean(gammatrace[10000:])
1459/1: import numpy as np
1459/2: import matplotlib.pyplot as plt
1459/3: from cauchymc import *
1460/1: %load_ext autoreload
1460/2: %autoreload 2
1460/3: import numpy as np
1460/4: import matplotlib.pyplot as plt
1460/5: from cauchymc import *
1460/6: from scipy.stats import bernoulli
1460/7: bernoulli.rvs(1.0 , size = 1000)
1460/8: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1460/9: tracex0, tracefamma = funmh(10000, 0.5, 1.0, observed)
1460/10: tracex0, tracefamma = funmh(10000, 0.5, 1.0, observed)
1460/11: tracex0, tracefamma = funmh(10000, 0.5, 1.0, observed)
1460/12: plt.plot(tracex0)
1460/13: plt.show()
1460/14: tracex0, tracefamma = funmh(100000, 0.5, 1.0, observed)
1460/15: plt.plot(tracex0)
1460/16: plt.show()
1460/17: tracex0, tracefamma = funmh(1000000, 0.5, 1.0, observed)
1460/18: plt.plot(tracex0)
1460/19: plt.show()
1460/20: plt.plot(tracegamma)
1460/21: plt.plot(tracefamma)
1460/22: plt.show()
1460/23: from scipy.stats import cauchy
1460/24: ?cauchy.pdf
1460/25: cauchy.pdf(np.array([1.0 , 2.0 , 3.0]) , loc = 0.0 , scale = 2.0)
1460/26: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1460/27: tracex0, tracefamma = funmh(10000, 0.5, 1.0, observed)
1460/28: plt.plot(tracex0)
1460/29: plt.show()
1460/30: tracex0, tracefamma = funmh(10000, 0.5, 1.0, observed)
1460/31: plt.plot(tracex0)
1460/32: plt.show()
1460/33: observed = cauchy.rvs(size=20, loc=0.0, scale=2.0)
1460/34: tracex0, tracegamma = funmh(10000, 0.5, 1.0, observed)
1460/35: plt.plot(tracex0)
1460/36: plt.show()
1460/37: plt.plot(tracegamma)
1460/38: plt.show()
1460/39: tracex0, tracegamma = funmh(100000, 0.5, 1.0, observed)
1460/40: plt.plot(tracex0)
1460/41: plt.show()
1460/42: plt.plot(tracegamma)
1460/43: plt.show()
1460/44: plt.hist(tracex0[10000:], density=True)
1460/45: plt.show()
1460/46: plt.hist(tracegamma[10000:], density=True)
1460/47: plt.show()
1460/48: tracex0, tracegamma = funmh(1000000, 0.5, 1.0, observed)
1460/49: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1460/50: observed = cauchy.rvs(size=32, loc=0.0, scale=2.0)
1460/51: tracex0, tracegamma = funmh(1000000, 0.5, 1.0, observed)
1460/52: tracex0, tracegamma = funmh(100000, 0.5, 1.0, observed)
1460/53: cauchy.pdf(np.array([1.0, 2.0, 3.0]), loc=0.0, scale=2.0)
1460/54: np.log(cauchy.pdf(np.array([1.0, 2.0, 3.0]), loc=0.0, scale=2.0))
1460/55: cauchy.logpdf(np.array([1.0, 2.0, 3.0]), loc=0.0, scale=2.0)
1460/56: np.log(0.001)
1460/57: np.log(0.0001)
1460/58: np.log(0.000001)
1460/59: tracex0, tracegamma = funmh(10000, 0.5, 1.0, observed)
1460/60: plt.plot(tracex0)
1460/61: plt.show()
1460/62: tracex0, tracegamma = funmh(100000, 0.5, 1.0, observed)
1460/63: plt.plot(tracex0)
1460/64: plt.show()
1460/65: np.exp(np.log(0.2))
1460/66: observed = cauchy.rvs(size=12, loc=0.0, scale=2.0)
1460/67: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1460/68: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/69: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/70: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/71: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/72: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/73: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/74: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/75: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/76: observed
1460/77: observed = cauchy.rvs(size=32, loc=0.0, scale=2.0)
1460/78: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/79: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/80: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/81: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/82: observed = cauchy.rvs(size=32, loc=0.0, scale=2.0)
1460/83: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/84: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/85: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/86: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/87: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1460/88: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/89: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/90: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/91: np.log(0)
1460/92: np.log(0.1)
1460/93: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/94: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/95: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/96: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/97: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/98: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/99: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/100: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/101: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1460/102: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/103: zeros = np.zeros(observed.shape , observed.dtype)
1460/104: plt.scatter(observed , zeros)
1460/105: plt.show()
1460/106: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/107: tracex0, tracegamma = funmh(5, 0.5, 1.0, observed)
1460/108: plt.show()
1460/109: tracex0, tracegamma = funmh(1000000, 0.5, 1.0, observed)
1460/110: tracex0, tracegamma = funmh(100, 0.5, 1.0, observed)
1460/111: tracex0, tracegamma = funmh(1000, 0.5, 1.0, observed)
1460/112: tracex0, tracegamma = funmh(10000, 0.5, 1.0, observed)
1460/113: tracex0, tracegamma = funmh(1000000, 0.5, 1.0, observed)
1460/114: plt.plot(tracex0)
1460/115: plt.show()
1460/116: plt.plot(tracegamma)
1460/117: plt.show()
1460/118: len(tracex0)
1460/119: plt.hist(tracex0[100000:])
1460/120: plt.show()
1460/121: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1460/122: from scipy.stats import uniform
1460/123: uniform.rvs(loc=-1.0, scale=2.0)
1460/124: uniform.rvs(size = 1000 , loc=-1.0, scale=2.0)
1460/125: np.mean(uniform.rvs(size=1000, loc=-1.0, scale=2.0))
1460/126: np.mean(uniform.rvs(size=1000, loc=-1.0, scale=2.0))
1460/127: np.mean(uniform.rvs(size=10000, loc=-1.0, scale=2.0))
1460/128: np.mean(uniform.rvs(size=100000, loc=-1.0, scale=2.0))
1460/129: plt.hist(uniform.rvs(size=100000, loc=-1.0, scale=2.0))
1460/130: plt.show()
1460/131: plt.show()
1460/132: plt.hist(uniform.rvs(size=100000, loc=-1.0, scale=2.0))
1460/133: plt.show()
1460/134: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1460/135: observed
1460/136: observed.sort()
1460/137: observed
1460/138: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1460/139: np.sort(observed)
1460/140: observed
1460/141: tracex0, tracegamma = funmh(1000, 0.5, 1.0, observed)
1460/142: tracex0, tracegamma = funmh(1000, 0.5, 1.0, observed)
1460/143: tracex0, tracegamma = funmh(1000, 0.5, 1.0, observed)
1460/144: tracex0, tracegamma = funmh(10000, 0.5, 1.0, observed)
1460/145: tracex0, tracegamma = funmh(10000, 0.5, 1.0, observed)
1460/146: tracex0, tracegamma = funmh(100000, 0.5, 1.0, observed)
1460/147: plt.plot(tracex0)
1460/148: plt.show()
1460/149: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1460/150: tracex0, tracegamma = funmh(1000000, 0.5, 1.0, observed)
1460/151: plt.plot(tracex0)
1460/152: plt.show()
1460/153: plt.hist(tracex0[50000:])
1460/154: plt.show()
1460/155: plt.plot(tracegamma)
1460/156: plt.show()
1460/157: np.random
1460/158: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1460/159: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1460/160: tracex0, tracegamma = funmh(1000, 0.5, 1.0, observed)
1460/161: plt.plot(tracex0)
1460/162: plt.show()
1460/163: tracex0, tracegamma = funmh(10000, 0.5, 1.0, observed)
1460/164: plt.plot(tracex0)
1460/165: tracex0, tracegamma = funmh(10000, 0.5, 1.0, observed)
1460/166: plt.plot(tracex0)
1460/167: plt.show()
1460/168: tracex0, tracegamma = funmh(100000, 0.5, 1.0, observed)
1460/169: plt.plot(tracex0)
1460/170: plt.show()
1460/171: plt.plot(tracegamma)
1460/172: plt.show()
1460/173: observed = cauchy.rvs(size=32, loc=0.0, scale=2.0)
1460/174: tracex0, tracegamma = funmh(10000, 0.5, 1.0, observed)
1460/175: plt.plot(tracegamma)
1460/176: plt.show()
1460/177: tracex0, tracegamma = funmh(10000, 0.5, 1.0, observed)
1460/178: plt.plot(tracegamma)
1460/179: plt.show()
1460/180: tracex0, tracegamma = funmh(100000, 0.5, 1.0, observed)
1460/181: plt.show(tracegamma)
1460/182: plt.plot(tracegamma)
1460/183: plt.show()
1460/184: plt.plot(tracex0)
1460/185: plt.show()
1460/186: import pymc as pm
1460/187: pm.Uniform
1460/188: ?pm.Uniform
1460/189:
with pm.Model() as model:
    x0 = pm.Uniform("x0", lower=-10.0, upper=10.0)
1460/190:
with pm.Model() as model:
    x0 = pm.Uniform("x0", lower=-10.0, upper=10.0)
    gamma = pm.Uniform("gamma", lower=0.0, upper=10)
1460/191:
with pm.Model() as model:
    x0 = pm.Uniform("x0", lower=-10.0, upper=10.0)
    gamma = pm.Uniform("gamma", lower=0.0, upper=10)
    x = pm.Cauchy("x", alpha=x0, beta=gamma, observed=observed)
    idata = pm.sample()
1460/192: idata
1460/193: idata.posterior["x0"]
1460/194: az.plot_trace(idata)
1460/195: import arviz as az
1460/196: az.plot_trace(idata)
1460/197: plt.show()
1460/198: observed = cauchy.rvs(size=10, loc=0.0, scale=2.0)
1460/199:
with pm.Model() as model:
    x0 = pm.Uniform("x0", lower=-10.0, upper=10.0)
    gamma = pm.Uniform("gamma", lower=0.0, upper=10)
    x = pm.Cauchy("x", alpha=x0, beta=gamma, observed=observed)
    idata = pm.sample()
az.plot_trace(idata)
1460/200: plt.show()
1460/201: observed = cauchy.rvs(size=128, loc=0.0, scale=2.0)
1460/202:
with pm.Model() as model:
    x0 = pm.Uniform("x0", lower=-10.0, upper=10.0)
    gamma = pm.Uniform("gamma", lower=0.0, upper=10)
    x = pm.Cauchy("x", alpha=x0, beta=gamma, observed=observed)
    idata = pm.sample()
az.plot_trace(idata)
1460/203: plt.show()
1460/204: exi
1461/1: import numpy as np
1461/2: import matplotlib.pyplot as plt
1461/3: from cauchymc import *
1461/4: from scipy.stats import cauchy
1461/5: observed = cauchy.rvs(size=5, loc=0.0, scale=2.0)
1461/6: observed
1461/7: tracex0, tracegamma = metropolisHastings(20000, 1.0, 1.0, observed)
1461/8: plt.plot(tracex0)
1461/9: plt.show()
1462/1: %load_ext autoreload
1462/2: %autoreload 2
1462/3: import numpy as np
1462/4: import matplotlib.pyplot as plt
1462/5: from scipy.stats import cauchy
1462/6: from cauchymc import *
1462/7: observed = cauchy.rvs(size=5, loc=0.0, scale=2.0)
1462/8: tracex0, tracegamma = metropolisHastings(20000, 1.0, 1.0, observed)
1462/9: plt.plot(tracex0)
1462/10: plt.show()
1462/11: tracex0, tracegamma = metropolisHastings(20000, 1.0, 1.0, observed)
1462/12: plt.plot(tracex0)
1462/13: plt.show()
1462/14: tracex0, tracegamma = metropolisHastings(20000, 1.0, 1.0, observed)
1462/15: plt.plot(tracex0)
1462/16: plt.show()
1462/17: tracex0, tracegamma = metropolisHastings(20000, 1.0, 1.0, observed)
1462/18: plt.plot(tracex0)
1462/19: plt.show()
1462/20: tracex0, tracegamma = metropolisHastings(100000, 1.0, 1.0, observed)
1462/21: tracex0, tracegamma = metropolisHastings(100000, 1.0, 1.0, observed)
1462/22: plt.plot(tracex0)
1462/23: plt.show()
1462/24: plt.show()
1462/25: plt.plot(tracex0[10000:])
1462/26: plt.show()
1462/27: plt.plot(tracegamma)
1462/28: plt.show()
1464/1: import numpy as np
1464/2: np.random.choice(3)
1464/3: np.random.choice(3 , 10)
1464/4: from manim import *
1464/5: ?Rectangle
1464/6: ?Rectangle
1464/7: RIGHT
1464/8: (0 - 1) * 2 * RIGHT
1464/9: RED
1464/10: DOWN
1464/11: np.random.choice(3, 10)
1464/12: car = np.random.choice(3, 10)
1464/13: chc = np.random.choice(3, 10)
1464/14: car
1464/15: chc
1464/16: np.where(car = 0 && chc = 1 , 2)
1464/17: np.where(car = 0 and chc = 1 , 2)
1464/18: np.where(car == 0 and chc == 1 , 2)
1464/19: np.all
1464/20: ?np.all
1464/21: np.where(np.all(car == 0 , chc == 1) , 2 , -1)
1464/22: car
1464/23: chc
1464/24: np.zip(car, chc)
1464/25: zip(car, chc)
1464/26: np.dstack((car , chc))
1464/27: np.dstack((car, chc)).shape
1464/28: np.dstack(car , chc)
1464/29: np.dstack((car, chc)).shape
1464/30: np.dstack((car, chc))
1464/31: np.column_stack((car, chc))
1464/32: car
1464/33: chc
1464/34: np.column_stack((car, chc))[0]
1464/35: 2 in np.column_stack((car, chc))[0]
1464/36: np.setdiff1d(np.array([0 , 1 , 2]) , np.array([1 , 2]))
1464/37: np.setdiff1d(np.array([0 , 1 , 2]) , np.array([1 , 1]))
1464/38: np.random.choice(np.setdiff1d(np.array([0, 1, 2]), np.array([1, 1])))
1464/39: np.random.choice(np.setdiff1d(np.array([0, 1, 2]), np.array([1, 1])))
1464/40: np.column_stack((car, chc))
1464/41: zipped = np.column_stack((car, chc))
1464/42: np.random.choice(np.setdiff1d(np.array([0, 1, 2]), zipped))
1464/43: np.random.choice(np.setdiff1d(np.array([0, 1, 2]), zipped[0]))
1464/44: np.random.choice(np.setdiff1d(np.array([0, 1, 2]), zipped[0]))
1464/45: np.random.choice(np.setdiff1d(np.array([0, 1, 2]), zipped[:]))
1464/46:
def simple(a):
    print(a)
1464/47: zipped = np.column_stack((car, chc))
1464/48: zipped
1464/49: np.apply_over_axes(simple , zipped , 0)
1464/50: np.apply_over_axes(simple , zipped , [0])
1464/51: np.apply_along_axes(simple , 0 , zipped)
1464/52: np.apply_along_axis
1464/53: np.apply_along_axis(simple , 0 , zipped)
1464/54: np.apply_along_axis(simple , 1 , zipped)
1464/55:
@np.vectorize
def simple(a):
    print(a)
1464/56: simple(zipped)
1464/57: zipped
1464/58:
@np.vectorize
def sim(a):
    print(a)
    return a
1464/59: sim(zipped)
1464/60: ?sim
1464/61:
@np.vectorize
def sim(a, b):
    print(a, b)
    return a + b
1464/62: sim(zipped)
1464/63: zipped = np.column_stack((car, chc))
1464/64: sim(car, chc)
1464/65: car
1464/66: chc
1464/67: ?Mobject.play
1464/68: ?Scene.play
1465/1: a = [0, 1, 2]
1465/2: x = a.pop(1)
1465/3: x
1465/4: a
1466/1:
for i in range(100):
    print(i + 1)
1467/1: import pytorch
1467/2: impor torch
1468/1: import pytensor.tensor as pt
1468/2: from pytensor import function
1468/3: x = pt.dscalar("x")
1468/4: t = pt.dscalar("y")
1468/5: x = pt.dscalar("x")
1468/6: y = pt.dscalar("y")
1468/7: x
1468/8: y
1468/9: z = x + y
1468/10: z
1468/11: f = function([x , y] , z)
1468/12: f
1468/13: f(2 , 3)
1468/14: type(f(2, 3))
1469/1: import pytensor.tensor as pt
1469/2: x = pt.vector("x")
1469/3: y = pt.vector("y")
1469/4: from pytensor import function
1469/5: z = pt.outer(x, y)
1469/6: f = function([x, y], z)
1469/7: f
1469/8: f([1 , 2 , 3] , [4 , 5 , 6])
1469/9: f([1, 2, 3], [4, 5, 6])
1469/10: f([1, 2, 3], [4, 5, 6])
1469/11: ?pt.add
1469/12: pt.shape(x)
1469/13: pt.shape()
1469/14: pt.shape(z)
1469/15: pt.shape(f)
1470/1:
class HelloContextManager:
    def __enter__(self):
        print("Entering the context ...")
        return "Hello, World!"

    def __exit__(self, exc_type, exc_value, exc_tb):
        print("... leaving context.")
        print(exc_type, exc_value, exc_tb, sep="\n")
1470/2:
with HeloContextManager() as hello:
    print(hello)
1470/3:
with HelloContextManager() as hello:
    print(hello)
1470/4:
with HelloContextManager() as hello:
    print(hello[100])
1470/5:
with HelloContextManager() as hello:
    print(hello)
    hello[100]
1471/1:
match 1:
    case 1:
        1
1471/2:
a = match 1:
        case 1:
            1
1471/3:
def fun(i):
    match i:
        case 1:
            return "one"
        case 2:
            return "two"
        case _:
            return "???"
1471/4: fun(1)
1471/5: fun(2)
1471/6: fun(3)
1472/1: f = lambda x, y: x + y
1472/2: f
1472/3: f(1 , 2)
1473/1: from manim import *
1473/2: import numpy as np
1473/3: RED
1473/4: average_color(RED , BLUE)
1473/5: clrs = [RED, BLUE]
1473/6: average_color(*clrs)
1473/7: RED if True else None
1474/1: or(True , False)
1474/2: True + False
1474/3: Type(True + False)
1474/4: type(True + False)
1474/5: True + True
1475/1: chr(40960)
1475/2: chr(40960).encode('utf-8')
1475/3: import emoji
1475/4: print("\N{grinning face}")
1475/5: print("\N{angry face}")
1475/6: print("\N{man}")
1475/7: print("\N{woman}")
1475/8: print("\N{mask face}")
1475/9: print("\N{masked face}")
1475/10: print("\N{face with medical mask}")
1476/1: print("\N{devil}")
1476/2: print("\N{devil with horns}")
1476/3: print("\N{smiling with horns}")
1476/4: print("\N{smiling face with horns}")
1476/5: print("\N{angry face with horns}")
1476/6: print("\N{smiling face with horns}")
1476/7: print("😵‍")
1477/1: a = ()
1477/2: a
1477/3: type(a)
1477/4: scalar
1477/5: type(1)
1477/6: type(2)
1477/7: type(2.0)
1477/8: float
1477/9: int
1477/10: %load_ext autoreload
1477/11: %autoreload 2
1477/12: from yatl import *
1477/13:
match type(1):
    case int:
        print("integer")
1477/14:
match type(1):
    case int:
        print("integer")
    case float:
        print("float")
1477/15: from yatl import *
1477/16: scalar(1)
1477/17: scalar(1)
1477/18: scalar("123")
1477/19: type(())
1477/20:
class Product(tuple):
    pass
1477/21: Product(1 , 2)
1477/22: Product((1 , 2))
1477/23: a = Product((1 , 2))
1477/24: a[0]
1477/25: a[1]
1479/1: from scipy.signal import convolve2d
1479/2: import numpy as np
1479/3: lk = np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]], dtype=np.float64)
1479/4: ?convolve2d
1479/5: temp = np.array([[0 , 1 , 2 , 3] , [4 , 5 , 6 , 7] , [8 , 9 , 10 , 11] , [12 , 13 , 14 , 15]] , dtype = np.float64)
1479/6: temp
1479/7: lk
1479/8: convolve[temp , lk]
1479/9: convolve(temp , lk)
1479/10: convolve2D(temp , lk)
1479/11: temp
1479/12: lk
1479/13: convolve2d(temp, lk)
1479/14: convolve2d(temp, lk , boundry = "wrap")
1479/15: convolve2d(temp, lk , boundary = "wrap")
1479/16: convolve2d(temp, lk, boundary="wrap").shape
1479/17: temp.shape
1479/18: convolve2d(temp, lk, boundary="wrap" , mode = "same").shape
1479/19: convolve2d(temp, lk, boundary="wrap", mode="same")
1479/20: temp
1479/21: np.linspace(-3 , 3 , 0.1)
1479/22: np.linspace(-3.0 , 3.0 , 0.1)
1479/23: np.linspace(-3.0 , 3.0 , 300 , end_point = True)
1479/24: np.linspace(-3.0 , 3.0 , 300 , endpoint = True)
1479/25: np.linspace(-3.0, 3.0, 300, endpoint=True).shape
1479/26: [x for x in range(10)]
1479/27: [x for x in np.linspace(-3.0 , 3.0 , 10)]
1479/28: np.exp(1.0)
1479/29: 1j
1479/30: ?np.conj
1479/31: np.dot
1479/32: ?np.dot
1479/33: htop
1480/1: import numpy as np
1480/2: np.arg
1480/3: np.argu
1480/4: import numpy as np
1480/5: lk = np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]], dtype=np.float64)
1480/6: np.max(lk)
1480/7: np.max(np.abs(lk))
1480/8: np.max(np.abs(lk))
1482/1: import numpy as np
1482/2: lk = np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]], dtype=np.float64)
1482/3: np.concatenate((lk , lk , lk))
1482/4: np.concatenate((lk, lk, lk)).shape
1482/5: ?np.angle
1483/1: import os
1483/2: os.isdir
1483/3: ?os.is_dir
1483/4: print(f'{i:05d}')
1483/5: i = 123
1483/6: print(f"{i:05d}")
1483/7: print(f"{i:07d}")
1484/1: np.abs(1j)
1484/2: import numpy as np
1484/3: np.abs(1j)
1485/1: print("\N{smiling face with horns}")
1485/2: print("\N{smiling face}")
1485/3: print("\N{smile")
1485/4: print("\N{smiling}")
1485/5: print("\N{smiley}")
1485/6: print("\N{smiley}")
1486/1: import torch
1486/2: v1 = torch.arrange(1.0 , 5.0)
1486/3: import pytorch
1487/1: import pytorch
1487/2: import torch
1487/3: import pytoml
1487/4: ?torch
1487/5: v1 = torch.arrange(1.0, 5.0)
1487/6: torch.arange(1.0 , 5.0)
1487/7: torch.arange(1.0, 5.0).shape
1487/8: torch.arange(1.0, 5.0).dtype
1489/1: import torch
1489/2: from torchvision.models import resnet18, ResNet18_Weights
1489/3:
w1 = torch.random.rand(10, 1)
b1 = torch.random.rand(10)
w3 = torch.random.rand(10, 10)
b3 = torch.random.rand(10)
w5 = torch.random.rand(1, 10)
b5 = torch.random.rand(1)
1489/4:
w1 = torch.rand(10, 1)
b1 = torch.rand(10)
w3 = torch.rand(10, 10)
b3 = torch.rand(10)
w5 = torch.rand(1, 10)
b5 = torch..rand(1)
1489/5:
w1 = torch.rand(10, 1)
b1 = torch.rand(10)
w3 = torch.rand(10, 10)
b3 = torch.rand(10)
w5 = torch.rand(1, 10)
b5 = torch.rand(1)
1489/6: w1
1489/7: w1.requires_grad
1489/8:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10)
w3 = torch.rand(10, 10)
b3 = torch.rand(10)
w5 = torch.rand(1, 10)
b5 = torch.rand(1)
1489/9:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/10: b5
1489/11: w3
1489/12: w3.[1.0 for _ in range(10)]
1489/13: torch.matmul(w3, [1.0 for _ in range(10)])
1489/14: torch.matmul(w3, torch.tensor([1.0 for _ in range(10)]))
1489/15:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/16: import numpy as np
1489/17: trainingData = [torch.sin(x) for x in np.linspace(0, 2.0 * np.pi, 0.1)]
1489/18: trainingData = [torch.sin(x) for x in np.linspace(0, 2.0 * np.pi, 100)]
1489/19: trainingData = [torch.sin(torch.tensor(x)) for x in np.linspace(0, 2.0 * np.pi, 100)]
1489/20: trainingData
1489/21: w1.dtype
1489/22: trainingData = [torch.sin(torch.tensor(x , dtype = torch.float32)) for x in np.linspace(0, 2.0 * np.pi, 100)]
1489/23: trainingXData = [torch.sin(torch.tensor(x , dtype = torch.float32)) for x in np.linspace(0, 2.0 * np.pi, 100)]
1489/24:
trainingData = [
    torch.sin(torch.tensor(x, dtype=torch.float32))
    for x in np.linspace(0, 2.0 * np.pi, 100)
]
1489/25:
trainingData = [
    (
        torch.tensor(x, dtype=torch.float32),
        torch.sin(torch.tensor(x, dtype=torch.float32)),
    )
    for x in np.linspace(0, 2.0 * np.pi, 100)
]
1489/26:
trainingData = [
    (
        torch.tensor(x, dtype=torch.float32),
        torch.sin(torch.tensor(x, dtype=torch.float32)),
    )
    for x in np.linspace(0, 2.0 * np.pi, 100)
]
1489/27: np.linspace(0 , 2 , 10)
1489/28: torch.linspace(0, 2, 10)
1489/29:
trainingData = [
    (
        torch.tensor(x),
        torch.sin(x),
    )
    for x in np.linspace(0, 2.0 * np.pi, 100, dtype=torch.float32)
]
1489/30:
trainingData = [
    (
        torch.tensor(x),
        torch.sin(x),
    )
    for x in np.linspace(0, 2.0 * np.pi, 100)
]
1489/31:
trainingData = [
    (
        torch.tensor(x, dtype=torch.float32),
        torch.sin(torch.tensor(x, dtype=torch.float32)),
    )
    for x in np.linspace(0, 2.0 * np.pi, 100)
]
1489/32:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/33:
def nn(x, y):
    torch.matmul(w1, x) + b1
1489/34: torch.nn.ReLU(1.0)
1489/35:
def nn(x, y):
    return torch.nn.ReLU(torch.matmul(w1, x) + b1)
1489/36: trainingData[0][0]
1489/37: trainingData[0][1]
1489/38: trainingData[2][1]
1489/39: trainingData[3][0]
1489/40: trainingData[3][1]
1489/41: nn(trainingData[3][0], trainingData[3][1])
1489/42: trainingData[3][0]
1489/43: trainingData[3][0].shape
1489/44: trainingData[3][1].shape
1489/45:
trainingData = [
    (
        torch.tensor([x], dtype=torch.float32),
        torch.sin([torch.tensor(x, dtype=torch.float32)]),
    )
    for x in np.linspace(0, 2.0 * np.pi, 100)
]
1489/46:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/47:
trainingData = [
    (
        torch.tensor([x], dtype=torch.float32),
        torch.sin(torch.tensor([x], dtype=torch.float32)),
    )
    for x in np.linspace(0, 2.0 * np.pi, 100)
]
1489/48: trainingData[3][0].shape
1489/49: trainingData[3][1].shape
1489/50:
def nn(x, y):
    return torch.nn.ReLU(torch.matmul(w1, x) + b1)
1489/51: nn(trainingData[3][0], trainingData[3][1])
1489/52:
def nn(x, y):
    return torch.matmul(w1, x) + b1
1489/53: nn(trainingData[3][0], trainingData[3][1])
1489/54: nn(trainingData[3][0], trainingData[3][1])
1489/55: oo = nn(trainingData[3][0], trainingData[3][1])
1489/56: oo
1489/57: torch.nn.ReLU(oo)
1489/58:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/59:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/60:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/61:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
activation = torch.nn.ReLU()
1489/62:
def nn(x, y):
    return activation(torch.matmul(w1, x) + b1)
1489/63:
trainingData = [
    (
        torch.tensor([x], dtype=torch.float32),
        torch.sin(torch.tensor([x], dtype=torch.float32)),
    )
    for x in np.linspace(0, 2.0 * np.pi, 100)
]
1489/64: nn(trainingData[3][0], trainingData[3][1])
1489/65:
def nn(x, y):
    return (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
1489/66:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
activation = torch.nn.ReLU()
1489/67:
def nn(x, y):
    return (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
1489/68:
trainingData = [
    (
        torch.tensor([x], dtype=torch.float32),
        torch.sin(torch.tensor([x], dtype=torch.float32)),
    )
    for x in np.linspace(0, 2.0 * np.pi, 100)
]
1489/69: out = nn(trainingData[3][0], trainingData[3][1])
1489/70:
def nn(x, y):
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = (pred - y) ** 2
    return loss
1489/71: out = nn(trainingData[3][0], trainingData[3][1])
1489/72: out
1489/73:
def nn(x, y):
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * (pred - y) ** 2
    return loss
1489/74: out = nn(trainingData[3][0], trainingData[3][1])
1489/75: out
1489/76:
def nn(x, y):
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * (pred - y) ** 2
    loss.backward()
    return loss
1489/77: out = nn(trainingData[3][0], trainingData[3][1])
1489/78: out
1489/79: out.grad
1489/80:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
activation = torch.nn.ReLU()
1489/81:
def nn(x, y):
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * (pred - y) ** 2
    loss.backward()
    return loss
1489/82: out = nn(trainingData[3][0], trainingData[3][1])
1489/83: w1.grad
1489/84: w2.grad
1489/85: w3.grad
1489/86: w2.grad
1489/87: w1.grad
1489/88:
def nn(w1, b1, w3, b3, w5, b5, x, y):
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * (pred - y) ** 2
    loss.backward()
    return loss
1489/89:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
activation = torch.nn.ReLU()
1489/90: out = nn(w1 , w2 , w3 , w4 , w5 , trainingData[3][0], trainingData[3][1])
1489/91: out = nn(w1 , b1 , w3 , b3 , w5 , b5 , trainingData[3][0], trainingData[3][1])
1489/92:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * (pred - y) ** 2
    loss.backward()
    w1p = w1 - alpha * w1.grad
    b1p = b1 - alpha * b1.grad
    w3p = w3 - alpha * w3.grad
    b3p = b3 - alpha * b3.grad
    w5p = w5 - alpha * w5.grad
    b5p = b5 - alpha * b5.grad
    return (w1p, b1p, w3p, b3p, w5p, b5p), loss
1489/93:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
activation = torch.nn.ReLU()
1489/94:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/95: activation = torch.nn.ReLU()
1489/96:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/97:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * (pred - y) ** 2
    loss.backward()
    w1p = w1 - alpha * w1.grad
    b1p = b1 - alpha * b1.grad
    w3p = w3 - alpha * w3.grad
    b3p = b3 - alpha * b3.grad
    w5p = w5 - alpha * w5.grad
    b5p = b5 - alpha * b5.grad
    return (w1p, b1p, w3p, b3p, w5p, b5p), loss
1489/98: activation = torch.nn.ReLU()
1489/99:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
parameters = (w1, b1, w3, b3, w5, b5)
1489/100:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * (pred - y) ** 2
    loss.backward()
    w1p = w1 - alpha * w1.grad
    b1p = b1 - alpha * b1.grad
    w3p = w3 - alpha * w3.grad
    b3p = b3 - alpha * b3.grad
    w5p = w5 - alpha * w5.grad
    b5p = b5 - alpha * b5.grad
    return (w1p, b1p, w3p, b3p, w5p, b5p), loss
1489/101: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/102: nn(0.001, parameters, trainingData[3][0], trainingData[3][1])
1489/103: nn(0.0, parameters, trainingData[3][0], trainingData[3][1])
1489/104: parameters
1489/105: nn(0.1, parameters, trainingData[3][0], trainingData[3][1])
1489/106: activation = torch.nn.ReLU()
1489/107:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
parameters = (w1, b1, w3, b3, w5, b5)
1489/108:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * (pred - y) ** 2
    loss.backward()
    w1p = w1 - alpha * w1.grad
    b1p = b1 - alpha * b1.grad
    w3p = w3 - alpha * w3.grad
    b3p = b3 - alpha * b3.grad
    w5p = w5 - alpha * w5.grad
    b5p = b5 - alpha * b5.grad
    return (w1p, b1p, w3p, b3p, w5p, b5p), loss
1489/109:
trainingData = [
    (
        torch.tensor([x], dtype=torch.float32),
        torch.sin(torch.tensor([x], dtype=torch.float32)),
    )
    for x in np.linspace(0, 2.0 * np.pi, 100)
]
1489/110: activation = torch.nn.ReLU()
1489/111:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
parameters = (w1, b1, w3, b3, w5, b5)
1489/112:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * (pred - y) ** 2
    loss.backward()
    w1p = w1 - alpha * w1.grad
    b1p = b1 - alpha * b1.grad
    w3p = w3 - alpha * w3.grad
    b3p = b3 - alpha * b3.grad
    w5p = w5 - alpha * w5.grad
    b5p = b5 - alpha * b5.grad
    return (w1p, b1p, w3p, b3p, w5p, b5p), loss
1489/113: out = nn(w1 , b1 , w3 , b3 , w5 , b5 , trainingData[3][0], trainingData[3][1])
1489/114:
for i in range(len(trainingData)):
    parameters = (w1, b1, w3, b3, w5, b5)
    parameters, loss = nn(0.01, parameters, trainingData[i][0], trainingData[i][1])
    print(loss)
1489/115: parameters
1489/116:
for i in range(len(trainingData)):
    parameters = (w1, b1, w3, b3, w5, b5)
    parameters, loss = nn(0.0001, parameters, trainingData[i][0], trainingData[i][1])
    print(loss)
1489/117:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
parameters = (w1, b1, w3, b3, w5, b5)
1489/118:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/119: activation = torch.nn.ReLU()
1489/120:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/121:
trainingData = [
    (
        torch.tensor([x], dtype=torch.float32),
        torch.sin(torch.tensor([x], dtype=torch.float32)),
    )
    for x in np.linspace(0, 2.0 * np.pi, 100)
]
1489/122:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * (pred - y) ** 2
    loss.backward()
    w1p = w1 - alpha * w1.grad
    b1p = b1 - alpha * b1.grad
    w3p = w3 - alpha * w3.grad
    b3p = b3 - alpha * b3.grad
    w5p = w5 - alpha * w5.grad
    b5p = b5 - alpha * b5.grad
    return (w1p, b1p, w3p, b3p, w5p, b5p), loss
1489/123:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    w1p = w1 - alpha * w1.grad
    b1p = b1 - alpha * b1.grad
    w3p = w3 - alpha * w3.grad
    b3p = b3 - alpha * b3.grad
    w5p = w5 - alpha * w5.grad
    b5p = b5 - alpha * b5.grad
    return (w1p, b1p, w3p, b3p, w5p, b5p), loss
1489/124:
for i in range(len(trainingData)):
    parameters = (w1, b1, w3, b3, w5, b5)
    parameters, loss = nn(0.0001, parameters, trainingData[i][0], trainingData[i][1])
    print(loss)
1489/125:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/126:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    w1p = w1 - alpha * w1.grad
    b1p = b1 - alpha * b1.grad
    w3p = w3 - alpha * w3.grad
    b3p = b3 - alpha * b3.grad
    w5p = w5 - alpha * w5.grad
    b5p = b5 - alpha * b5.grad
    return (w1p, b1p, w3p, b3p, w5p, b5p), loss
1489/127:
for i in range(len(trainingData)):
    parameters = (w1, b1, w3, b3, w5, b5)
    parameters, loss = nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
    print(loss)
1489/128:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/129:
for _ in range(1000):
    for i in range(len(trainingData)):
        parameters = (w1, b1, w3, b3, w5, b5)
        parameters, loss = nn(
            0.00001, parameters, trainingData[i][0], trainingData[i][1]
        )
    print(loss)
1489/130:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/131:
for j in range(1000):
    loss = None
    for i in range(len(trainingData)):
        parameters = (w1, b1, w3, b3, w5, b5)
        parameters, loss = nn(
            0.00001, parameters, trainingData[i][0], trainingData[i][1]
        )
    print(j, loss)
1489/132:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/133:
for j in range(100):
    loss = None
    for i in range(len(trainingData)):
        parameters = (w1, b1, w3, b3, w5, b5)
        parameters, loss = nn(
            0.00001, parameters, trainingData[i][0], trainingData[i][1]
        )
        print(j, i, loss)
1489/134:
parameters = (w1, b1, w3, b3, w5, b5)
for j in range(100):
    for i in range(len(trainingData)):
        parameters, loss = nn(
            0.00001, parameters, trainingData[i][0], trainingData[i][1]
        )
        w1, b1, w3, b3, w5, b5 = parameters
        print(j, i, loss)
1489/135:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/136:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    w1p = w1 - alpha * w1.grad
    b1p = b1 - alpha * b1.grad
    w3p = w3 - alpha * w3.grad
    b3p = b3 - alpha * b3.grad
    w5p = w5 - alpha * w5.grad
    b5p = b5 - alpha * b5.grad
    return (w1p, b1p, w3p, b3p, w5p, b5p), loss
1489/137:
parameters = (w1, b1, w3, b3, w5, b5)
for i in range(len(trainingData)):
    parameters, loss = nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
    w1, b1, w3, b3, w5, b5 = parameters
    print(j, i, loss)
1489/138:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/139: parameters = (w1, b1, w3, b3, w5, b5)
1489/140: parameters, loss = nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/141: parameters
1489/142: loss
1489/143:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/144: parameters = (w1, b1, w3, b3, w5, b5)
1489/145: parameters
1489/146: parameters, loss = nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/147: parameters
1489/148:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    print(w1.grad)
    w1p = w1 - alpha * w1.grad
    b1p = b1 - alpha * b1.grad
    w3p = w3 - alpha * w3.grad
    b3p = b3 - alpha * b3.grad
    w5p = w5 - alpha * w5.grad
    b5p = b5 - alpha * b5.grad
    return (w1p, b1p, w3p, b3p, w5p, b5p), loss
1489/149: parameters, loss = nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/150: parameters = (w1, b1, w3, b3, w5, b5)
1489/151:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/152: parameters = (w1, b1, w3, b3, w5, b5)
1489/153: parameters, loss = nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/154: w1
1489/155:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    print(-alpha * w1.grad)
    w1p = w1 - alpha * w1.grad
    b1p = b1 - alpha * b1.grad
    w3p = w3 - alpha * w3.grad
    b3p = b3 - alpha * b3.grad
    w5p = w5 - alpha * w5.grad
    b5p = b5 - alpha * b5.grad
    return (w1p, b1p, w3p, b3p, w5p, b5p), loss
1489/156:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    print(-alpha * w1.grad)
    w1 = w1 - alpha * w1.grad
    b1 = b1 - alpha * b1.grad
    w3 = w3 - alpha * w3.grad
    b3 = b3 - alpha * b3.grad
    w5 = w5 - alpha * w5.grad
    b5 = b5 - alpha * b5.grad
    return (w1p, b1p, w3p, b3p, w5p, b5p), loss
1489/157:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/158: parameters = (w1, b1, w3, b3, w5, b5)
1489/159:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    print(-alpha * w1.grad)
    w1 = w1 - alpha * w1.grad
    b1 = b1 - alpha * b1.grad
    w3 = w3 - alpha * w3.grad
    b3 = b3 - alpha * b3.grad
    w5 = w5 - alpha * w5.grad
    b5 = b5 - alpha * b5.grad
    return loss
1489/160:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/161: parameters = (w1, b1, w3, b3, w5, b5)
1489/162:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    print(-alpha * w1.grad)
    w1 = w1 - alpha * w1.grad
    b1 = b1 - alpha * b1.grad
    w3 = w3 - alpha * w3.grad
    b3 = b3 - alpha * b3.grad
    w5 = w5 - alpha * w5.grad
    b5 = b5 - alpha * b5.grad
    return loss
1489/163: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/164: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/165: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/166: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/167: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/168: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/169: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/170: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/171: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/172: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/173: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/174: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/175: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/176: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/177: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/178: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/179: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/180: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/181: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/182: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/183: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/184: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/185: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/186: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/187: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/188: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/189: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/190: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/191: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/192: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/193: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/194: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/195: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/196: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/197: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/198: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/199: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/200: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/201: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/202: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/203: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/204: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/205: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/206: nn(0.00001, parameters, trainingData[i][0], trainingData[i][1])
1489/207: nn(0.001, parameters, trainingData[i][0], trainingData[i][1])
1489/208: nn(0.001, parameters, trainingData[i][0], trainingData[i][1])
1489/209:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    print("w1 change:")
    print(-alpha * w1.grad)
    print("w1 before:")
    print(w1)
    w1 = w1 - alpha * w1.grad
    print("w1 after:")
    print(w1)
    b1 = b1 - alpha * b1.grad
    w3 = w3 - alpha * w3.grad
    b3 = b3 - alpha * b3.grad
    w5 = w5 - alpha * w5.grad
    b5 = b5 - alpha * b5.grad
    return loss
1489/210:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/211: parameters = (w1, b1, w3, b3, w5, b5)
1489/212:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    print("w1 change:")
    print(-alpha * w1.grad)
    print("w1 before:")
    print(w1)
    w1 = w1 - alpha * w1.grad
    print("w1 after:")
    print(w1)
    b1 = b1 - alpha * b1.grad
    w3 = w3 - alpha * w3.grad
    b3 = b3 - alpha * b3.grad
    w5 = w5 - alpha * w5.grad
    b5 = b5 - alpha * b5.grad
    return loss
1489/213: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/214: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/215:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    print("w1 change:")
    print(-alpha * w1.grad)
    print("w1 before:")
    print(w1)
    w1 = w1 - alpha * w1.grad
    print("w1 after:")
    print(w1)
    b1 -= alpha * b1.grad
    w3 -= alpha * w3.grad
    b3 -= alpha * b3.grad
    w5 -= alpha * w5.grad
    b5 -= alpha * b5.grad
    return loss
1489/216:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/217: parameters = (w1, b1, w3, b3, w5, b5)
1489/218:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    print("w1 change:")
    print(-alpha * w1.grad)
    print("w1 before:")
    print(w1)
    w1 = w1 - alpha * w1.grad
    print("w1 after:")
    print(w1)
    b1 -= alpha * b1.grad
    w3 -= alpha * w3.grad
    b3 -= alpha * b3.grad
    w5 -= alpha * w5.grad
    b5 -= alpha * b5.grad
    return loss
1489/219: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/220:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    print("w1 change:")
    print(-alpha * w1.grad)
    print("w1 before:")
    print(w1)
    w1 -= alpha * w1.grad
    print("w1 after:")
    print(w1)
    b1 -= alpha * b1.grad
    w3 -= alpha * w3.grad
    b3 -= alpha * b3.grad
    w5 -= alpha * w5.grad
    b5 -= alpha * b5.grad
    return loss
1489/221:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/222: parameters = (w1, b1, w3, b3, w5, b5)
1489/223:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    print("w1 change:")
    print(-alpha * w1.grad)
    print("w1 before:")
    print(w1)
    w1 -= alpha * w1.grad
    print("w1 after:")
    print(w1)
    b1 -= alpha * b1.grad
    w3 -= alpha * w3.grad
    b3 -= alpha * b3.grad
    w5 -= alpha * w5.grad
    b5 -= alpha * b5.grad
    return loss
1489/224: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/225:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    w1.data -= alpha * w1.grad.data
    b1.data -= alpha * b1.grad.data
    w3.data -= alpha * w3.grad.data
    b3.data -= alpha * b3.grad.data
    w5.data -= alpha * w5.grad.data
    b5.data -= alpha * b5.grad.data
    return loss
1489/226:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/227: parameters = (w1, b1, w3, b3, w5, b5)
1489/228:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    w1.data -= alpha * w1.grad.data
    b1.data -= alpha * b1.grad.data
    w3.data -= alpha * w3.grad.data
    b3.data -= alpha * b3.grad.data
    w5.data -= alpha * w5.grad.data
    b5.data -= alpha * b5.grad.data
    return loss
1489/229: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/230: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/231: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/232: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/233: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/234: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/235: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/236: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/237: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/238: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/239: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/240: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/241: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/242: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/243: nn(0.01, parameters, trainingData[3][0], trainingData[3][1])
1489/244:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    w1.data -= alpha * w1.grad.data
    b1.data -= alpha * b1.grad.data
    w3.data -= alpha * w3.grad.data
    b3.data -= alpha * b3.grad.data
    w5.data -= alpha * w5.grad.data
    b5.data -= alpha * b5.grad.data
    return loss
1489/245:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/246: parameters = (w1, b1, w3, b3, w5, b5)
1489/247:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    w1.data -= alpha * w1.grad.data
    b1.data -= alpha * b1.grad.data
    w3.data -= alpha * w3.grad.data
    b3.data -= alpha * b3.grad.data
    w5.data -= alpha * w5.grad.data
    b5.data -= alpha * b5.grad.data
    return loss
1489/248:
for j in range(100):
    loss = None
    for i in range(len(trainingData)):
        parameters, loss = nn(
            0.0001, parameters, trainingData[i][0], trainingData[i][1]
        )
    print(j, loss)
1489/249:
for j in range(100):
    loss = None
    for i in range(len(trainingData)):
        loss = nn(0.0001, parameters, trainingData[i][0], trainingData[i][1])
    print(j, loss)
1489/250:
for j in range(100):
    loss = None
    for i in range(len(trainingData)):
        loss = nn(0.0001, parameters, trainingData[i][0], trainingData[i][1])
        print(j, i, loss)
1489/251:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/252: parameters = (w1, b1, w3, b3, w5, b5)
1489/253:
def nn(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    w1.data -= alpha * w1.grad.data
    b1.data -= alpha * b1.grad.data
    w3.data -= alpha * w3.grad.data
    b3.data -= alpha * b3.grad.data
    w5.data -= alpha * w5.grad.data
    b5.data -= alpha * b5.grad.data
    return loss
1489/254:
def train(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    w1.data -= alpha * w1.grad.data
    b1.data -= alpha * b1.grad.data
    w3.data -= alpha * w3.grad.data
    b3.data -= alpha * b3.grad.data
    w5.data -= alpha * w5.grad.data
    b5.data -= alpha * b5.grad.data
    return loss
1489/255:
def predict(parameters, x):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    return pred
1489/256:
w1 = torch.rand(10, 1, requires_grad=True)
b1 = torch.rand(10, requires_grad=True)
w3 = torch.rand(10, 10, requires_grad=True)
b3 = torch.rand(10, requires_grad=True)
w5 = torch.rand(1, 10, requires_grad=True)
b5 = torch.rand(1, requires_grad=True)
1489/257: parameters = (w1, b1, w3, b3, w5, b5)
1489/258:
def train(alpha, parameters, x, y):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    loss = 0.5 * ((pred - y) ** 2).sum()
    loss.backward()
    w1.data -= alpha * w1.grad.data
    b1.data -= alpha * b1.grad.data
    w3.data -= alpha * w3.grad.data
    b3.data -= alpha * b3.grad.data
    w5.data -= alpha * w5.grad.data
    b5.data -= alpha * b5.grad.data
    return loss
1489/259:
def predict(parameters, x):
    w1, b1, w3, b3, w5, b5 = parameters
    pred = (
        torch.matmul(
            w5, activation(torch.matmul(w3, activation(torch.matmul(w1, x) + b1)) + b3)
        )
        + b5
    )
    return pred
1489/260:
for j in range(100):
    loss = None
    for i in range(len(trainingData)):
        loss = train(0.0001, parameters, trainingData[i][0], trainingData[i][1])
        print(j, i, loss)
1489/261: predict(parameters, 0.2)
1489/262: predict(parameters, torch.tensor([0.2]))
1489/263: import matplotlib.pyplot as plt
1489/264: x = np.linspace(0.0, 2 * np.pi, 100)
1489/265: predict(parameters, torch.tensor([0.2]))
1489/266: predict(parameters, torch.tensor([0.2])).data
1489/267: predict(parameters, torch.tensor([0.2])).data.to_numpy
1489/268: predict(parameters, torch.tensor([0.2])).data
1489/269: predict(parameters, torch.tensor([0.2])).data[0]
1489/270: y = [predict(parameters, torch.tensor([v])).data[0] for v in x]
1489/271: y = [predict(parameters, torch.tensor([v], dtype=torch.float32)).data[0] for v in x]
1489/272: x = np.linspace(0.0, 2 * np.pi, 100)
1489/273: y = [predict(parameters, torch.tensor([v], dtype=torch.float32)).data[0] for v in x]
1489/274: plt.plot(x , y)
1489/275: plt.show()
1489/276: y
1489/277: predict(parameters, torch.tensor([0.2])).data[0]
1489/278: predict(parameters, torch.tensor([0.1])).data[0]
1490/1: import torch
1490/2: loss = torch.nn.MSELoss()
1490/3: input = torch.randn(1)
1490/4: output = torch.randn(1)
1490/5: loss(input, output)
1490/6: input = torch.randn(2)
1490/7: output = torch.randn(2)
1490/8: loss(input, output)
1490/9: loss(input, output)
1490/10: loss(input, output)
1490/11: randrange(0, 10)
1490/12: import numpy as np
1490/13: ?np.random.randint
1490/14: np.random.randint(0 , 10)
1490/15: np.random.randint(0 , 2)
1490/16: np.random.randint(0, 2)
1490/17: np.random.randint(0, 2)
1490/18: np.random.randint(0, 2)
1490/19: np.random.randint(0, 2)
1490/20: np.random.randint(0, 2)
1490/21: np.random.randint(0, 2)
1490/22: np.random.randint(0, 2)
1490/23: np.random.randint(0, 2)
1490/24: np.random.randint(0, 2)
1490/25: np.random.randint(0, 2)
1490/26: np.random.randint(0, 2)
1490/27: np.random.randint(0, 2)
1490/28: np.random.randint(0, 2)
1490/29: np.random.randint(0, 2)
1490/30: import numpy as np
1490/31: import torch
1490/32: a = torch.randn(2, 2)
1490/33: b = torch.randn(2, 2)
1490/34: a @ b
1490/35: torch.matmul(a , b)
1490/36: w1 = torch.rand(10 , 1)
1490/37: b1 = torch.rand(10)
1490/38: w1
1490/39: b1
1490/40: x = torch.tensor([0.1])
1490/41: x
1490/42: w1 @ x
1490/43: torch.randn(64)
1490/44: torch.sin(torch.randn(64))
1490/45: torch.randn(64,1)
1490/46: torch.randn(64, 1).shape[0]
1490/47: torch.randn(64, 1).dtype
1491/1: import torch
1491/2: torch.randn(64 , 1)
1491/3: torch.randn(64, 1)
1491/4: torch.randn(64, 1)
1491/5: torch.randn(64, 1)
1491/6: torch.randn(64, 1)
1491/7: torch.randn(64, 1)
1491/8: torch.randn(64, 1)
1491/9: torch.randn(64, 1)
1491/10: torch.randn(64, 1)
1491/11: torch.randn(64, 1)
1491/12: torch.randn(64, 1)
1491/13: torch.randn(64, 1)
1491/14: torch.randn(64, 1)
1491/15: torch.randn(64, 1)
1491/16: torch.randn(64, 1)
1491/17: torch.randn(64, 1)
1491/18: torch.randn(64, 1)
1491/19: ?torch.randn
1491/20: ?torch.random
1491/21: torch.random(64 , 1)
1491/22: torch.rand(64 , 1)
1491/23: torch.rand(64, 1)
1493/1: import torch
1493/2: torch.tensor(123)
1493/3: torch.tensor(123).shape
1495/1: import torch
1495/2: w = torch.zeros(2 , 2 , requires_grad = True)
1495/3: w = torch.zeros(2 , 2 , requires_grad = True , dtype = torch.float32)
1495/4: x = torch.tensor([1 , 1] , dtype = torch.float32)
1495/5: w @ x
1495/6: torch.matmul(w, x)
1495/7: with torch.no_grad()
1495/8:
with torch.no_grad():
    w.grad = None
1495/9: w
1495/10: w.grad
1495/11: w = torch.zeros(2, 2, requires_grad=True, dtype=torch.float32)
1495/12: x = torch.tensor([1, 1], dtype=torch.float32)
1495/13: y = torch.tensor([2, 2], dtype=torch.float32)
1495/14: l = (y - torch.matmul(w, x)).pow(2).sum()
1495/15: l.backward()
1495/16: w.grad
1495/17: l.grad
1495/18: w = torch.zeros(2, 2, requires_grad=True, dtype=torch.float32)
1495/19: b = torch.zeros(2 , requires_grad = True , dtype = torch.float32)
1495/20: b = torch.zeros(2, requires_grad=True, dtype=torch.float32)
1495/21: w = torch.zeros(2, 2, requires_grad=True, dtype=torch.float32)
1495/22: b = torch.zeros(2, requires_grad=True, dtype=torch.float32)
1495/23: w = torch.zeros(1, 1, requires_grad=True, dtype=torch.float32)
1495/24: b = torch.zeros(b, requires_grad=True, dtype=torch.float32)
1495/25: w = torch.zeros(1, 1, requires_grad=True, dtype=torch.float32)
1495/26: b = torch.zeros(1, requires_grad=True, dtype=torch.float32)
1495/27: x = torch.tensor(1, dtype=torch.float32)
1495/28: y = torch.tensor(2, dtype=torch.float32)
1495/29: w @ x
1495/30: w = torch.zeros(1, 1, requires_grad=True, dtype=torch.float32)
1495/31: b = torch.zeros(1, requires_grad=True, dtype=torch.float32)
1495/32: x = torch.tensor([1], dtype=torch.float32)
1495/33: y = torch.tensor([2], dtype=torch.float32)
1495/34: l = (y - (torch.matmul(w, x) + b)).pow(2).sum()
1495/35: l
1495/36: l.backward()
1495/37: w.grad
1495/38: b.grad
1495/39: w = torch.zeros(1, 1, requires_grad=True, dtype=torch.float32)
1495/40: b = torch.zeros(1, requires_grad=True, dtype=torch.float32)
1495/41: x = torch.tensor([1], dtype=torch.float32)
1495/42: y = torch.tensor([2], dtype=torch.float32)
1495/43: activation = torch.nn.functional.gelu
1495/44: l = (y - activation(torch.matmul(w, x) + b)).pow(2).sum()
1495/45: l
1495/46: l.backward()
1495/47: w.grad
1496/1: import torch
1496/2: torch.max([1 , 2 , 3])
1496/3: np.max([1 , 2 , 3])
1496/4: import numpy as np
1496/5: np.max([1, 2, 3])
1498/1: import torch
1498/2: w = torch.rand(1 , 1 , requires_grad = True)
1498/3:
for i in range(10):
    x = torch.tensor([1], dtype=w.dtype)
    o = w @ x
    l = o[0].item() - 1.0
    l.backward()
1498/4:
for i in range(10):
    x = torch.tensor([1], dtype=w.dtype)
    o = w @ x
    l = o[0] - 1.0
    l.backward()
1498/5:
w = torch.rand(1, 1, requires_grad=True)
for i in range(10):
    x = torch.tensor([1], dtype=w.dtype)
    o = w @ x
    l = o[0] - 1.0
    l.backward()
1498/6:
w = torch.rand(1, 1, requires_grad=True)
for i in range(10):
    x = torch.tensor([1], dtype=w.dtype)
    o = w @ x
    l = o[0] - 1.0
    l.backward()
    with torch.no_grad():
        print("w.grad : ", w.grad)
1498/7:
w = torch.rand(1, 1, requires_grad=True)
for i in range(10):
    x = torch.tensor([1], dtype=w.dtype)
    o = w @ x
    l = o[0] - 1.0
    l.backward()
    with torch.no_grad():
        print("w.grad : ", w.grad)
        w.grad = None
1499/1: import torch
1499/2:
w = torch.tensor([1.0], requires_grad=True)
for i in range(10):
    x = torch.tensor([1], dtype=w.dtype)
    o = w @ x
    l = o[0] - 1.0
    l.backward()
    with torch.no_grad():
        print("w.grad : ", w.grad)
        w.grad = None
1499/3:
w = torch.tensor([[1.0]], requires_grad=True)
for i in range(10):
    x = torch.tensor([1], dtype=w.dtype)
    o = w @ x
    l = o[0] - 1.0
    l.backward()
    with torch.no_grad():
        print("w.grad : ", w.grad)
        w.grad = None
1500/1: import torch
1500/2:
w = torch.tensor([[1.0]], requires_grad=True)
for i in range(10):
    x = torch.tensor([1], dtype=w.dtype)
    o = w @ x
    with torch.no_grad():
        o = w @ o
    l = o[0] - 1.0
    l.backward()
    with torch.no_grad():
        print("w.grad : ", w.grad)
        w.grad = None
1500/3:
w = torch.tensor([[1.0]], requires_grad=True)
for i in range(10):
    x = torch.tensor([1], dtype=w.dtype)
    o = w @ x
    o = w @ o
    l = o[0] - 1.0
    l.backward()
    with torch.no_grad():
        print("w.grad : ", w.grad)
        w.grad = None
1501/1: a = "0123"
1501/2: a[:2]
1501/3: a[3:]
1502/1: "ATLAS" in "ATLAS Collaboration"
1503/1: a = {1 : 2  , 2:3}
1503/2: a.keys
1503/3: k.keys()
1503/4: a.keys()
1503/5: 1 in a.keys()
1504/1: tuple([1 , 2 , 3])
1504/2: tuple([i for i in range(3)])
1504/3: tuple([i for i in range(10)])
1504/4: tuple([i for i in range(20)])
1504/5: import numpy as np
1504/6: np.zeros((2 , 2))
1504/7: np.zeros([2 , 2])
1505/1: import numpy
1506/1: import kivy
1507/1: import kivy
1508/1: import kivy
1508/2: kivy.__version__
1509/1: import kivy
1509/2: kivy.__version__
1510/1: import numpy as np
1510/2: a = np.array([1, 2, 3])
1510/3: a
1510/4: a.dtype
1510/5: a.shape
1510/6: np.total(a)
1510/7: a.total()
1510/8: np.sum(a)
1511/1: import numpy as np
1513/1: import numpy
1513/2: import numpy as np
1513/3: ?np.atan
1513/4: ?np.arctan
1513/5: ?np.arctan2
1513/6: np.arctan2(1.1 , 0.1)
1513/7: np.arctan2(0.1 , 1.1)
1515/1: import numpy as np
1515/2: np.all([True , False])
1515/3: np.all([[True , False] , [True , True]])
1515/4: np.all([[True , False] , [True , True]] , axis = 1)
1515/5: np.all([[True , False] , [True , True]] , axis = 0)
1515/6: np.all([[True , False] , [True , True]] , axis = 1)
1516/1: import numpy as n
1516/2: import numpy as np
1516/3: a = np.random.rand(2048, 2048)
1516/4: a = np.random.rand(2048, 2048 , dtype = np.float64)
1516/5: a = np.random.rand(2048, 2048)
1516/6: a.dtype
1516/7: b = np.zeros(a.shape, a.dtype)
1516/8:
for _ in range(100):
    np.matmul(a , b , out = )
1516/9:
for _ in range(100):
    np.matmul(a, b, out=b)
1517/1: import numpy as np
1517/2: np.random.randint(0, 2)
1517/3: np.random.randint(0, 2)
1517/4: np.random.randint(0, 2)
1517/5: np.random.randint(0, 2)
1517/6: np.random.randint(0, 2)
1517/7: np.random.randint(0, 2)
1517/8: np.random.randint(0, 2)
1517/9: np.random.randint(0, 2)
1517/10: np.random.randint(0, 2)
1517/11: np.random.randint(0, 2)
1517/12: np.random.randint(0, 2)
1517/13: np.random.randint(0, 2)
1517/14: np.random.randint(0, 2)
1517/15: np.random.randint(0, 2)
1517/16: np.random.randint(0, 2)
1517/17: np.random.randint(0, 2)
1517/18: np.random.randint(1, 2)
1517/19: np.random.randint(1, 2)
1517/20: np.random.randint(1, 2)
1517/21: np.random.randint(1, 2)
1517/22: np.random.randint(1, 2)
1517/23: np.random.randint(1, 2)
1517/24: np.random.randint(1, 2)
1517/25: np.random.randint(1, 2)
1517/26: np.random.randint(1, 2)
1517/27: np.random.randint(1, 2)
1517/28: np.random.randint(1, 2)
1517/29: np.random.randint(1, 3)
1517/30: np.random.randint(1, 3)
1517/31: np.random.randint(1, 3)
1517/32: np.random.randint(1, 3)
1517/33: np.random.randint(1, 3)
1517/34: np.random.randint(1, 3)
1517/35: np.random.randint(1, 3)
1517/36: np.random.randint(1, 3)
1517/37: np.random.randint(1, 3)
1517/38: np.random.randint(1, 2 + 1)
1517/39: np.random.randint(1, 2 + 1)
1517/40: np.random.randint(1, 2 + 1)
1517/41: np.random.randint(1, 2 + 1)
1517/42: np.random.randint(1, 2 + 1)
1517/43: np.random.randint(1, 2 + 1)
1517/44: np.random.randint(1, 2 + 1)
1518/1: import numpy as np
1518/2: hits = np.load("./hits.npy")
1518/3: hitsId = np.load("./hits_id.npy")
1518/4: hits
1518/5: hitsId
1518/6: geometry = np.load("./geometry_id.npy")
1518/7: geometry
1518/8: geometry = np.load("./geometry.npy")
1518/9: geometry
1518/10: ind = np.argwhere(hitsId[:, 0] == 2)
1518/11: ind
1518/12: ind = np.argwhere(hitsId[:, 0] == 2).flatten()
1518/13: hitsId[ind]
1518/14: hitsId[ind].shape
1518/15: h = hits[ind]
1518/16: g = geometry[ind]
1518/17: h.shape
1518/18: g.shape
1518/19:
with open("allhits", "w") as f:
    for i in range(len(h)):
        f.write("%s %s %s " % tuple(h[i]))
        f.write("%s %s %s %s %s %x %s %s \n" % tuple(g[i]))
1518/20:
with open("allhits", "w") as f:
    for i in range(len(h)):
        f.write("%s %s %s " % tuple(h[i]))
        f.write("%s %s %s %s %s %s %s %s \n" % tuple(g[i]))
1519/1: import numpy as np
1519/2: hits = np.load("./hits.npy")
1519/3: geometry = np.load("./geometry_id.npy")
1520/1: import numpy as np
1520/2: hits = np.load("./hits.npy")
1520/3: geometry = np.load("./geometry.npy")
1520/4: hitsId = np.load("./hits_id.npy")
1520/5: ind = np.argwhere(hitsId[:, 0] == 5).flatten()
1520/6: h = hits[ind]
1520/7: g = geometry[ind]
1520/8:
with open("allhits5", "w") as f:
    for i in range(len(h)):
        f.write("%s %s %s " % tuple(h[i]))
        f.write("%s %s %s %s %s %s %s %s \n" % tuple(g[i]))
1520/9: ind = np.argwhere(hitsId[:, 0] == 2).flatten()
1520/10: h = hits[ind]
1520/11: g = geometry[ind]
1520/12:
with open("allhits2", "w") as f:
    for i in range(len(h)):
        f.write("%s %s %s " % tuple(h[i]))
        f.write("%s %s %s %s %s %s %s %s \n" % tuple(g[i]))
1520/13: ind = np.argwhere(hitsId[:, 0] == 15).flatten()
1520/14: h = hits[ind]
1520/15: g = geometry[ind]
1520/16:
with open("allhits15", "w") as f:
    for i in range(len(h)):
        f.write("%s %s %s " % tuple(h[i]))
        f.write("%s %s %s %s %s %s %s %s \n" % tuple(g[i]))
1520/17: ind = np.argwhere(hitsId[:, 0] == 15).flatten()
1520/18: h = hits[ind]
1520/19: g = geometry[ind]
1520/20: h = hits[ind]
1520/21: g = geometry[ind]
1520/22:
with open("allhits15", "w") as f:
    for i in range(len(h)):
        f.write("%s %s %s " % tuple(h[i]))
        f.write("%s %s %s %s %s %s %s %s \n" % tuple(g[i]))
1521/1: import numpy as np
1521/2: hits = np.load("./hits.npy")
1521/3: hitsId = np.load("./hits_id.npy")
1521/4: geometry = np.load("./geometry.npy")
1521/5: geometry[0]
1521/6: geometryId = np.load("./geometry_id.npy")
1521/7: ind = np.argwhere(hitsId[:, 0] == 15).flatten()
1521/8: h = hits[ind]
1521/9: g = geometry[ind]
1521/10: gid = geometryId[ind]
1521/11:
with open("allhits15", "w") as f:
    for i in range(len(h)):
        f.write("%s %s %s " % tuple(h[i]))
        f.write("%s %s %s %s %s %s %s %s " % tuple(g[i]))
        f.write("%s %s \n" % tuple(gid[i]))
1521/12: gid
1521/13: h
1521/14: g
1521/15: hitsId
1521/16: hitsId[ind]
1521/17: geometryId
1521/18: geometryId[ind]
1521/19: hitsId[ind]
1521/20: geometry
1522/1: import numpy as np
1522/2: hits = np.load("./hits.npy")
1522/3: hitsId = np.load("./hits_id.npy")
1522/4: ind = np.argwhere(hitsId[:, 0] == 15).flatten()
1522/5: h = hits[ind]
1522/6: hid = hitsId[ind]
1522/7:
with open("allhits15", "w") as f:
    for i in range(len(h)):
        f.write("%s %s %s " % tuple(h[i]))
        f.write("%s %s \n" % tuple(hid[i]))
1522/8: geometry = np.load("./geometry.npy")
1522/9: geometryId = np.load("./geometry_id.npy")
1522/10: ind = np.argwhere(geometryId[:, 0] == 15).flatten()
1522/11: g = geometry[ind]
1522/12: gid = geometryId[ind]
1522/13:
with open("allgeometry15", "w") as f:
    for i in range(len(h)):
        f.write("%s %s %s %s %s %s %s %s " % tuple(g[i]))
        f.write("%s %s \n" % tuple(gid[i]))
1522/14:
with open("allgeometry15", "w") as f:
    for i in range(len(g)):
        f.write("%s %s %s %s %s %s %s %s " % tuple(g[i]))
        f.write("%s %s \n" % tuple(gid[i]))
1523/1: import numpy as np
1523/2: hits = np.load("./hits.npy")
1523/3: hitsId = np.load("./hits_id.npy")
1523/4: geometry = np.load("./geometry.npy")
1523/5: geometryId = np.load("./geometry_id.npy")
1523/6: ind = np.argwhere(geometryId[:, 0] == 15).flatten()
1523/7: h = hits[ind]
1523/8: hid = hitsId[ind]
1523/9: g = geometry[ind]
1523/10: gid = geometryId[ind]
1523/11:
with open("allhits15", "w") as f:
    for i in range(len(h)):
        f.write("%s %s %s " % tuple(h[i]))
        f.write("%s %s \n" % tuple(hid[i]))
1523/12:
with open("allgeometry15", "w") as f:
    for i in range(len(g)):
        f.write("%s %s %s %s %s %s %s %s %s " % tuple(g[i]))
        f.write("%s %s \n" % tuple(gid[i]))
1524/1: import numpy as np
1524/2: geometry = np.load("./geometry.npy")
1523/13: hits = np.load("./hits.npy")
1523/14: hitsId = np.load("./hits_id.npy")
1523/15: geometry = np.load("./geometry.npy")
1523/16: geometryId = np.load("./geometry_id.npy")
1523/17: ind = np.argwhere(hitsId[:, 0] == 15).flatten()
1523/18: h = hits[ind]
1523/19: hid = hitsId[ind]
1523/20:
with open("allhits15", "w") as f:
    for i in range(len(h)):
        f.write("%s %s %s " % tuple(h[i]))
        f.write("%s %s \n" % tuple(hid[i]))
1523/21: ind = np.argwhere(geometryId[:, 0] == 15).flatten()
1523/22: g = geometry[ind]
1523/23: gid = geometryId[ind]
1523/24:
with open("allgeometry15", "w") as f:
    for i in range(len(g)):
        f.write("%s %s %s %s %s %s %s %s %s " % tuple(g[i]))
        f.write("%s %s \n" % tuple(gid[i]))
1525/1: import pymc as pn
1525/2: import arviz as az
1525/3: from scipy.stats import cauchy
1525/4: import matplotlib.pyplot as plt
1525/5: observed = cauchy.rvs(size=16, loc=0.0, scale=2.0)
1525/6: observed
1525/7: cauchy_model = pm.Model()
1525/8: import pymc as pm
1525/9: cauchy_model = pm.Model()
1525/10:
with cauchy_model:
    x0 = pm.Uniform("x0", lower=-10.0, upper=10)
    gamma = pm.Uniform("gamma", lower=0.0, upper=10.0)
    x = pm.Cauchy("x", alpha=x0, beta=gamma, observed=observed)
1525/11:
with cauchy_model:
    x0 = pm.Uniform("x0", lower=-10.0, upper=10)
    gamma = pm.Uniform("gamma", lower=0.0, upper=10.0)
    x = pm.Cauchy("x", alpha=x0, beta=gamma, observed=observed)
    idata = pm.sample()
1526/1: import pymc as pn
1526/2: import arviz as az
1526/3: from scipy.stats import cauchy
1526/4: import matplotlib.pyplot as plt
1526/5: observed = cauchy.rvs(size=16, loc=0.0, scale=2.0)
1526/6: cauchy_model = pm.Model()
1526/7: import pymc as pm
1526/8: import arviz as az
1526/9: from scipy.stats import cauchy
1526/10: import matplotlib.pyplot as plt
1526/11: observed = cauchy.rvs(size=16, loc=0.0, scale=2.0)
1526/12: cauchy_model = pm.Model()
1526/13:
with cauchy_model:
    x0 = pm.Uniform("x0", lower=-10.0, upper=10)
    gamma = pm.Uniform("gamma", lower=0.0, upper=10.0)
    x = pm.Cauchy("x", alpha=x0, beta=gamma, observed=observed)
    idata = pm.sample()
1526/14: az.plot_trace(idata)
1526/15: plt.show()
1527/1: import numpy as np
1527/2: np.random.choice(3 , 10)
1528/1: import numpy as np
1528/2: import matplotlib as plt
1530/1: import numpy as np
1530/2: import matplotlib.pyplot as plt
1530/3:
data = []
with open("data", "r") as f:
    data = list(map(float, f.readlines()))
1530/4: data
1530/5: counts, bins = np.histogram(x)
1530/6: counts, bins = np.histogram(data)
1530/7: plt.stairs(counts, bins)
1530/8: plt.show()
1530/9: ?plt.hist
1530/10: plt.hist(data)
1530/11: plt.show()
1530/12: plt.hist(data, density=True)
1530/13: plt.show()
1531/1: import matplotlib.pyplot as plt
1531/2: data = None
1531/3:
with open("data", "r") as f:
    data = list(map(float, f.readlines()))
1531/4: data
1531/5: plt.hist(data)
1531/6: plt.show()
1531/7: plt.hist(data, density=True)
1531/8: plt.show()
1532/1: import subprocess
1532/2: subprocess.run("pwd")
1532/3: subprocess.check_output("pwd")
1532/4: subprocess.check_output(["pwd"])
1533/1: import pytorch
1533/2: import torch
1533/3: a = torch.arange(60.0).reshape(3, 4, 5)
1533/4: b = torch.arange(24.0).reshape(4, 3, 2)
1533/5: torch.tensordot(a, b, dims=([1, 0], [0, 1]))
1533/6: a
1533/7: b
1533/8: torch.tensordot(a, b)
1533/9: a = torch.arange(60.0).reshape(10 , 6)
1533/10: b = torch.arange(24.0).reshape(8 , 4)
1533/11: b = torch.arange(24.0).reshape(8 , 3)
1533/12: a
1533/13: b
1533/14: torch.kron(a, b)
1536/1:
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
%matplotlib inline
1536/2:
wiki = pd.read_csv('people_wiki.csv')
wiki.head()
1536/3:
wiki = pd.read_csv('people_wiki.csv')
wiki.head()
1536/4:
from sklearn.feature_extraction.text import CountVectorizer

# make sure you include words of unit length by using the parameter: token_pattern=r"(?u)\b\w+\b"
# do not use any stopwords, take 10000 most frequent words in the corpus, and explicitly take all the words independent of in how many documents they occur
vectorizer = CountVectorizer(analyzer='word',ngram_range=(1,1),max_df=1.,min_df=1,
                             stop_words=None,token_pattern=r"(?u)\b\w+\b",max_features=10000)

# obtain the matrix of word count
X=vectorizer.fit_transform(wiki['text'])
1536/5:
from sklearn.feature_extraction.text import CountVectorizer

# make sure you include words of unit length by using the parameter: token_pattern=r"(?u)\b\w+\b"
# do not use any stopwords, take 10000 most frequent words in the corpus, and explicitly take all the words independent of in how many documents they occur
vectorizer = CountVectorizer(analyzer='word',ngram_range=(1,1),max_df=1.,min_df=1,
                             stop_words=None,token_pattern=r"(?u)\b\w+\b",max_features=10000)

# obtain the matrix of word count
X=vectorizer.fit_transform(wiki['text'])
1536/6:
# One can use the following:
    # from sklearn.neighbors import NearestNeighbors
    # nbrs = NearestNeighbors(n_neighbors=3, algorithm='brute',metric='euclidean').fit(X.toarray())
    # distances, indices = nbrs.kneighbors(X.toarray())
# but here let's use:
from sklearn.metrics import pairwise_distances

dist = pairwise_distances(X[:,:],
                          X[wiki[wiki['name']=='Barack Obama'].index,:],
                          metric='euclidean',n_jobs=-1)
1536/7:
wiki['BO-eucl'] = dist[:,0]
wiki.sort_values(by='BO-eucl',ascending=True)[0:10]
1538/1:
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
%matplotlib inline
1538/2:
wiki = pd.read_csv('people_wiki.csv')
wiki.head()
1538/3:
from IPython.display import HTML
print(wiki['text'][0])
HTML(url=wiki['URI'][0])
1539/1:
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
%matplotlib inline
1539/2:
wiki = pd.read_csv('people_wiki.csv')
wiki.head()
1540/1: import torch
1541/1: %load_ext autoreload
1541/2: %autoreload 2
1541/3: from selection import *
1541/4: gen = make_generations_r(2)
1541/5: gen = make_generations_r(3)
1541/6: info = get_info(gen)
1541/7: write("./" , info)
1541/8: torch.unique
1541/9: ?torch.unique
1541/10: from scipy.stats import norm
1541/11: norm.rvs(size = (10 , 2))
1541/12: norm.rvs(size = (10 , 2) , loc = [0.5 , 0.5])
1541/13: norm.rvs(size = (10 , 2) , loc = [0.5 , 0.5] , scale = [0.1 , 0.1])
1541/14: norm.rvs(size=(10, 2), loc=[0.5, 0.5], scale=[0.1, 0.1])
1541/15: dta = norm.rvs(size=(100, 2), loc=[0.5, 0.5], scale=[0.1, 0.1])
1541/16: from selection import *
1541/17: gen = make_generations_r(3)
1541/18: info = get_info(gen)
1541/19: gen = make_generations_r(2)
1541/20: info = get_info(gen)
1541/21: gen["minx"]
1541/22: gen
1541/23: gen = make_generations_r(2)
1541/24: info = get_info(gen)
1541/25: infor["minx"]
1541/26: info["minx"]
1541/27: dta[1, 0]
1541/28: info["minx"] < dta[1, 0]
1541/29: info["minx"] < dta[1, 0] <= info["minx"] + info["thicknessx"]
1541/30: info["minx"] + info["thicknessx"]
1541/31: (info["minx"] < dta[1, 0]) and (dta[1, 0] <= info["minx"] + info["thicknessx"])
1541/32: (info["minx"] < dta[1, 0]) and (dta[1, 0] <= (info["minx"] + info["thicknessx"]))
1541/33: dta[1, 0] <= (info["minx"] + info["thicknessx"])
1541/34: (info["minx"] < dta[1, 0]) * (dta[1, 0] <= (info["minx"] + info["thicknessx"]))
1541/35: (info["minx"] < dta[1, 0])
1541/36: dta[1, 0] <= (info["minx"] + info["thicknessx"])
1541/37: (info["minx"] < dta[1, 0]) * (dta[1, 0] <= (info["minx"] + info["thicknessx"]))
1541/38: (info["minx"] < dta[1, 0]) * (dta[1, 0] <= (info["minx"] + info["thicknessx"])) * (info["miny"] < dta[1, 1]) * (dta[1, 1] <= (info["miny"] + info["thicknessy"]))
1541/39: dta[1, 0] <= (info["minx"] + info["thicknessx"])
1541/40: dta[0;;3, 0] <= (info["minx"] + info["thicknessx"])
1541/41: dta[0 : 3, 0] <= (info["minx"] + info["thicknessx"])
1541/42: dta[1, 0] <= (info["minx"] + info["thicknessx"])
1541/43: (dta[1, 0] <= (info["minx"] + info["thicknessx"])).astype(torch.int32)
1541/44: t = (dta[1, 0] <= (info["minx"] + info["thicknessx"]))
1541/45: t.int()
1541/46:
(
    (info["minx"] < dta[1, 0])
    * (dta[1, 0] <= (info["minx"] + info["thicknessx"]))
    * (info["miny"] < dta[1, 1])
    * (dta[1, 1] <= (info["miny"] + info["thicknessy"]))
).int()
1541/47: in
1541/48: from selection import *
1541/49: dta
1541/50: in(dta , info)
1541/51: from selection import *
1541/52: from selection import *
1541/53: gen = make_generations_r(2)
1541/54: info = get_info(gen)
1541/55: dta = norm.rvs(size=(100, 2), loc=[0.5, 0.5], scale=[0.1, 0.1])
1541/56: get_counts(dta , info)
1541/57: dta
1541/58: counts = get_counts(dta , info)
1541/59: info["minx"] < dta[1, 0]
1541/60: (info["minx"] < dta[1, 0]).float()
1541/61: (info["minx"] < dta[1, 0]).float().dtype
1541/62: from selection import *
1541/63: get_p(info , dta)
1541/64: log(123.3)
1541/65: torch.log(12.0)
1541/66: import numpy as np
1541/67: np.log(12.3)
1541/68: from selection import *
1541/69: get_p(info, dta)
1541/70: get_p(info, dta)
1541/71: gen
1541/72: gen["generationsx"]
1541/73: gen["generationsx"][1]
1541/74: gen["generationsx"][1].grad
1541/75: gen["generationsx"][1].grad
1542/1: %load_ext autoreload
1542/2: %autoreload 2
1542/3: from selection import *
1542/4: gen = make_generations(3)
1542/5: info = get_info(gen)
1542/6: from scipy.stats import norm
1542/7: dta = norm.rvs(size=(100, 2), loc=[0.5, 0.5], scale=[0.1, 0.1])
1542/8: gen["generationsx"][1]
1542/9: (gen["generationsx"][1]).sum()
1543/1: import torch
1543/2: from scipy.stats import norm
1543/3: from selection import *
1543/4: gen = make_generations(3)
1543/5: info = get_info(gen)
1543/6: data = norm.rvs(size=(100, 2), loc=[0.5, 0.5], scale=[0.1, 0.1])
1543/7: get_p(info, data)
1543/8: data = norm.rvs(size=(100, 2), loc=[0.5, 0.5], scale=[0.1, 0.1])
1543/9: get_p(info, data)
1544/1: %load_ext autoreload
1544/2: %autoreload 2
1544/3: import torch
1544/4: from scipy.stats import norm
1544/5: from selection import *
1544/6: gen = make_generations(3)
1544/7: info = get_info(gen)
1544/8: data = norm.rvs(size=(100, 2), loc=[0.5, 0.5], scale=[0.1, 0.1])
1544/9: get_p(info, data)
1544/10: get_p(info, data)
1544/11: get_p(info, data)
1544/12: get_p(info, data)
1544/13: get_p(info, data)
1544/14: get_p(info, data)
1544/15: get_p(info, data)
1544/16: get_p(info, data)
1544/17: get_p(info, data) + 123
1544/18: sl, ll = get_p(info, data)
1544/19: sl
1544/20: ll
1544/21: sl + ll
1544/22: sl
1544/23: ll
1544/24: 4.1588830833596715 + ll
1544/25: 123 + ll
1544/26: ll
1544/27: ll.dtype
1544/28: sl.dtype
1544/29: get_p(info, data)
1544/30: get_p(info, data)
1544/31: get_p(info, data)
1544/32: get_p(info, data)
1544/33: l = get_p(info, data)
1544/34: l.backward()
1544/35: gen["generationsx"]
1544/36: gen["generationsx"][1]
1544/37: gen["generationsx"][1].grad
1545/1: import ROOT
1545/2: data = ROOT.TFile("/home/kacper/Downloads/xy.root" , "READ")
1545/3: data
1545/4: data.ls
1545/5: data.ls()
1545/6: can = data.Get("Canvas_1")
1545/7: can
1545/8:
for el in can:
    print(el)
1545/9: can.ls()
1545/10: can.Get("TH2D")
1545/11: can.Get("OBJ")
1545/12: can.ls()
1546/1: import numpy as np
1546/2: import matplotlib.pyplot as plt
1546/3: m = np.load("xynew.npy")
1546/4: m.shape
1546/5: m.dtype
1546/6: m[1]
1546/7: x = np.array(list(map(lambda x: x[0], m)))
1546/8: y = np.array(list(map(lambda x: x[1], m)))
1546/9: plt.hist2d(x , y)
1546/10: plt.show()
1546/11:
with open("/home/kacper/Downloads/xynew_t", "w") as f:
    for i in range(m.shape[0]):
        f.write(str(x[i]) + " " + str(y[i]) + "\n")
1547/1: import torch
1547/2: torch.tensor([0.0 , 1.0 , 2.0 , 3.0])
1547/3: a = torch.tensor([0.0 , 1.0 , 2.0 , 3.0])
1547/4: a
1547/5: a[2;2]
1547/6: a[2:2]
1547/7: a[2:2+1]
1547/8: a[0:0+1]
1547/9: a.shape
1547/10: a[3:4]
1548/1: import torch
1548/2: a = torch.tensor([0.0, 1.0, 2.0, 3.0])
1548/3:
for el in a:
    print(el)
1548/4:
for el in a:
    print(el.item())
1549/1: import torch
1549/2: a = torch.tensor([0.0, 1.0, 2.0, 3.0])
1549/3: a.shape
1549/4:
for i in a.shape[0]:
    print(i)
1549/5: a.shape
1549/6: a.shape[0]
1549/7:
for i in range(a.shape[0]):
    print(i)
1549/8:
for i in range(a.shape[0]):
    print(a.shape[0] - i)
1549/9:
for i in range(a.shape[0]):
    print(a.shape[0] - i - 1)
1550/1: import csv
1551/1: import csv
1552/1: ls
1552/2: import csv
1552/3: import matplotlib.pyplot as plt
1552/4: names = []
1552/5: values = []
1552/6:
with open("./silkawyniki.csv") csv_file:
    csv_reader = csv.reader(csv_file , delimiter = ",")
1552/7:
with open("./silkawyniki.csv") as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=",")
    for name, value in csv_reader:
        names.append(name)
        values.append(value)
1552/8: names
1552/9: values
1552/10: plt.xlabel("names")
1552/11: plt.ylabel("dźwignięte [kg]")
1552/12: plt.title("konkurs dźwigania sztangi")
1552/13: plt.bar(names , values)
1552/14: plt.show()
1552/15: names = []
1552/16: values = []
1552/17:
with open("./silkawyniki.csv") as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=",")
    for name, value in csv_reader:
        names.append(name)
        values.append(float(value))
1552/18: names
1552/19: values
1552/20: plt.xlabel("names")
1552/21: plt.ylabel("dźwignięte [kg]")
1552/22: plt.title("konkurs dźwigania sztangi")
1552/23: plt.bar(names, values)
1552/24: plt.show()
1552/25: plt.bar(names, values)
1552/26: plt.show()
1552/27: x = []
1552/28: y = []
1552/29:
with open("./jakasfunkcja.csv") as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=",")
    for xval, yval in csv_reader:
        x.append(float(xval))
        y.append(float(yval))
1552/30: x
1552/31: y
1552/32: plt.xlabel("x")
1552/33: plt.ylabel("wartość funkcji")
1552/34: plt.title("jaka to funkcja?")
1552/35: plt.plot(x, y)
1552/36: plt.show()
1552/37: import numpy as np
1552/38: xnp = np.array(x)
1552/39: xnp
1552/40: ynp = np.array(y)
1552/41: ynp
1552/42: ynp1 = xnp * ynp
1552/43: plt.xlabel("x")
1552/44: plt.ylabel("wartość funkcji")
1552/45: plt.title("jaka to funkcja?")
1552/46: plt.plt(xnp, ynp1)
1552/47: plt.plot(xnp, ynp1)
1552/48: plt.show()
1552/49:
def fun(x, a, b, c):
    return a * x * np.sin(x * b) + c
1552/50: from scipy.optimize import curve_fit
1552/51: popt , pcov = curve_fit(fun , xnp , ynp1)
1552/52: print(popt)
1552/53: print(pcov)
1552/54: np.sqrt(np.diag(pcov))
1552/55: plt.xlabel("x")
1552/56: plt.ylabel("wartość funkcji")
1552/57: plt.plot(xnp, ynp1, "b-")
1552/58: plt.plot(xnp, fun(xnp, *popt), "r-")
1552/59: plt.show()
1552/60: plt.plot(xnp, ynp1, "b-", label="data")
1552/61: plt.plot(xnp, fun(xnp, *popt), "r-", label="fit")
1552/62: plt.legend()
1552/63: plt.show()
1553/1: import numpy as np
1553/2: from scipy.mixture import GaussianMixture
1553/3: from sklearn.mixture import GaussianMixture
1553/4: x = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])
1553/5: gm = GaussianMixture(n_components=2, random_state=0).fit(X)
1555/1: import torch
1555/2: torch.randint(low = 0 , high = 10)
1555/3: torch.randint(low = 0 , high = 10 , size = 0)
1555/4: torch.randint(low = 0 , high = 10 , size = 1)
1555/5: torch.randint(0 , 10 , 3)
1555/6: torch.randint(0 , 10 , (3))
1555/7: torch.randint(0 , 10 , (1,))
1555/8: torch.randint(0 , 10 , (1))
1555/9: torch.randint(0 , 10 , 1)
1555/10: torch.randint(0 , 10 , ())
1555/11: torch.randint(0, 10, ()).item()
1555/12: torch.randint(0, 10, ()).item()
1555/13: torch.randint(0, 1, ()).item()
1555/14: torch.randint(0, 1, ()).item()
1555/15: torch.randint(0, 1, ()).item()
1555/16: torch.randint(0, 1, ()).item()
1555/17: torch.randint(0, 1, ()).item()
1555/18: torch.randint(0, 1, ()).item()
1555/19: torch.randint(0, 1, ()).item()
1555/20: torch.randint(0, 1, ()).item()
1555/21: torch.randint(0, 1, ()).item()
1555/22: torch.randint(0, 1, ()).item()
1555/23: torch.randint(0, 1, ()).item()
1555/24: torch.randint(0, 2, ()).item()
1555/25: torch.randint(0, 2, ()).item()
1555/26: torch.randint(0, 2, ()).item()
1555/27: torch.randint(0, 2, ()).item()
1555/28: torch.randint(0, 2, ()).item()
1555/29: torch.randint(0, 2, ()).item()
1555/30: torch.randint(0, 2, ()).item()
1555/31: torch.randint(0, 2, ()).item()
1555/32: torch.randint(0, 2, ()).item()
1555/33: torch.randint(0, 2, ()).item()
1555/34: torch.randint(0, 2, ()).item()
1555/35: torch.randint(0, 2, ()).item()
1555/36: torch.randint(0, 2, ()).item()
1555/37: from scipy.stats import uniform
1555/38: uniform.rvs()
1555/39: uniform.rvs(loc = -0.1 , size = 0.2)
1555/40: ?uniform
1555/41: uniform.rvs(loc = -0.1 , scale = 0.2)
1555/42: uniform.rvs(loc=-0.1, scale=0.2)
1555/43: uniform.rvs(loc=-0.1, scale=0.2)
1555/44: uniform.rvs(loc=-0.1, scale=0.2)
1555/45: uniform.rvs(loc=-0.1, scale=0.2)
1555/46: uniform.rvs(loc=-0.1, scale=0.2)
1555/47: uniform.rvs(loc=-0.1, scale=0.2)
1555/48: uniform.rvs(loc=-0.1, scale=0.2)
1555/49: uniform.rvs(loc=-0.1, scale=0.2)
1555/50: uniform.rvs(loc=-0.1, scale=0.2)
1555/51: uniform.rvs(loc=-0.1, scale=0.2)
1555/52: uniform.rvs(loc=-0.1, scale=0.2)
1555/53: uniform.rvs(loc=-0.1, scale=0.2)
1555/54: uniform.rvs(loc=-0.1, scale=0.2)
1555/55: uniform.rvs(loc=-0.1, scale=0.2)
1555/56: uniform.rvs(loc=-0.1, scale=0.2)
1555/57: uniform.rvs(loc=-0.1, scale=0.2)
1555/58: uniform.rvs(loc=-0.1, scale=0.2)
1555/59: uniform.rvs(loc=-0.1, scale=0.2)
1555/60: uniform.rvs(loc=-0.1, scale=0.2)
1555/61: uniform.rvs(loc=-0.1, scale=0.2)
1555/62: uniform.rvs(loc=-0.1, scale=0.2)
1555/63: torch.exp(1.1)
1555/64: torch.exp(torch.tensor(1.1))
1556/1: from scipy.stats import norm
1556/2: norm.rvs(size = 10)
1556/3: import torch
1556/4: ?torch.rand
1556/5: torch.rand(3)
1556/6: torch.rand(3)
1555/65: import numpy as np
1555/66: np.exp(0.7048 - 1.1415)
1555/67: np.exp(0.0048 - 1.1415)
1557/1: import numpy as np
1557/2: xy = np.load("./xyper.npy")
1557/3: xy.shape
1557/4: xy[0]
1557/5: xy[0].dtype
1557/6: 5000000 * 2.0 / 50.0
1558/1: import numpy as np
1558/2: np.ones(10)
1558/3: np.ones(10)[1:10]
1558/4: np.ones(10)[0:10]
1558/5: np.ones(10)[0:11]
1558/6: np.ones(10).shape()
1558/7: np.ones(10).shape
1558/8: np.ones(10)[0 : 10].shape
1558/9: np.ones(10)[0 : 112].shape
1559/1: import numpy as np
1559/2: a = np.ones(10)
1559/3: a[0:9].shape
1559/4: a[0:10].shape
1560/1: import numpy as np
1560/2: from scipy.stats import cauchy, uniform
1560/3: import matplotlib.pyplot as plt
1560/4: n = 10000
1560/5: a, b = 0.5, 1.5
1560/6: data = cauchy.rvs(size = n , scale = b , loc = a)
1560/7: data
1560/8: type(data)
1560/9: data.shape
1560/10:
def mhLog(nmh, data, da=0.05, db=0.05, a=1.0, b=1.0):
    tracea, traceb = np.zeros(nmh + 1), np.zeros(nmh + 1)
    tracea[0] = a
    traceb[0] = b
1560/11:
def mhLog(nmh, data, da=0.05, db=0.05, a=1.0, b=1.0):
    tracea, traceb = np.zeros(nmh + 1), np.zeros(nmh + 1)
    tracea[0] = a
    traceb[0] = b
    accepted = 0.0
    logp = np.sum(cauchy.logpdf(data, loc=a, scale=b))
    for it in range(nmh):
        newa = a + uniform.rvs(loc=-da, scale=2.0 * da)
        newb = b + uniform.rvs(loc=-db, scale=2.0 * db)
        newlogp = np.sum(cauchy.logpdf(data, loc=newa, scale=newb))
        acc = min(1.0, np.exp(newlogp - logp))
        if uniform.rvs(loc=0.0, scale=1.0) < acc:
            a = newa
            b = newb
            logp = newlogp
            accepted += 1
        tracea[it + 1] = a
        traceb[it + 1] = b
1560/12:
def mhLog(nmh, data, da=0.05, db=0.05, a=1.0, b=1.0):
    tracea, traceb = np.zeros(nmh + 1), np.zeros(nmh + 1)
    tracea[0] = a
    traceb[0] = b
    accepted = 0.0
    logp = np.sum(cauchy.logpdf(data, loc=a, scale=b))
    for it in range(nmh):
        newa = a + uniform.rvs(loc=-da, scale=2.0 * da)
        newb = b + uniform.rvs(loc=-db, scale=2.0 * db)
        newlogp = np.sum(cauchy.logpdf(data, loc=newa, scale=newb))
        acc = min(1.0, np.exp(newlogp - logp))
        if uniform.rvs(loc=0.0, scale=1.0) < acc:
            a = newa
            b = newb
            logp = newlogp
            accepted += 1
        tracea[it + 1] = a
        traceb[it + 1] = b
    print("fraction accepted : ", accepted / nmh)
    return tracea, traceb
1560/13: nmh = 10000
1560/14: tracea, traceb = mhLog(nmh, data, a=1.0, b=1.0)
1560/15: plt.plot(tracea, label="a")
1560/16: plt.plot(traceb, label="b")
1560/17: plt.legend()
1560/18: plt.show()
1560/19: tm = 5000
1560/20: plt.hist(tracea[tm:], label="a")
1560/21: plt.hist(traceb[tm:], label="b")
1560/22: plt.legend()
1560/23: plt.show()
1561/1: import torch
1561/2: torch.zeros(4)
1561/3: torch.zeros(4).shape
1561/4: torch.zeros(4)[3:10]
1561/5: torch.zeros(4)[4:10]
1562/1: import torch
1562/2: n = 5
1562/3: torch.linspace(0.0 , (n - 1) * (1 / n) , n)
1562/4: (0.5 / n) + torch.linspace(0.0 , (n - 1) * (1 / n) , n)
1563/1: import torch
1563/2: maxp = 5
1563/3:
x = (
    torch.linspace(0.0, (maxp - 1) * (1.0 / maxp), maxp, dtype=dtype, device=device)
    .repeat(maxp)
    .reshape((maxp, maxp))
)
1563/4:
x = (
    torch.linspace(0.0, (maxp - 1) * (1.0 / maxp), maxp)
    .repeat(maxp)
    .reshape((maxp, maxp))
)
1563/5: x
1563/6: maxp = 3
1563/7:
x = (
    torch.linspace(0.0, (maxp - 1) * (1.0 / maxp), maxp)
    .repeat(maxp)
    .reshape((maxp, maxp))
)
1563/8: x
1563/9:
y = (
    torch.linspace(0.0, (maxp - 1) * (1.0 / maxp), maxp)
    .repeat_interleave(maxp)
    .reshape((maxp, maxp))
)
1563/10: y
1563/11: xy = torch.tensor([[1, 2], [3, 4]])
1563/12: xy
1563/13: x = xy[: , 0]
1563/14: y = xy[: , 1]
1563/15: x
1563/16: y
1563/17: xy
1563/18:
x = (
    torch.linspace(0.0, (maxp - 1) * (1.0 / maxp), maxp)
    .repeat(maxp)
    .reshape((maxp, maxp))
)
1563/19:
mx = (
    torch.linspace(0.0, (maxp - 1) * (1.0 / maxp), maxp)
    .repeat(maxp)
    .reshape((maxp, maxp))
)
1563/20:
my = (
    torch.linspace(0.0, (maxp - 1) * (1.0 / maxp), maxp)
    .repeat_interleave(maxp)
    .reshape((maxp, maxp))
)
1563/21: mx
1563/22: my
1563/23: xy
1563/24: x = xy[:, 0]
1563/25: y = xy[:, 1]
1563/26: x
1563/27: y
1563/28: mx
1563/29: mx - x[: , None , None]
1563/30: x
1563/31: px = torch.tensor([0.0 , 1.0 , 2.0])
1563/32: x[:, None] - px
1563/33: (x[:, None] - px).shape
1563/34: torch.tensor([100 , 200 , 300]) * (x[:, None] - px)
1563/35: torch.sum(torch.tensor([100 , 200 , 300]) * (x[:, None] - px) , 1)
1565/1: import pymc as pm
1566/1: import pymc as pm
1566/2: pm.__version__
1566/3: from scipy.stats import cauchy, uniform
1566/4: a, b = 0.5, 1.5
1566/5: n = 100
1566/6: observed = cauchy.rvs(size=n, loc=a, scale=b)
1566/7: m = pm.Model()
1566/8:
with m:
    am = pm.Normal("am", mu=0.0, sigma=10.0)
    bm = pm.HalfNormal("bm", sigma=10.0)
    observedm = pm.Cauchy("observedm", alpha=am, beta=bm, observed=observed)
    idata = pm.sample()
1566/9: idata
1566/10: idata.posterior
1566/11: idata.posterior["am"]
1566/12: import arviz as az
1566/13: az.plot_trace(idata)
1566/14: plt.show()
1566/15: az.show()
1566/16: az.plot_trace(idata)
1566/17: import matplotlib.pyplot as plt
1566/18: plt.show()
1566/19: idata
1566/20: idata.posterior["am"]
1566/21: aamm = idata.posterior["am"]
1566/22: ?aamm.sel
1566/23: ?aamm.sel
1566/24: aamm.sel(draw = slice(0 , 4))
1566/25: m = pm.Model()
1566/26:
with m:
    am = pm.Normal("am", mu=0.0, sigma=10.0)
    bm = pm.HalfNormal("bm", sigma=10.0)
    observedm = pm.Cauchy("observedm", alpha=am, beta=bm, observed=observed)
    idata = pm.sample(10000)
1566/27: az.plot_trace(idata)
1566/28: plt.show()
1566/29: a, b = 0.5, 1.5
1566/30: n = 10000
1566/31: observed = cauchy.rvs(size=n, loc=a, scale=b)
1566/32: m = pm.Model()
1566/33:
with m:
    am = pm.Normal("am", mu=0.0, sigma=10.0)
    bm = pm.HalfNormal("bm", sigma=10.0)
    observedm = pm.Cauchy("observedm", alpha=am, beta=bm, observed=observed)
    idata = pm.sample(10000)
1566/34: az.plot_trace(idata)
1566/35: plt.show()
1566/36: m = pm.Model()
1566/37:
with m:
    am = pm.Normal("am", mu=0.0, sigma=10.0)
    bm = pm.HalfNormal("bm", sigma=10.0)
    observedm = pm.Cauchy("observedm", alpha=am, beta=bm, observed=observed)
1566/38: ?pm.sample
1566/39: m = pm.Model()
1566/40:
with m:
    am = pm.Normal("am", mu=0.0, sigma=10.0)
    bm = pm.HalfNormal("bm", sigma=10.0)
    observedm = pm.Cauchy("observedm", alpha=am, beta=bm, observed=observed)
    idata = pm.sample(10000, chains=8)
1566/41: az.summary()
1566/42: az.summary(idata)
1566/43: ?az.summary
1566/44: az.plot_trace(idata)
1566/45: plt.show()
1566/46: n = 100
1566/47: observed = cauchy.rvs(size=n, loc=a, scale=b)
1566/48: m = pm.Model()
1566/49:
with m:
    am = pm.Normal("am", mu=0.0, sigma=10.0)
    bm = pm.HalfNormal("bm", sigma=10.0)
    observedm = pm.Cauchy("observedm", alpha=am, beta=bm, observed=observed)
    idata = pm.sample(10000, chains=8)
1566/50: az.summary(idata)
1566/51: az.plot_trace(idata)
1566/52: plt.show()
1567/1: import matplotlib.pyplot as plt
1567/2: import pymc as pm
1567/3: import arviz as az
1567/4: from scipy.stats import cauchy
1567/5: a, b = 0.5, 1.5
1567/6: n = 10000
1567/7: m = pm.Model()
1567/8: observed = cauchy.rvs(size=n, loc=a, scale=b)
1567/9: m = pm.Model()
1567/10:
with m:
    am = pm.Normal("am", mu=0.0, sigma=10.0)
    bm = pm.HalfNormal("bm", sigma=10.0)
    observedm = pm.Cauchy("observedm", alpha=am, beta=bm, observed=observed)
    idata = pm.sample(10000, chains=8)
1567/11: az.plot_trace(idata)
1567/12: plt.show()
1567/13: az.summary(idata)
1567/14: n = 10
1567/15: m = pm.Model()
1567/16:
with m:
    am = pm.Normal("am", mu=0.0, sigma=10.0)
    bm = pm.HalfNormal("bm", sigma=10.0)
    observedm = pm.Cauchy("observedm", alpha=am, beta=bm, observed=observed)
    idata = pm.sample(10000, chains=8)
1567/17: az.summary(idata)
1567/18: az.plot_trace(idata)
1567/19: plt.show()
1567/20: n = 10
1567/21: observed = cauchy.rvs(size=n, loc=a, scale=b)
1567/22: m = pm.Model()
1567/23:
with m:
    am = pm.Normal("am", mu=0.0, sigma=10.0)
    bm = pm.HalfNormal("bm", sigma=10.0)
    observedm = pm.Cauchy("observedm", alpha=am, beta=bm, observed=observed)
    idata = pm.sample(10000, chains=8)
1567/24: az.summary(idata)
1568/1: import matplotlib as plt
1568/2: import pymc as pm
1568/3: import arviz as az
1568/4: from scipy.stats import cauchy
1568/5: a, b = 0.5, 1.5
1568/6: n = 10000
1568/7: observed = cauchy.rvs(size=n, loc=a, scale=b)
1568/8: plt.hist(observed)
1568/9: import matplotlib as plt
1568/10: plt.hist
1569/1: import matplotlib.pyplot as plt
1569/2: plt.hist
1568/11: import matplotlib.pyplot as plt
1568/12: plt.hist
1568/13: plt.hist(observed)
1568/14: plt.show()
1568/15: observed
1568/16: m = pm.Model()
1568/17:
with m:
    am = pm.Normal("am", mu=0.0, sigma=10.0)
    bm = pm.HalfNormal("bm", sigma=10.0)
    observedm = pm.Cauchy("observedm", alpha=am, beta=bm, observed=observed)
    idata = pm.sample(10000, chains=8)
1567/25: az.summary(idata)
1568/18: az.plot_trace(idata)
1568/19: plt.show()
1568/20: az.summary(idata)
1568/21: n = 100
1568/22: observed = cauchy.rvs(size=n, loc=a, scale=b)
1568/23: m = pm.Model()
1568/24:
with m:
    am = pm.Normal("am", mu=0.0, sigma=10.0)
    bm = pm.HalfNormal("bm", sigma=10.0)
    observedm = pm.Cauchy("observedm", alpha=am, beta=bm, observed=observed)
    idata = pm.sample(10000, chains=8)
1568/25: az.plot_trace(idata)
1568/26: plt.show()
1568/27: n = 10
1568/28: observed = cauchy.rvs(size=n, loc=a, scale=b)
1568/29: m = pm.Model()
1568/30:
with m:
    am = pm.Normal("am", mu=0.0, sigma=10.0)
    bm = pm.HalfNormal("bm", sigma=10.0)
    observedm = pm.Cauchy("observedm", alpha=am, beta=bm, observed=observed)
    idata = pm.sample(10000, chains=8)
1568/31: az.summary(idata)
1570/1: import numpy as np
1570/2: geometry = np.load("./geometry.npy")
1570/3: geometry[0]
1570/4: geometry[1]
1570/5: geometry[2]
1570/6: geometry[3]
1570/7: geometry[4]
1570/8: geometryId = np.load("geometry_id.npy")
1570/9: geometryId[4]
1570/10: eventId, particleId = geometryId[4]
1570/11: valid , hrad , hx , hy , hnu , vx , vy , vz = geometry[4]
1570/12: hits = np.load("./hits.npy")
1570/13: hitsId = np.load("./hits_id.npy")
1570/14: where = hitsId[: , 0] == eventId and hitsId[: , 1] == particleId
1570/15: where = (hitsId[:, 0] == eventId) * (hitsId[:, 1] == particleId)
1570/16: where
1570/17: xyz = hits[where]
1570/18: xyz
1570/19: where = hitsId[:, 0] == eventId
1570/20: where
1570/21: ?np.all
1570/22: where = hitsId[:, 1] == particleId
1570/23: where
1570/24: hits[where]
1570/25: hits[where].shape()
1570/26: hits[where].shape
1570/27: eventId
1570/28: where = eventId[: , 0] == eventId
1570/29: eventId
1570/30: where = hitsId[:, 0] == eventId
1570/31: where
1570/32: hits[where].shape
1570/33: where = (hitsId[:, 0] == eventId) * (hitsId[:, 1] == particleId)
1570/34: hits[where].shape
1570/35: hits[where]
1570/36: geometry[5]
1570/37: geometry[5]
1570/38: eventId, particleId = geometryId[5]
1570/39: where = (hitsId[:, 0] == eventId) * (hitsId[:, 1] == particleId)
1570/40: hits[where]
1570/41: hitsId = np.load("./hits_id.npy")
1570/42: hits = np.load("./hits.npy")
1570/43: hitsId[5]
1570/44: geometryId[5]
1570/45: hitsId[:, 2] == 4503599728033792
1570/46: hitsId[:, 1] == 4503599728033792
1570/47: np.total(hitsId[:, 1] == 4503599728033792)
1570/48: np.sum(hitsId[:, 1] == 4503599728033792)
1570/49: where = hitsId[:, 1] == 4503599728033792
1570/50: hitsId[where]
1570/51:
for e in hitsId[where]:
    print(e)
1571/1: from unraveltools import *
1571/2: data = loadData("./")
1571/3: t = extractRandomChargedTrack(eventId = 0)
1571/4: t = extractRandomChargedTrack(data , eventId = 0)
1571/5: t
1571/6: t = extractRandomChargedTrack(data, eventId=0)
1571/7: t = extractRandomChargedTrack(data, eventId=0)
1571/8: t = extractRandomChargedTrack(data, eventId=1)
1571/9: t
1571/10: t = extractRandomChargedTrack(data)
1571/11: t
1571/12: data
1571/13: data["geometryIds"]
1571/14: data["hitIds"]
1571/15: data["hitIds"]
1571/16: data["geometryIds"]
1571/17: data["geometryIds"][: , 0]
1571/18: np.min(data["geometryIds"][:, 0])
1571/19: np.max(data["geometryIds"][:, 0])
1571/20: np.min(data["hitIds"][:, 0])
1571/21: np.max(data["hitIds"][:, 0])
1571/22: extractRandomChargedTrack(data)
1571/23: extractRandomChargedTrack(data)
1571/24: extractRandomChargedTrack(data)
1571/25: extractRandomChargedTrack(data)
1571/26: extractRandomChargedTrack(data)
1571/27: extractRandomChargedTrack(data)
1571/28: extractRandomChargedTrack(data)
1571/29: extractRandomChargedTrack(data)
1571/30: extractRandomChargedTrack(data)
1571/31: extractRandomChargedTrack(data)
1571/32: extractRandomChargedTrack(data)
1572/1: from unraveltools import *
1572/2: import numpy as np
1572/3: data = loadData("./")
1572/4: extractRandomChargedTrack(data)
1572/5: extractRandomChargedTrack(data)
1572/6: %autoreload 2
1572/7: %load_ext autoreload
1572/8: %autoreload 2
1572/9: from unraveltools import *
1572/10: extractRandomChargedTrack(data)
1572/11: extractRandomChargedTrack(data)
1572/12: extractRandomChargedTrack(data)
1572/13: extractRandomChargedTrack(data)
1572/14: extractRandomChargedTrack(data)
1572/15: extractRandomChargedTrack(data)
1572/16: extractRandomChargedTrack(data)
1572/17: extractRandomChargedTrack(data)
1572/18: extractRandomChargedTrack(data)
1572/19: extractRandomChargedTrack(data)
1572/20: extractRandomChargedTrack(data)
1572/21: t = extractRandomChargedTrack(data)
1572/22: t = extractRandomChargedTrack(data)
1572/23:
for i in range(1000):
    t = extractRandomChargedTrack(data)
73
1572/24:
for i in range(1000):
    t = extractRandomChargedTrack(data)
    print("   ", len(t["hits"]))
1572/25:
for i in range(1000):
    t = extractRandomChargedTrack(data, eventId=0)
    print("   ", len(t["hits"]))
1573/1: import PyQt5.QtCore
1574/1: import pyqt
1574/2: import PyQt5
1575/1: from PyQt5 import QtGui
1575/2: from PyQt5.QtWidgets import QApplication, QMainWindow
1575/3: import sys
1575/4:
class Window(QMainWindow):
    def __init__(self):
        super().__init__()
        self.title = "PyQt5 Drawing Tutorial"
        self.top = 150
        self.left = 150
        self.width = 500
        self.height = 500
        self.InitWindow()

    def InitWindow(self):
        self.setWindowTitle(self.title)
        self.setGeometry(self.top, self.left, self.width, self.height)
        self.show()
1575/5: App = QApplication(sys.argv)
1575/6: window = Window()
1575/7: sys.exit(App.exec())
1576/1: import numpy as np
1576/2: arr = np.array([[1 , 2] , [3 , 4] , [5 , 6]])
1576/3: arr
1576/4: where = arr >= 3
1576/5: where
1576/6: indexes = np.argwhere(where)
1576/7: indexes
1576/8: arr
1576/9: arr[indexes]
1576/10: arr
1576/11: indexes
1576/12: arr[indexes[0]]
1576/13: arr[arr >= 3]
1576/14: arr
1576/15: mask = np.array([True , False ,True])
1576/16: arr[mask]
1576/17: mask
1576/18: arr[mask]
1577/1: silna(123)
1578/1: a = 123
1578/2: b = 123
1578/3: a == b
1578/4: a is b
1578/5: a = 123
1578/6: b = 100 + 23
1578/7: a == b
1578/8: a is b
1578/9: list(range(1, 3))
1581/1: n = 3
1581/2: x = 1
1581/3:
for i in range(1, n + 1):
    x = x * i
1581/4: print(x)
1578/10: input()
1582/1: search = (0.0, 100.0, 0.01)
1582/2: print(search)
1582/3: search
1582/4: search[0]
1582/5: search[1]
1582/6: search[2]
1582/7: search[0:]
1582/8: search[0:2]
1582/9: search
1582/10: search[2]
1582/11: search[1]
1582/12: search[0]
1582/13: tstart, tend, tdelta = search
1582/14: tstart
1582/15: tend
1582/16: tdelta
1582/17: search = (0.0, 100.0, 1000)
1582/18: tstart, tend, tn = search
1582/19: tstart
1582/20: tend
1582/21: tn
1582/22: [1 , 2 , 3 , 4]
1582/23: [1, 2, 3, 4][1]
1582/24: myFirstList = [1 ,2 , 3 , 4]
1582/25: type(myFirstList)
1582/26: myFirstList[2]
1582/27:
def someFunction(temperature):
    return 2 * temperature
1582/28: [i for i in range(tn)]
1582/29: search = (0.0, 100.0, 100)
1582/30: tstart, tend, tn = search
1582/31: tm
1582/32: tn
1582/33: [i for i in range(tn)]
1582/34: [i*i for i in range(tn)]
1582/35:
def someFunction(temperature):
    return 2 * temperature
1582/36: [someFunction(i) for i in range(tn)]
1582/37: [someFunction(i) for i in range(tn)]
1582/38: [abs(someFunction(i)) for i in range(tn)]
1582/39: [abs(someFunction(i) - 42) for i in range(tn)]
1582/40: mySecondList = [2, 3, 1, 4, 1.1, 5.5]
1582/41: min(mySecondList)
1582/42: min([abs(someFunction(i) - 42) for i in range(tn)])
1582/43: min(mySecondList)
1582/44: mySecondList.index(1)
1582/45: mySecondList[2]
1582/46: myThirdList = [2 , 3 , 4 , 5 , 4 ,  3, 2 , 1 , 1 , 1, 1 ,2 ,3]
1582/47: min(myThirdList)
1582/48: myThirdList.index(1)
1584/1: a = [0 , 1 , 2 , 3 ,4]
1584/2: a.hash()
1584/3: (0, 1, 2, 3, 4).hash()
1584/4: hash((0 , 1 , 2 , 3 , 4))
1584/5: hash([0 , 1 , 2 , 3 , 4])
1584/6: hash("This is an example")
1585/1: [0 , 1 , 2 , 3]
1585/2: [0 , 1 , 2 , 3][0]
1585/3: [0 , 1 , 2 , 3][1]
1585/4: [0 , 1 , 2 , 3][-1]
1585/5: [0 , 1 , 2 , 3][-2]
1585/6: [0 , 1 , 2 , 3][0:2]
1585/7: a = [0 , 1 , 2 , 3 , 4]
1585/8: a = [i**2 for i in range(10)]
1585/9: A
1585/10: a
1585/11: a[0:4]
1585/12: a[:4]
1585/13: a[:4] + [4:7]
1585/14: a[:4] + a[4:7]
1585/15: a = [i for i in range(10)]
1585/16: a
1585/17: a[:4] + a[4:7]
1585/18: [1 , 2 , 3] == [3 , 2 , 1]
1585/19: [1 , 2 , 3] == [1 , 2 , 3]
1586/1: a = [1 , 2 ,3]
1586/2: b = [1 , 2 , 3]
1586/3: a == b
1586/4: a is b
1585/20: a = [1 , 2 , 3]
1585/21: b = [1 , 2 , 3]
1585/22: a == b
1585/23:
def fun(lista):
    print(lista + [123])
1585/24: fun(a)
1585/25: fun(b)
1585/26:
def fun(lista):
    result = lista + [123]
    print(result)
    return result
1585/27: fun(a)
1585/28: fun(b)
1585/29: fun(a) == fun(b)
1585/30: a
1585/31: id(a)
1585/32: hex(id(a))
1585/33: c = "Witam studentow kursu python dla poczatkujacych!"
1585/34: id(c)
1585/35: hex(id(c))
1585/36: a
1585/37: b
1585/38: a is b
1585/39: a == b
1585/40: mojaLista = [0 , 1 , 2 , 3 , 4]
1585/41: mojCiagZnakow = "01234"
1585/42: hash(mojCiagZnakow)
1585/43: hash(mojaLista)
1585/44: mojCiagZnakow
1585/45: mojCiagZnakow + "ala ma kota"
1585/46: a = mojCiagZnakow
1585/47: mojCiagZnakow = mojCiagZnakow + "ala ma kota"
1585/48: a
1585/49: mojCiagZnakow
1585/50: a is mojCiagZnakow
1585/51: id(a)
1585/52: id(mojCiagZnakow)
1585/53: mojaLista
1585/54: a = mojaLista
1585/55: id(a)
1585/56: id(mojaLista)
1585/57: a is mojaLista
1585/58: mojaLista[3] = 123
1585/59: mojaLista
1585/60: id(a)
1585/61: id(mojaLista)
1585/62: a is mojaLista
1585/63: a
1585/64: mojaLista
1585/65: a = [1 , 2 , 3 , 4 , 5]
1585/66: b = "12345"
1585/67: a = [0 , 1 , 2 , 3 , 4 , 5]
1585/68: b = "012345"
1585/69: b
1585/70: temp = b
1585/71: id(temp)
1585/72: id(b)
1585/73: temp is b
1586/5: "0123"[2] = 3
1585/74: b = b
1585/75: a = [0, 1, 2, 3, 4, 5]
1585/76: b = "012345"
1585/77: b
1585/78: temp = b
1585/79: id(b)
1585/80: id(temp)
1585/81: b is temp
1585/82: b = b + "AlaMaKota"
1585/83: b
1585/84: id(b)
1585/85: temp
1585/86: hash(b)
1585/87: hash(temp)
1585/88: b = "LitwoOjczyznoMoja"
1585/89: id(b)
1585/90: hash(b)
1585/91: a
1585/92: temp = a
1585/93: id(a)
1585/94: id(temp)
1585/95: a is temp
1585/96: temp is a
1585/97: a[4] = 123
1585/98: a
1585/99: id(a)
1585/100: id(temp)
1585/101: hash(temp)
1585/102: a = [0 , 1 , "AlaMaKota" , 5 , 123]
1585/103: id(a)
1585/104: a[2]
1585/105: id(a[2])
1585/106: a[2] += "Asa"
1585/107: a
1585/108: id(a)
1585/109: id(a[2])
1585/110: [0 , 1 , 2 , 3]
1585/111: "0123"
1585/112: "0123"[2]
1585/113: myFirstDictionary = {"kto" : "Ala" , "co" : "Ma" , "kogo" : "KotaAsa"}
1585/114: myFirstDictionary["kto"]
1585/115: myFirstDictionary[]
1585/116: myFirstDictionary["co"]
1585/117: myFirstDictionary["kogo"]
1585/118: myFirstDictionary["kogo"] = "PsaPluto"
1585/119: myFirstDictionary
1585/120: type(myFirstDictionary)
1585/121: type([0, 1, 2, 3])
1585/122: b
1585/123: type(b)
1585/124: myFirstTyple = (0 , 1 , 2 , 3 , 4)
1585/125: myFirstTuple = (0 , 1 , 2 , 3 , 4)
1585/126: myFirstTuple
1585/127: hash(myFirstTuple)
1585/128: mySecondDictionary = {(0 , 1) : 1 , (0 , 2) : 2 , (1 , 2) : 3}
1585/129: mySecondDictionary
1585/130: mySecondDictionary[(0 , 1)]
1585/131: (1 , 2 , 3)
1585/132: (1 , 2 , [4 , 5 , 6])
1585/133: hash((1, 2, 3))
1585/134: hash((1, 2, [4, 5, 6]))
1585/135: hash("AlaMaKota")
1585/136: hash("AlaMaKotb")
1585/137: hash((1, 2, 3))
1585/138: a = 1
1585/139: b = 2
1585/140: c = 3
1585/141: a , b , c = (1 , 2 , 3)
1585/142: a
1585/143: b
1585/144: c
1587/1: a
1587/2: b
1587/3: c
1587/4: a , b , c = (1 , 2, 3)
1587/5: a
1587/6: b
1587/7: c
1588/1: d = [i for i in range(123)]
1588/2: d
1588/3: a , b , c = (d , d , d)
1588/4: id(d)
1588/5: id(a)
1588/6: id(b)
1588/7: id(c)
1589/1: a, b, c = (1, 2, 3)
1589/2: id(a)
1589/3: id(b)
1589/4: id(c)
1590/1:
for i in range(10):
    print(i)
1590/2: con = True
1590/3:
i = 0
while con:
    print(i)
    i += 1
    if i == 10:
        con = False
1590/4: con = True
1590/5:
i = 0
while con:
    print(i)
    i += 1
    if i == 10:
        con = False
1591/1: r = input("Ile 1 + 1? ")
1591/2: r
1591/3: int(r) == 2
1593/1: pixels = [["x" for i in range(80)] for j in range(40)]
1593/2: pixels
1593/3: pixels = [["x" for i in range(8)] for j in range(4)]
1593/4: pixels
1593/5: import sys
1593/6:
def myPixel(i, j):
    sys.stdout.write("x")
    return x
1593/7: pixels = [[myPixel(i , j) for i in range(8)] for j in range(4)]
1593/8:
def myPixel(i, j):
    sys.stdout.write("x")
    return "x"
1593/9: pixels = [[myPixel(i, j) for i in range(8)] for j in range(4)]
1593/10:
def myPixel(i, j):
    if i == 7:
        sys.stdout.write("x\n")
    else:
        sys.stdout.write("x")
    return "x"
1593/11: pixels = [[myPixel(i, j) for i in range(8)] for j in range(4)]
1584/7: import os
1584/8: os.isFile
1584/9: os.path.isFile
1584/10: os.path.isfile
1594/1:
with open("mojPierwszyPlik", "w") as f:
    f.write(str(123) + "\n")
    f.write(str(1) + "\n")
1594/2:
with open("mojPierwszyPlik", "r") as f:
    line1 = f.readline()
    line2 = f.readline()
    print(line1)
    print(line2)
1594/3:
points = None
location = None
with open("mojPierwszyPlik", "r") as f:
    line1 = f.readline()
    line2 = f.readline()
    points = int(line1)
    location = int(line2)
1594/4: points
1594/5: location
1595/1: print(1 + 1)
1595/2:
jakasLiczba = 123
match jakasLiczba:
    case 123:
        print("Wartość wynosi 123!")
    case 321:
        print("Wartość wynosi 321!")
    case _:
        print("Wartość nie wynosi 123 i nie wynosi 321!")
1595/3: input("Proszę wcisnąć enter aby zakończyć program.")
1595/4:
for i in range(10):
    print(i)
1595/5:
lista = [1 , 3 , 2 , 5 , 7 , 3];
for element in lista:
    print(element)
1595/6:
for i in (2 , 4 , 2 , 5):
    print(i)
1595/7:
i = 0
while i < 10:
    print(i)
    i += 1
1595/8:
i = 0
while i < 10:
    print(i)
1597/1:
jakasLiczba = 123
match jakasLiczba:
    case 123:
        print("Wartość wynosi 123!")
    case 321:
        print("Wartość wynosi 321!")
    case _:
        print("Wartość nie wynosi 123 i nie wynosi 321!")
1597/2: input("Proszę wcisnąć enter aby zakończyć program.")
1597/3:
for i in range(10):
    print(i)
1597/4:
lista = [1 , 3 , 2 , 5 , 7 , 3];
for element in lista:
    print(element)
1597/5:
for i in (2 , 4 , 2 , 5):
    print(i)
1597/6:
i = 0
while i < 10:
    print(i)
    i += 1
1597/7:
#i = 0
#while i < 10:
#    print(i)
1597/8:
while True:
    pass
1598/1:
while True:
    pass
1597/9:
while True:
    pass
1597/10: import time
1597/11: time.time()
1597/12: ?time.time
1597/13: time.time()
1597/14: start = time.time()
1597/15: print(start)
1597/16: time.time() - start
1597/17: time.time() - start
1597/18: time.time() - start
1597/19: time.time() - start
1597/20: time.time() - start
1597/21:
for i in range(100):
    if(i > 50):
        break
    print(i)
1599/1: 20 % 100
1599/2: 20 % 2
1597/22:
for i in range(100):
    if(i > 50):
        break
    if(i % 2 == 0):
        continue
    print(i)
1597/23:
for i in range(100):
    if(i > 50):
        break
    if(not i % 2 == 0):
        continue
    print(i)
1597/24: import matplotlib.pyplot as plt
1597/25: x = [i/2.0 for i in rage(10)]
1597/26: x = [i/2.0 for i in range(10)]
1597/27: y = [(i / 2) + 5 for i in range(10)]
1597/28: x
1597/29: y
1597/30: plt.scatter(x , y)
1597/31:
def calculatePointsForLogisticMap(rmin , rmax , rstep , maxyears):
    pass
1597/32:
def calculatePointsForLogisticMap(rmin , rmax , rstep , maxyears , drawFunction = None):
    x = [1 , 2 , 3 , 4]
    y = [2 , 1 , 4 , 3]
    return (x , y)
1597/33: x , y = calculatePointsForLogisticMap(0.0 , 4.0 , 0.01 , 100)
1597/34: x
1597/35: y
1597/36: plt.scatter(x , y)
1597/37:
def calculatePointsForLogisticMap(rmin , rmax , rstep , maxyears , drawFunction = None):
    x = [1 , 2 , 3 , 4]
    y = [2 , 1 , 4 , 3]
    if(drawFunction is not None):
        drawFunction(x , y)
    return (x , y)
1597/38: x , y = calculatePointsForLogisticMap(0.0 , 4.0 , 0.01 , 100)
1597/39:
def calculatePointsForLogisticMap(rmin , rmax , rstep , maxyears , drawFunction = None):
    x = [1 , 2 , 3 , 4]
    y = [2 , 1 , 4 , 3]
    if(drawFunction is not None):
        drawFunction(x , y)
    return (x , y)
1597/40: x , y = calculatePointsForLogisticMap(0.0 , 4.0 , 0.01 , 100)
1597/41: plt.scatter(x , y)
1597/42:
def mojaFunkcjaRysujaca(x , y):
    plt.scatter(x , y)
1597/43: x , y = calculatePointsForLogisticMap(0.0 , 4.0 , 0.01 , 100 , drawFunction = mojaFunkcjaRysujaca)
1597/44: x , y = calculatePointsForLogisticMap(0.0 , 4.0 , 0.01 , 100 , drawFunction = lambda x , y : plt.scatter(x , y)))
1597/45: x , y = calculatePointsForLogisticMap(0.0 , 4.0 , 0.01 , 100)
1597/46: x , y = calculatePointsForLogisticMap(0.0 , 4.0 , 0.01 , 100 , drawFunction = lambda x , y : plt.scatter(x , y))
1597/47: x , y = calculatePointsForLogisticMap(0.0 , 4.0 , 0.01 , 100 , drawFunction = lambda x , y : plt.scatter(x , y)
1597/48: x , y = calculatePointsForLogisticMap(0.0 , 4.0 , 0.01 , 100 , drawFunction = lambda x , y : plt.scatter(x , y))
1599/3: type({})
1600/1: stack = []
1600/2: stack
1600/3: stack.append(1)
1600/4: stack
1600/5: stack.append(2)
1600/6: stack
1600/7: x = stack.pop()
1600/8: stack
1600/9: x
1600/10: y = stack.pop()
1600/11: stack
1600/12: y
1600/13: x
1600/14: y
1600/15: stack.append(x + y)
1600/16: stack
1600/17:
def plus(stack):
    x = stack.pop()
    y = stack.pop()
    stack.append(x + y)
    return stack
1600/18:
stack = []
while True:
    cmd = input()
    if cmd == "plus":
        stack = plus(stack)
    else:
        stack.append(float(cmd))
    print(stack)
1600/19:
def plus(stack):
    x = stack.pop()
    y = stack.pop()
    stack.append(x + y)
    return stack
1600/20:
def mul(stack):
    x = stack.pop()
    y = stack.pop()
    stack.append(x * y)
    return stack
1600/21:
stack = []
while True:
    cmd = input()
    if cmd == "+":
        stack = plus(stack)
    elif cmd == "*":
        stack = mul(stack)
    else:
        stack.append(float(cmd))
    print(stack)
1600/22: stack = []
1600/23: stack.append(1)
1600/24: stack.append(2)
1600/25: stack
1600/26: None
1600/27: stack.append(None)
1600/28: stack
1600/29: None in stack
1600/30: not None in stack
1600/31: import math
1600/32: math.sin(123.0)
1600/33: math.cos(0.0)
1600/34: functions = {"+" : plus , "*" : mul}
1600/35: functions["+"]
1600/36: functions["*"]
1600/37: functions["+"](1 , 2)
1600/38: stack = [1 , 2]
1600/39: functions["+"](stack)
1600/40: stack
1600/41: stack = [1, 2]
1600/42: functions["*"](stack)
1600/43: stack
1600/44: functions["*"](stack)
1600/45: cmd = "*"
1600/46: cmd in stack
1600/47: cmd in functions
1600/48: functions
1600/49: "+" is functions
1600/50: "+" in functions
1600/51: "*" in functions
1600/52: "123." in functions
1600/53: float(123.0)
1600/54: float("123.")
1600/55: float("lkdslskmflkdsm")
1600/56:
try:
    float("lskmldskmldskmflks")
except:
    print("Nie udało się!")
1600/57: float("lskmldskmldskmflks")
1600/58:
try:
    float("123.")
except:
    print("Nie udało się!")
1600/59:
try:
    x = float("123.")
    print(x + 1)
except:
    print("Nie udało się!")
1600/60:
try:
    x = float("kdsjkjdsnkjfdsnfd")
    print(x + 1)
except:
    print("Nie udało się!")
1600/61:
try:
    x = float("123")
    print(x + 1)
except:
    print("Nie udało się!")
1601/1: import SampleModule
1601/2: SampleModule.someImportantValue
1602/1: import SampleModule
1602/2: SampleModule.someImportantValue
1603/1: import SampleModule
1603/2: SampleModule.someImportantValue
1603/3: SampleModule.MulBy.classValue
1603/4: SampleModule.MulBy()
1603/5: sampleMulByObject = SampleModule.MulBy()
1603/6: type(sampleMulByObject)
1603/7: sampleMulByObject1 = SampleModule.MulBy()
1603/8: sampleMulByObject.classValue
1603/9: sampleMulByObject1.classValue
1603/10: SampleModule.MulBy.classValue
1604/1: import SampleModule
1604/2: a = SampleModule.MulBy(123)
1604/3: b = SampleModule.MulBy(31)
1604/4: b = SampleModule.MulBy(321)
1604/5: a.classValue
1604/6: b.classValue
1604/7: a.someObjectValue
1604/8: b.someObjectValue
1604/9: import SampleModule
1604/10: b = SampleModule.MulBy(321)
1604/11: from SampleModule import MulBy
1604/12: a = MulBy(123123)
1604/13: b = MulBy(321321)
1604/14: a.someObjectValue
1604/15: b.someObjectValue
1604/16: from SampleModule import *
1604/17: b = MulBy(321321)
1604/18: b = MulBy(321321)
1604/19: someImportantValue
1604/20: SampleModule.someImportantValue
1604/21: from SampleModule import *
1604/22: someImportantValue
1604/23: import SampleModule
1604/24: SampleModule.someImportantValue
1604/25:
def print(x):
    return "x = " + str(x)
1604/26: print(123)
1604/27: import SampleModule as sm
1604/28: sm.someImportantValue
1605/1: import sys
1605/2: sys.builtin_module_names
1605/3: sys.path
1606/1: import ampleModule
1607/1: import ampleModule
1607/2: import SampleModule
1608/1: import SampleModule
1609/1: import SampleModule as sm
1609/2: a = sm.MulBy(123)
1609/3: print(a)
1610/1: import SampleModule as sm
1610/2: a = sm.MulBy(123)
1610/3: a(10)
1611/1: import SampleModule as sm
1611/2: a = sm.MulBy(123)
1611/3: print(a)
1611/4: a(10)
1612/1: import SampleModule as sm
1612/2: a = sm.MulBy(123)
1612/3: print(a)
1612/4: a(10)
1613/1: import SampleModule as sm
1613/2: a = sm.MulBy(123)
1613/3: print(a)
1613/4: a(10)
1613/5: a.changeValue(321)
1613/6: print(a)
1613/7: a(10)
1614/1: import extra
1614/2: extra.foo
1614/3: extra.foo(123)
1614/4: extra.nuf(123)
1614/5: extra.__dict__
1614/6: exta.foo(123)
1614/7: extra.foo(123)
1614/8: extra.__dict__["foo"](123)
1615/1: functions = {}
1615/2: import extra
1615/3:
for f in extra:
    print(f)
1615/4:
for f in extra.__dict__:
    print(f)
1615/5:
for f in extra.__dict__:
    if not "_" in f:
        print(f)
1615/6: functions = {}
1615/7:
for f in extra.__dict__:
    if not "_" in f:
        functions.update({f: extra.__dict__[f]})
1615/8: functions
1615/9: extra.fun
1615/10: str(extra.fun)
1615/11: print(extra.fun)
1615/12: functions["fun"]
1615/13: functions["fun"]([1 , 2])
1615/14:
for f in extra.__dict__:
    print(f)
1615/15:
for i in range(100):
    print(i)
1616/1: import MyFirstIterator
1616/2: it = MyFirstIterator.MyFirstIterator()
1616/3: myiter = iter(it)
1616/4: next(myiter)
1616/5: next(myiter)
1616/6: next(myiter)
1616/7: next(myiter)
1616/8: next(myiter)
1616/9: next(myiter)
1616/10: next(myiter)
1616/11: next(myiter)
1616/12: next(myiter)
1616/13: next(myiter)
1616/14: next(myiter)
1616/15: next(myiter)
1616/16: next(myiter)
1616/17: next(myiter)
1616/18: next(myiter)
1616/19:
for i in MyFirstIterator.MyFirstIterator():
    print(i)
1617/1: import MyFirstIterator
1617/2:
for i in MyFirstIterator.MyFirstIterator(10):
    print(i)
1618/1: pwd
1619/1: [0 , 1 , 2 , 3]
1619/2: [0 , 1 , 2 , 3][0]
1619/3: [0 , 1 , 2 , 3][1]
1619/4: [0 , 1 , 2 , 3][-1]
1619/5: [0 , 1 , 2 , 3][2:3]
1619/6: [0 , 1 , 2 , 3][2:4]
1619/7:
for i in [0, 1, 2, 3]:
    print(i)
1619/8: a = [0 , 1 , 2 , 3]
1619/9: a.pop()
1619/10: a
1619/11: a.append(3)
1619/12: a
1619/13: ?del
1619/14: del a[2]
1619/15: a
1619/16: (0 , 1 , 2 , 3)
1619/17: {(0, 1): "tupel (0 , 1)", (0, 2): "tupel (0 , 2)"}
1619/18: slownik = {(0, 1): "tupel (0 , 1)", (0, 2): "tupel (0 , 2)"}
1619/19: slownik[(0 , 1)]
1619/20: slownik = {[0, 1]: "tupel (0 , 1)", [0, 2]: "tupel (0 , 2)"}
1619/21: (0 , 1 , 2 , 3)[1]
1619/22: (0 , 1 , 2 , 3)[1;;3]
1619/23: (0 , 1 , 2 , 3)[1:3]
1619/24:
for i in (0, 1, 2, 3):
    print(i)
1619/25: {1, 2, 2, 2, 3}
1619/26: set([1 , 2 , 2 , 2 , 3])
1619/27: set((1 , 2 , 2 , 2 , 3))
1619/28: zbior = {1 , 2 , 2 , 2 , 3}
1619/29: zbior
1619/30: zbior.pop()
1619/31: zbior
1619/32: zbior.add(1)
1619/33: zbior
1619/34: import json
1619/35: notes = [{"keywords" : ["important" , "todo"] , "text" : "Some important note"} , {"keywords" : ["fun" , "weekend"] , "text" : "Fun things to do this weekend"}]
1619/36: notes
1619/37: json.dumps(notes)
1619/38:
with open("mynotes.json", "w") as f:
    f.write(json.dumps(notes))
1619/39: cat mynotes.json
1619/40:
with open("mynotes.json", "r") as f:
    notesFromFile = json.loads(f.read())
1619/41: notes
1619/42: notesFromFile
1619/43: notesFromFile[0]
1619/44: notesFromFile[0]["keywords"]
1619/45: notesFromFile[0]["text"]
1619/46: json.dumps([{1: (2, 3), 2: "123"}])
1619/47: a = [{1: (2, 3), 2: "123"}]
1619/48: b = json.loads(json.dumps(a))
1619/49: a
1619/50: b
1619/51: a == b
1619/52: from notes import encode, decode
1619/53: encode("haslo", "Secret message.")
1619/54:
def myAdd(x, y):
    return x + y
1619/55:
def myAdder(x):
    def fun(y):
        return x + y

    return fun
1619/56: addThree = myAdder(3)
1619/57: addThree(123)
1619/58:
class myAddClass:
    def __init__(self, x):
        self.x = x

    def __call__(self, y):
        return self.x + y
1619/59: addThreeUsingClass = myAddClass(3)
1619/60: addThreeUsingClass(123)
1620/1: 1 % 3
1620/2: 2 % 3
1620/3: 3 % 3
1621/1: ord('s')
1621/2: ord('a')
1621/3: ord('A')
1619/61: ord(a)
1619/62: ord('a')
1619/63: ord('A')
1619/64: chr(65)
1619/65: 354 % 256
1619/66: 352 % 256
1622/1: from cipher import encode, decode
1622/2: encode("mojeTajneHalo", "Sekretna wiaomosc, tylko do odczytu przez własciwe osoby!")
1622/3: cyphertext = encode("mojeTajneHalo", "Sekretna wiaomosc, tylko do odczytu przez własciwe osoby!")
1622/4: decode("mojeTajneHalo" , cyphertext)
1622/5: decode("mojeTajneHalso" , cyphertext)
1622/6: decode("mojeTajneHalo" , cyphertext)
1622/7: encode("mojeTajneHaslo", "Sekretna wiaomosc, tylko do odczytu przez własciwe osoby!")
1622/8: cyphertext = encode("mojeTajneHaslo", "Sekretna wiaomosc, tylko do odczytu przez własciwe osoby!")
1622/9: decode("mojeTajneHaslo" , cyphertext)
1624/1: import numpy as np
1624/2: np.ones((1024 , 1024))
1624/3: rng = np.random.default_rng()
1624/4: a = rng.random((1024 , 1025))
1624/5: a = rng.random((1024 , 1024))
1624/6: b = rng.random((1024 , 1024))
1624/7: c = np.matmul(a , b)
1624/8: b = rng.random((2048 , 2048))
1624/9: a = rng.random((2048 , 2048))
1624/10: b = rng.random((2048, 2048))
1624/11: a = rng.random((2048, 2048))
1624/12: b = rng.random((2048, 2048))
1624/13: c = np.matmul(a, b)
1624/14: import os
1624/15: os.system("taskset -p 0xff %d" % os.getpid())
1624/16: a = rng.random((2048, 2048))
1624/17: b = rng.random((2048, 2048))
1624/18: c = np.matmul(a, b)
1625/1: import numpy as np
1625/2: np.show_config()
1626/1: import numpy as np
1626/2: a = rng.random((2048, 2048))
1626/3: rng = np.random.default_rng()
1626/4: a = rng.random((2048, 2048))
1626/5: b = rng.random((2048, 2048))
1626/6: c = np.matmul(a, b)
1626/7: import math
1626/8: math.fabs
1626/9: ?math.fabs
1627/1: import numpy as np
1627/2: rng = np.random.default_rng()
1627/3: a = rng.random((2048, 2048))
1627/4: b = rng.random((2048, 2048))
1627/5: c = np.matmul(a, b)
1627/6: rng.random()
1627/7: a = [[rng.random() for _ in range(64)] for _ in range(64)]
1627/8: b = [[rng.random() for _ in range(64)] for _ in range(64)]
1627/9: c = [[0.0 for _ in range(64)] for _ in range(64)]
1627/10:
for r in range(64):
    for c in range(64):
        for k in range(64):
            c[r][c] = c[r][c] + a[r][k] * b[k][r]
1627/11: a = [[rng.random() for _ in range(64)] for _ in range(64)]
1627/12: b = [[rng.random() for _ in range(64)] for _ in range(64)]
1627/13: ab = [[0.0 for _ in range(64)] for _ in range(64)]
1627/14:
for r in range(64):
    for c in range(64):
        for k in range(64):
            ab[r][c] = ab[r][c] + a[r][k] * b[k][r]
1627/15: a = [[rng.random() for _ in range(64)] for _ in range(128)]
1627/16: n = 128
1627/17: a = [[rng.random() for _ in range(64)] for _ in range(128)]
1627/18: a = [[rng.random() for _ in range(n)] for _ in range(n)]
1627/19: b = [[rng.random() for _ in range(n)] for _ in range(n)]
1627/20: n = 128
1627/21: a = [[rng.random() for _ in range(n)] for _ in range(n)]
1627/22: b = [[rng.random() for _ in range(n)] for _ in range(n)]
1627/23: ab = [[0.0 for _ in range(n)] for _ in range(n)]
1627/24:
for r in range(n):
    for c in range(n):
        for k in range(n):
            ab[r][c] = ab[r][c] + a[r][k] * b[k][r]
1627/25: n = 256
1627/26: ab = [[0.0 for _ in range(n)] for _ in range(n)]
1627/27: n = 256
1627/28: a = [[rng.random() for _ in range(n)] for _ in range(n)]
1627/29: b = [[rng.random() for _ in range(n)] for _ in range(n)]
1627/30: ab = [[0.0 for _ in range(n)] for _ in range(n)]
1627/31:
for r in range(n):
    for c in range(n):
        for k in range(n):
            ab[r][c] = ab[r][c] + a[r][k] * b[k][r]
1627/32: a = rng.random((2048, 2048))
1627/33: b = rng.random((2048, 2048))
1627/34: ab = np.matmul(a, b)
1627/35: n = 512
1627/36: a = [[rng.random() for _ in range(n)] for _ in range(n)]
1627/37: b = [[rng.random() for _ in range(n)] for _ in range(n)]
1627/38: ab = [[0.0 for _ in range(n)] for _ in range(n)]
1627/39:
for r in range(n):
    for c in range(n):
        for k in range(n):
            ab[r][c] = ab[r][c] + a[r][k] * b[k][r]
1627/40: import numpy as np
1628/1: import numpy as np
1628/2: a = np.array([[1, 2, 3], [4, 5, 6]])
1628/3: a
1628/4: a.shape
1628/5: [[1, "2", (3)], [4, 5, 6]]
1628/6: a = np.array([[1, "2", (3)], [4, 5, 6]])
1628/7: a
1628/8: a = np.array([[1, 2, 3], [4, 5, 6]])
1628/9: a
1628/10: a.dtype
1628/11: a
1628/12: apy = [[1, 2, 3], [4, 5, 6]]
1628/13: anp = np.array([[1, 2, 3], [4, 5, 6]])
1628/14: a = [[1, 2, 3], [4, 5, 6]]
1628/15: a + 1
1628/16: anp + 1
1628/17: anp
1628/18: np.sin(anp)
1628/19: np.sin(a)
1628/20: import math
1628/21: math.sin(a)
1628/22: math.sin(anp)
1628/23: anp = np.array([[1, 2, 3], [4, 5, 6]])
1628/24: bnp = np.array([[6, 5, 4], [3, 2, 1]])
1628/25: anp + bnp
1628/26: anp * bnp
1628/27: bnp = np.array([[6, 5, 4], [3, 2, 1], [12, 13, 14]])
1628/28: anp = np.array([[1, 2, 3], [4, 5, 6], [14, 13, 12]])
1628/29: abnp = np.matmul(anp , bnp)
1628/30: abnp
1628/31: rng = np.random.default_rng()
1628/32: ?rng.random
1628/33: rng.random((2 , 3) , dtype = np.int64)
1628/34: ?rng.random
1628/35: np.random.randint()
1628/36: np.random.randint(0, high=10, size=(2, 3))
1628/37: np.random.randint(0, high=10, size=(2, 3))
1628/38: np.random.randint(0, high=10, size=(2, 3))
1628/39: np.random.randint(0, high=10, size=(2, 3))
1628/40: np.random.randint(0, high=10, size=(2, 3))
1628/41: np.random.randint(0, high=10, size=(2, 3))
1628/42: np.random.randint(0, high=10, size=(2, 3))
1628/43: np.random.randint(0, high=10, size=(2, 3))
1628/44: np.random.randint(0, high=1, size=(2, 3))
1628/45: np.random.randint(0, high=1, size=(2, 3))
1628/46: np.random.randint(0, high=2, size=(2, 3))
1628/47: np.random.randint(0, high=2, size=(2, 3))
1628/48: np.random.randint(0, high=2, size=(2, 3))
1628/49: np.random.randint(0, high=2, size=(2, 3))
1628/50: np.random.randint(0, high=2, size=(4, 4))
1628/51: initialState = np.random.randint(0, high=2, size=(4, 4))
1628/52: initialState = np.random.randint(0, high=2, size=(4, 4))
1628/53: initialState
1628/54: initialState = np.array([[r * 10 + c for c in range(4)] for r in range(4)])
1628/55: initialState
1628/56: ?np.roll
1628/57: initialState.shape
1628/58: np.roll(a, 1, axis=0)
1628/59: np.roll(initialState, 1, axis=0)
1628/60: initialState = np.array([[r * 10 + c for c in range(4)] for r in range(4)])
1628/61: initialState
1628/62: np.roll(initialState, 1, axis=0)
1628/63: np.roll(initialState, -1, axis=0)
1628/64: np.roll(initialState, 1, axis=1)
1628/65: initialState
1628/66: np.roll(initialState, 1, axis=1)
1628/67: np.roll(np.roll(initialState, 1, axis=0), 1, axis=1)
1628/68: initialState
1628/69: np.roll(np.roll(initialState, 1, axis=0), 1, axis=1)
1628/70: initialState = np.random.randint(0, high=2, size=(4, 4))
1628/71: initialState
1628/72: np.roll(np.roll(initialState, 1, axis=0), 1, axis=1)
1628/73: initialState
1628/74: u = np.roll(initialState, -1, axis=0)
1628/75: d = np.roll(initialState, 1, axis=0)
1628/76: l = np.roll(initialState, -1, axis=1)
1628/77: r = np.roll(initialState, 1, axis=1)
1628/78: ur = np.roll(np.roll(initialState, -1, axis=0), -1, axis=1)
1628/79: dl = np.roll(np.roll(initialState, 1, axis=0), 1, axis=1)
1628/80: ul = np.roll(np.roll(initialState, -1, axis=0), 1, axis=1)
1628/81: dr = np.roll(np.roll(initialState, 1, axis=0), -1, axis=1)
1628/82: u
1628/83: d
1628/84: r
1628/85: liveNeightbours = u + d + l + r + ur + dl + ul + dr
1628/86: liveNeightbours
1628/87: initialState = np.random.randint(0, high=2, size=(4, 4))
1628/88: initialState
1628/89: initialState = np.random.randint(0, high=2, size=(4, 4))
1628/90: initialState
1628/91: u = np.roll(initialState, -1, axis=0)
1628/92: d = np.roll(initialState, 1, axis=0)
1628/93: l = np.roll(initialState, -1, axis=1)
1628/94: r = np.roll(initialState, 1, axis=1)
1628/95: ur = np.roll(np.roll(initialState, -1, axis=0), -1, axis=1)
1628/96: dl = np.roll(np.roll(initialState, 1, axis=0), 1, axis=1)
1628/97: ul = np.roll(np.roll(initialState, -1, axis=0), 1, axis=1)
1628/98: dr = np.roll(np.roll(initialState, 1, axis=0), -1, axis=1)
1628/99: liveNeightbours = u + d + l + r + ur + dl + ul + dr
1628/100: initialState
1628/101: liveNeightbours
1628/102: liveNeightbours == 2
1628/103: import matplotlib.pyplot as plt
1628/104: initialState
1628/105: ?plt.imshow
1628/106: plt.imshow(initialState)
1628/107: plt.show()
1628/108: ?plt.matshow
1628/109: plt.matshow(initialState)
1628/110: plt.show()
1628/111: plt.imshow(initialState)
1628/112: plt.show()
1628/113: plt.matshow(initialState)
1628/114: plt.show()
1628/115: import scipy
1628/116: from scipy import signal
1628/117: ?signal.convolve2d
1628/118:
class GOLState:
    def __init__(self, state):
        self.gamestate = np.copy(state)
1628/119: is = GOLState(initialState)
1628/120: iState = GOLState(initialState)
1628/121: iState
1628/122: iState.gamestate
1628/123:
class GOL:
    def __init__(self, state):
        self.gamestate = np.copy(state)

    def iterate():
        pass
1628/124: g = GOL(initialState)
1628/125: g.iterate()
1628/126:
class GOL:
    def __init__(self, state):
        self.gamestate = np.copy(state)

    def iterate(self):
        pass
1628/127: g = GOL(initialState)
1628/128: g.iterate()
1628/129:
class GOLState:
    def __init__(self, state):
        self.gamestate = np.copy(state)
1628/130: iState = GOLState(initialState)
1628/131: iState.gamestate
1628/132: iState.gamestate[1, 1] = 1
1628/133: iState.gamestate
1629/1: import numpy as np
1629/2: initialState = np.random.randint(0, high=2, size=(4, 4))
1629/3:
class GOLState:
    def __init__(self, state):
        self.gamestate = np.copy(state)
1629/4: iState = GOLState(initialState)
1629/5: iState.__dict__
1629/6: iState.gamestate
1629/7:
class GOLState:
    def __init__(self, state):
        self.__gamestate = np.copy(state)
1629/8: iState = GOLState(initialState)
1629/9: iState.__gamestate
1629/10: iState.__dict__
1629/11: iState._GOLState__gamestate
1629/12:
class GOLState:
    def __init__(self, state):
        self.__gamestate = np.copy(state)

    def __hash__(self):
        pass

    def __eq__(self, other):
        return True
1629/13: input("please enter the number of iterations:")
1629/14: i = input("please enter the number of iterations: ")
1629/15: i
1629/16: int(i)
1629/17:
try:
    i = input("please enter the number of iterations: ")
    y = int(i)
except:
    print("please try again")
1629/18: import numpy as np
1629/19: initialState = np.random.randint(0, high=2, size=(4, 4))
1629/20: initialState
1629/21: ?np.save
1629/22: np.save("/home/kacper/Pobrane/temp.npy" , initalState)
1629/23: ?np.save
1629/24: np.save("/home/kacper/Pobrane/temp.npy" , initialState)
1629/25: np.save("/home/kacper/Downloads/temp.npy" , initalState)
1629/26: np.save("/home/kacper/Downloads/temp.npy", initialState)
1629/27: recreatedState = np.load("/home/kacper/Downloads/temp.npy")
1629/28: recreatedState
1629/29:
try:
    pth = input("please enter path for saveing the state of the game: ")
    np.save(pth)
except:
    print("invalid path, please try again")
1629/30:
try:
    pth = input("please enter path for saveing the state of the game: ")
    np.save(pth)
except:
    print("invalid path, please try again")
    pass
1629/31:
try:
    pth = input("please enter path for saveing the state of the game: ")
    np.save(pth)
except:
    print("invalid path, please try again")
    pass
1629/32:
pth = input("please enter path for saveing the state of the game: ")
np.save(pth)
1629/33:
try:
    pth = input("please enter path for saveing the state of the game: ")
    np.save(pth, initialState)
except:
    print("invalid path, please try again")
    pass
1629/34:
try:
    pth = input("please enter path for saveing the state of the game: ")
    np.save(pth, initialState)
except:
    print("invalid path, please try again")
    pass
1630/1: import pygame
   1:
def fun(x):
    return x + 1
   2: fun
   3:
def functionTakesAFunction(f):
    return f
   4: newfunction = functionTakesAFunction(fun)
   5: fun(123)
   6: newfunction(123)
   7: fun
   8: newfunction
   9: fun is newfunction
  10: callsToAnnotatedFunction = 0
  11:
def countCalls(f):
    return f
  12:
def countCalls(f):
    callsToAnnotatedFunction += 1
    return f
  13: countedFun = countCalls(fun)
  14: callsToAnnotatedFunction = 0
1632/1: a = 123
1632/2:
def fun():
    a += 1
    return 0
1632/3: fun()
  15:
def countCalls(f):
    global callsToAnnotatedFunction
    callsToAnnotatedFunction += 1
    return f
  16: countedFun = countCalls(fun)
  17: countedFun is fun
  18: countedFun1 = countCalls(fun)
  19: callsToAnnotatedFunction
  20: countedFun1(123)
  21: countedFun1(124)
  22: callsToAnnotatedFunction
  23:
def countCalls(f):
    global callsToAnnotatedFunction

    def inner(x):
        callsToAnnotatedFunction += 1
        return f(x)

    return inner
  24: callsToAnnotatedFunction = 0
  25: f = countCalls(fun)
  26: callsToAnnotatedFunction
  27: f(123)
  28:
def countCalls(f):
    def inner(x):
        global callsToAnnotatedFunction
        callsToAnnotatedFunction += 1
        return f(x)

    return inner
  29: f = countCalls(fun)
  30: f(123)
  31: callsToAnnotatedFunction
  32: f(123)
  33: callsToAnnotatedFunction
  34: f(123)
  35:
def countCalls(f):
    def inner(x):
        global callsToAnnotatedFunction
        callsToAnnotatedFunction += 1
        return f(x)

    return inner
  36: callsToAnnotatedFunction = 0
  37: f = countCalls(fun)
  38: f(123)
  39: f(124)
  40: callsToAnnotatedFunction
  41: f in fun
  42: f is fun
  43:
def fun(x):
    return x + 1
  44:
@countCalls
def fun1(x):
    return x * x
  45:
def fun1(x):
    return x * x
  46: fun1 = countCalls(fun1)
  47:
@countCalls
def fun1(x):
    return x * x
  48: callsToAnnotatedFunction = 0
  49: fun1(123)
  50: fun2(321)
  51: fun1(321)
  52: fun1(12345)
  53: callsToAnnotatedFunction = 0
  54: fun1(123)
  55: fun1(321)
  56: fun1(12345)
  57: callsToAnnotatedFunction
  58:
class FunctionCounter:
    def __init__(self, f):
        self.function = f
        self.counter = 0
  59: c = FunctionCounter(fun1)
  60: c.function
  61:
def fun1(x):
    return x * x
  62: c = FunctionCounter(fun1)
  63: c.function
  64: c.counter
  65:
class FunctionCounter:
    def __init__(self, f):
        self.function = f
        self.counter = 0

    def __call__(self, x):
        return self.function(x)
  66:
def fun1(x):
    return x * x
  67: c = FunctionCounter(fun1)
  68: c.counter
  69: c.function
  70: c(123)
  71: c(4)
  72: fun1(x)
  73: fun1(4)
  74: c(1234)
  75: fun1(1234)
  76: c.function
  77:
class FunctionCounter:
    def __init__(self, f):
        self.function = f
        self.counter = 0

    def __call__(self, x):
        self.counter += 1
        return self.function(x)
  78: c = FunctionCounter(fun1)
  79: c.counter
  80: c(123)
  81: c.counter
  82: c(321)
  83: c.counter
  84:
def fun1(x):
    return x * x
  85: c = FunctionCounter(fun1)
  86:
@FunctionCounter
def fun1(x):
    return x * x
  87: fun1.counter
  88: fun1.function
  89: fun1(123)
  90: fun1(321)
  91: fun1(1234)
  92: fun1(4321)
  93: fun1.counter
  94:
class FunctionCounter:
    def __init__(self, f):
        self.function = f
        self.counter = 0

    def __call__(self, x):
        self.counter += 1
        return self.function(x)
  95:
class FunctionCounter:
    def __init__(self, f):
        self.function = f
        self.counter = 0

    def __call__(self, x):
        self.counter += 1
        return self.function(x)

    def resetCounter(self):
        self.counter = 0
  96:
@FunctionCounter
def fun1(x):
    return x * x
  97: fun1(123)
  98: fun1(31)
  99: fun1(321)
 100: fun1.counter
 101: fun1.resetCounter()
 102: fun1.counter
1632/4:
def fun(a, b):
    return a + b
1632/5: fun(*[a , b])
1632/6: fun(*[1 , 2])
 103:
def funWithMultipleArguments(*args):
    for arg in args:
        print(arg)
 104: funWithMultipleArguments(1 , 2 , 3 , 4)
 105:
def funWithMultipleArguments(*args):
    print("number of positional arguments : ", len(args))
    for arg in args:
        print(arg)
 106: funWithMultipleArguments(1, 2, 3, 4)
 107: listOfArguments = [1, 2, 3, 4]
 108: funWithMultipleArguments(*listOfArguments)
 109: funWithMultipleArguments(listOfArguments)
1632/7: fun(*args, **kwargs)
 110:
def funABAndRest(a, b, *args):
    print("first argument : ", a)
    print("second argument : ", b)
    print("number of remaining positional arguments : ", len(args))
    for arg in args:
        print(arg)
 111: funABAndRest(1 , 2 , 100 , 200 , 300)
 112: funABAndRest(1 , 2 , *listOfArguments)
 113: listOfArguments
 114: funABAndRest(1 , 2 , listOfArguments)
 115: funABAndRest(1 , 2 , *listOfArguments)
 116:
def funWithMultipleArguments(*args):
    print("number of positional arguments : ", len(args))
    for arg in args:
        print(arg)
 117:
def funABAndRest(a, b, *args):
    print("first argument : ", a)
    print("second argument : ", b)
    print("number of remaining positional arguments : ", len(args))
    for arg in args:
        print(arg)
1632/8:
def fun(*x):
    for arg in x:
        print(x)
1632/9: fun(1 , 2 , 3 ,4)
1632/10:
def fun(*x):
    for arg in x:
        print(arg)
1632/11:
def fun(*x):
    for arg in x:
        print(arg)
    return x
1632/12: fun(fun(1 , 2 , 3 , 4))
 118: d = {(1, 1): 2, (1, 2): 3}
 119: d[(1 , 1)]
 120: d[(1 , 2)]
 121: d = {(1, 1): 2, (1, 2 , 3): 3}
 122: d[(1 , 2 , 3)]
 123:
def veryGeneralFunction(*args, **kwargs):
    print(args)
    print(kwargs)
 124: veryGeneralFunction(1 , 2 , 3 , "4" , a = 123 , b = 321)
1632/13: "123".hash()
1632/14: "123".__hash__()
 125:
def veryGeneralFunction(*args, **kwargs):
    print(args.__hash__())
    print(kwargs.__hash__())
 126: veryGeneralFunction(1, 2, 3, "4", a=123, b=321)
 127:
def veryGeneralFunction(*args, **kwargs):
    print(args.__hash__)
    print(kwargs.__hash__)
 128: veryGeneralFunction(1, 2, 3, "4", a=123, b=321)
 129:
def veryGeneralFunction(*args, **kwargs):
    print("positional arguments : ", args)
    print("hash of positional arguments : ", args.__hash__())
 130: veryGeneralFunction(1, 2, 3, "4", a=123, b=321)
 131:
def veryGeneralFunction(*args, **kwargs):
    print("positional arguments : ", args)
    print("hash of positional arguments : ", args.__hash__())
    print("keyword arguments : ", "kwargs")
1632/15: {1 : 2 , 2 : 3}
1632/16: {1: 2, 2: 3}.__hash__()
1632/17: {1: 2, 2: 3}.__hash__
 132:
def veryGeneralFunction(*args, **kwargs):
    print("positional arguments : ", args)
    print("hash of positional arguments : ", args.__hash__())
    print("keyword arguments : ", kwargs)
 133: ls
 134: veryGeneralFunction(1, 2, 3, "4", a=123, b=321)
1632/18: tuple({1: 2, 2: 3})
 135:
def veryGeneralFunction(*args, **kwargs):
    print("positional arguments : ", args)
    print("hash of positional arguments : ", args.__hash__())
    print("keyword arguments : ", kwargs)
    print("dictionaries have no __hash__ method! please implement this yourself!")
 136: veryGeneralFunction(1, 2, 3, "4", a=123, b=321)
 137: (1, 2, 3, "4")
 138: (1, 2, 3, "4").__hash__()
 139: ((1, 2, 3, "4") , (('a' : 123 , 'b' : 123))).__hash__()
 140: ((1, 2, 3, "4") , (('a' , 123) , ('b' , 123))).__hash__()
 141: veryGeneralFunction(1, 2, 3, "4", a=123, b=321)
 142:
class BadHash:
    def __init__(self, val):
        self.value = val
        self.hash = val.__hash__()

    def update(self, newval):
        self.value = newval
 143:
class BadHash:
    def __init__(self, val):
        self.value = val
        self.hash = val.__hash__()

    def update(self, newval):
        self.value = newval

    def __hash__(self):
        return self.hash
 144: a = BadHash(123)
 145: a.__hash__()
 146: 123.__hash__()
 147: a = 132
 148: a.__hash__()
 149: a = BadHash(123)
 150: a.value
 151: a.__hash__()
 152: a.update(321)
 153: a.value
 154: a.__hash__()
 155: a = BadHash(123)
 156: b = BadHash(321)
 157: {(a, b): 1111111}
 158: memory = {(a, b): 1111111}
 159: memory[(a , b)]
 160: a.update(-123)
 161: b.update(-321)
 162: memory[(a, b)]
 163:
class MyNumber:
    def __init__(self, val):
        self.value = val

    def __add__(self, other):
        return self.value + other.value
 164: a = MyNumber(123)
 165: b = MyNumber(321)
 166: c = a + b
 167: a.value
 168: b.value
 169: c.value
 170:
class MyNumber:
    def __init__(self, val):
        self.value = val

    def __add__(self, other):
        return MyNumber(self.value + other.value)
 171:
class MyNumber:
    def __init__(self, val):
        self.value = val

    def __add__(self, other):
        return self.value + other.value
 172: a = MyNumber(123)
 173: b = MyNumber(321)
 174: a + b
 175: type(a + b)
 176:
class MyNumber:
    def __init__(self, val):
        self.value = val

    def __add__(self, other):
        return MyNumber(self.value + other.value)
 177: a = MyNumber(123)
 178: b = MyNumber(321)
 179: c = a + b
 180: c
 181: c.value
 182: type(c)
 183:
class MyNumber:
    def __init__(self, val):
        self.value = val

    def __add__(self, other):
        return MyNumber(self.value + other.value)
 184: a = MyNumber(123)
 185: b
 186: a = MyNumber(123)
 187:
class MyNumber:
    def __init__(self, val):
        self.value = val

    def __add__(self, other):
        return MyNumber(self.value + other.value)
 188: a = MyNumber(123)
 189: b = MyNumber(321)
 190: a + b
 191: 123 + 321
 192: MyNumber(123) + MyNumber(321)
 193:
class MyNumber:
    def __init__(self, val):
        self.value = val

    def __add__(self, other):
        return MyNumber(self.value + other.value)

    def __repr__(self):
        return repr(self.value)
 194: MyNumber(123) + MyNumber(321)
 195: str(MyNumber(123))
 196:
class MyNumber:
    def __init__(self, val):
        self.value = val

    def __add__(self, other):
        return MyNumber(self.value + other.value)

    def __repr__(self):
        return repr(self.value)

    def __str__(self):
        return str(self.value)
 197: MyNumber(123) + MyNumber(321)
 198: str(MyNumber(123))
 199:
class MyNumber:
    addCounter = 0

    def __init__(self, val):
        self.value = val

    def __add__(self, other):
        return MyNumber(self.value + other.value)

    def __repr__(self):
        return repr(self.value)

    def __str__(self):
        return str(self.value)
 200: MyNumber.addCounter
 201:
class MyNumber:
    addCounter = 0

    def __init__(self, val):
        self.value = val

    def __add__(self, other):
        MyNumber.addCounter += 1
        return MyNumber(self.value + other.value)

    def __repr__(self):
        return repr(self.value)

    def __str__(self):
        return str(self.value)
 202: MyNumber.addCounter
 203: MyNumber(123) + MyNumber(321)
 204: MyNumber.addCounter
 205: MyNumber(123) + MyNumber(321)
 206: MyNumber.addCounter
 207:
class MyNumber:
    addCounter = 0

    def __init__(self, val):
        self.value = val

    def __add__(self, other):
        MyNumber.addCounter += 1
        return MyNumber(self.value + other.value)

    def __repr__(self):
        return repr(self.value)

    def __str__(self):
        return str(self.value)
 208:
class MyNumber:
    addCounter = 0

    def __init__(self, val):
        self.value = val

    def __add__(self, other):
        MyNumber.addCounter += 1
        return MyNumber(self.value + other.value)

    def __repr__(self):
        return repr(self.value)

    def __str__(self):
        return str(self.value)

    def resetCounter():
        MyNumber.addCounter = 0
 209: %history -g -f ipython_history
